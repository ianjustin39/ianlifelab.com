<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PRODUCT on Your Life, Your Lab</title>
    <link>https://ianlifelab.com/categories/product/</link>
    <description>Recent content in PRODUCT on Your Life, Your Lab</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 20 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://ianlifelab.com/categories/product/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AI 焦慮！AI 時代的 PM 該怎麼生存？</title>
      <link>https://ianlifelab.com/post/product/product/ai-and-product-manager/</link>
      <pubDate>Thu, 20 Mar 2025 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/post/product/product/ai-and-product-manager/</guid>
      <description>在 AI 大量發生後的這段時間，社群上一直充斥著『XXX 是不是會被 AI 取代？』、『YY 公司導入 AI 降低了 n% 的人力成本』等資訊， 究竟 PM 會隨著這股 AI 浪潮被取代？還是會有不一樣的機會出現？
AI 可以幫助我們做什麼？ 想起剛出社會當軟體工程師時，遇到一個 bug 要爬各種 Stack Overflow 找問題出在哪，然後不斷地 try-and-error， 而現在只需要把問題丟給 AI 就可以用最短的時間內找到方法，甚至叫他優化程式碼，這能不香嗎？
過去一個 PM 想要推出一個功能，從發想到 prototype，除非 PM 本身會設計會寫程式，不然光靠 PM 一個人很難做到這件事。 但現在，PM 只要會畫圖，就可以讓會畫圖的 AI 幫忙產出 wireframe，接著再把 wireframe 放到會寫程式的 AI 就可以產出一個 prototype 了。
不只 prototype，連整理數據、整理訪談資料、整理研究資料、製作簡報等，這些 PM 平常要做的事情，都有對應的 AI 可以幫忙， 這大幅提升了工作的效率，也降低了許多決策的門檻。
在做 MeFresh 這個產品時，我當然也使用了 ChatGPT 幫助我解決我遇到的很多問題，比方說我希望點擊按鈕時有個動畫效果，但我以往是後端工程師不會做動畫怎麼辦？ GPT 很快地幫我找到了解法，並解釋了對應的參數，在使用這段程式碼後 app 也確實產生了動畫效果，只要去調整參數讓效果更貼近我所想像的就好了。
再產品的部分，我也請 GPT 幫我找尋國內外類似的產品、甚至每個國家使用不同類型產品的習慣，讓我可以更有目標的去知道要分析哪些產品，而不會像無頭蒼蠅一樣亂撞。
AI 確實幫助了工作上『效率』、『速度』的提升，但&amp;hellip;它有沒有副作用呢？
提升效率而非代替成長？ AI 確實可以提升效率，但他不一定可以幫助你解決所有問題。 若直接搬運程式碼，可能造成 app 不相容或是隱藏的 bug；若直接將 AI 給的分析資訊拿去做產品決策，也可能導致錯誤發生。</description>
    </item>
    
    <item>
      <title>還在自己畫流程圖嗎？學會下指令讓 ChatGPT &#43; Notion 幫你解決所有事情</title>
      <link>https://ianlifelab.com/tech/drawing-flowcharts-with-ChatGPT-and-Notion/</link>
      <pubDate>Tue, 05 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/tech/drawing-flowcharts-with-ChatGPT-and-Notion/</guid>
      <description>你的產品流程圖還在慢慢畫嗎？
開發產品時產品經理需要畫很多圖，就算是自己創業或是做 Side project，把你龐大的思緒整理成有條理的流程圖或心智圖也要花上不少時間。 最近在設計產品的全新功能，使用 ChatGPT + Notion 組合後發現，這組合大大的降低我準備素材的時間，只需要直接將 Mermaid 程式碼放入 Notion 的程式碼 block 內就可以將流程圖呈現出來，不需要再用 Mirror 或是 Figma 一個一個拉，同時 Notion 為主要的產品管理平台， 等於我們使用了最少的工具及時間，就可以完成這些複雜的事情。
該準備什麼素材給 ChatGPT？ 如何下 prompt 應該是大家比較在意的事情，但在下 prompt 之前，身為 PM 的你應該對於接下來要設計的新功能流程有一定程度上的了解， 如果沒有也沒關係，可以先問問 GPT ，看他對於你想要設計的新功能有什麼想法：
在詢問時先告訴 GPT 他需要 cosplay 什麼角色，GPT 會依照角色跟問題給回答一個相對精準的答案
註：回答的內容有點多截取部分做表示
這時你可以檢查這個流程是不是跟你想像中的一樣，或是有哪些地方需要增減，這邊先假設他提供的流程符合我的需求， 所以我接續要求他把這段流程寫成 Mermaid 的語法：
這時你便獲得了一串看似很複雜，自己要研究很久才看得懂的程式碼。不過不用擔心，你只需要將這段程式碼貼到 Notion 上， Notion 會自動幫你畫出整張流程圖
若覺得流程圖直式很難看，你只需要將程式碼第一行的graph TD 改為 graph LR 那流程圖就會改為橫式，就看使用上篇好哪種方式呈現拉！
LR：從左到右。
RL：從右到左。
TB or TD：從上到下。
BT：從下到上。
以流程圖來說，ChatGPT 產出的程式碼已經算堪用，畢竟流程只是要討論接下來如何實作該功能，但如果你希望更了解如何撰寫流程圖的話， 可以參考 Mermaid 的官方 Doc的資訊學習。
Functional Map 也讓 GPT 來幫我完成吧 隨著產品越來越大，Functional Map (功能地圖) 的維護也越發困難&amp;hellip;，但不要擔心，一樣靠 GPT 可以幫助你完成這件事。</description>
    </item>
    
    <item>
      <title>新產品不適合跑 Scrum？</title>
      <link>https://ianlifelab.com/post/start-up/start-up/do-not-use-scrum-before-new-pd-launch/</link>
      <pubDate>Thu, 07 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/post/start-up/start-up/do-not-use-scrum-before-new-pd-launch/</guid>
      <description>Scrum 算是現在軟體公司內最主流的協作框架，藉由 sprint 來切割產品每次更新的 scope ，讓產品可以不斷地與用戶互動，從而打造最貼近用戶及市場的產品。 但並不是所有的產品或是團隊都適合執行 Scrum 這個框架，甚至 Scrum 會阻礙開發的進度。
Scrum 的優勢在於小步快跑 Scrum 的優勢在於小步快跑，產品藉由每次的迭代更新，不斷地適應市場的改變與用戶的需求。 在執行 sprint 的過程中，會評估每個 task 所需要花的資源、每個 sprint 可以完成掉多少 task 以及定義每個 sprint 的 goals 等， 這些數據讓 PM 可以有效的管理產品的進度，同時也可以經由這些資訊與不同的部門合作，讓產品可以在市場上順利被推行。
新產品還沒上線之前不適合跑 Scrum？ 為什麼會說產品還沒上市前不適合跑 Scrum 呢？剛剛有提到，Scrum 講求小步快跑，藉由產品的快速迭代獲取更多用戶反饋，進而打造更貼近市場的產品。 重點來了！『產品的快速迭代』來獲取反饋，但產品還沒上線，怎麼來迭代獲取反饋呢？ 同時 Scrum 中的會議也會大量使用掉團隊的時間，在產品發布之前更應該把時間放在開發產品上，盡量避免耗時太久的會議。
在新產品上線之前，通常團隊或是 PM 會決定好新產品要有什麼功能，或是具備什麼條件，滿足這些需求推出市場才有意義。 所以在開發新產品時，團隊的目標並非迭代產品，而是完成可上線的產品，讓銷售部門可以順利的將產品推往市場。 這階段會更像是專案式的開發方式而非 Scrum。
專案式的開發方式，就像接案公司承接甲方的案件一樣，有明確的交付日期以及交付項目，這些資訊通常會跟著發佈計畫做調整； 同理，在公司內部開發新產品時，也會有一個發布計畫，預計新產品需要在何時發布、發布時需要囊括哪些功能、預期帶來什麼效應等等， 若錯過此時機，可能發布的效果就不會如預期般理想。
時效性的例子，我想以 Youtuber 是最好的範例，每年 Apple 新品發佈會，各大科技 YT 都會守在電腦前面，甚至有的被受邀出席 Apple 官方的實體發佈會， 在結束後分秒必爭的整理素材、剪輯後製、發布影片，為了就是要搭上發佈會後的這個黃金時段，因為這時流量最高，可能只要晚同業一兩天，流量就是天與地的差異。 產品的開發雖然沒有這麼極端，但邏輯卻非常相似。
這是否代表用專案式開發方式，要完全捨棄 Scrum 用取代呢？
新產品並非不適合 Scrum，而是看怎麼使用 其實並非新產品不適合 Scrum，而是不要拘泥於形式讓 Scrum 成了開發上的障礙，如開發不完就遞延，這可能會影響到產品上線的標準。</description>
    </item>
    
    <item>
      <title>矽谷推崇的新創思維 - 為何要產品需要 MVP？</title>
      <link>https://ianlifelab.com/post/start-up/start-up/why-need-mvp/</link>
      <pubDate>Tue, 05 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/post/start-up/start-up/why-need-mvp/</guid>
      <description>MVP 是那個 MVP 嗎？ 在軟體產業中，MVP （最小可行性產品）這個詞大家應該不陌生，但在工作上卻不太容易去接觸到，因為在我們進入公司時， 大部分的公司都已經有一個穩定的產品，或是已經經過打磨驗證的產品，這讓我們要從如何去實踐 MVP 這套理論的機會也變得比較困難。 所以大家可能都有『產品最好先推出 MVP 』的概念，但卻很少有實際執行 MVP 的經驗。
產品推出 MVP 會帶給你什麼好處？ 一定要推 MVP 嗎？以前的產品也沒 MVP 照樣有人買單啊！
說到早期產品開發，通常會經歷開會討論需求、確認規格、執行開發、功能測試、產品發佈等階段，中間可能還會有需求變更的環節、溝通落差等還環節讓時間延遲， 前後加起來可能 12~18 個月甚至更久，但早期的產品仍能獲得了成功，為何現在不行呢？ 相比十年前，現今社會的變化速度太快，以前可能五年市場才會出現變化，現在可能一年甚至更短，市場或是人們的習慣就會被改變。
以一個遊戲為例，約莫十年前日本推出一款遊戲叫龍族拼圖，當時風靡遊戲市場一大段時間，還記得當時一隻 T1 角色可以稱霸遊戲半年一年沒問題， 但現在遊戲的選擇太多，遊戲商為了讓玩家花更多注意力在遊戲上，遊戲不斷推出新的挑戰刺激玩家，副本 Meta 不斷改變， 上個月人人搶著抽的 T1 的角色，這個月在 PTT 可能就出現『XX 是不是過氣』的類似留言。
產品市場也是，現在環境以及用戶的習慣變化的太快速，如果花一兩年的時間開發產品，可能產品已經沒辦法滿足現在客戶的需求了。 而經由 MVP 提早接觸市場，我認為對產品有以下三個好處：
1. 確認產品的方向 我想拍拍圈（PopChill）是個不錯的例子，當初拍拍圈的產品想要做社群電商，像是 IG 裡面內建電商的功能一樣， 推出之後發現這個題目似乎跟當初預期的效果不一樣，最終他們決定要把題目改為『精品二手拍賣』，現在的成果就非常的好。 試想要是拍拍圈產品做了一兩年都沒推出市場，花了大把資源卻發現選錯題目，到時改題目的成本會不會更高？
產品提早接觸市場，不但可以驗證產品是否有解決市場上的問題，也可評估產品的方向是否需要改變。
2. 確認產品功能是否真的被需要 做產品的人有時會掉入『我要打造最強產品』漩渦，而忽略了市場需求及聲音。 團隊可能從市場發現某些需求，或是經由訪談找到了用戶沒被滿足的痛點，讓產品有機會從這些點切入， 但這些都停留在『我們覺得用戶需要』的階段，但我們不知道的是，可能這些需求對於用戶來說不夠痛，他們有其他替代品可以使用， 有或是推出的產品雖然解決了問題，但因為設計不良讓用戶花更多的時間適應產品，以至於用戶們不買單。 推出 MVP 可以驗證我們的假設，同時團隊可以從先行使用的用戶中獲得的反饋去優化產品，讓產品可以更貼近用戶的需求，解決他們實務上的問題。
3. 確認產品 TA 是否與預期的相似 一開始在設計產品時，團隊一定會依照某些標準去 target 一些用戶為產品的 TA，試著以這些 TA 的輪廓來規劃產品的解決方案。 這跟第二點類似，這些 TA 是『我們認為的 TA』，實際上可能不是，比方說一個加密貨幣錢包商，認為所有接觸加密貨幣的人都是錢包的 TA， 但推出產品後發現，相比於錢包，專業交易員更喜歡使用交易所，不只是交易所提供豐富的衍生性金融商品，交易所在交易上對於交易員來說比錢包方便很多。 這時團隊就會了解要把交易員剔除在目標客戶之外，關於交易相關的功能優先度就變得不是那麼的高。</description>
    </item>
    
    <item>
      <title>誰說 sprint ticket 一定要 story point?</title>
      <link>https://ianlifelab.com/post/product/product/does-ticket-must-need-story-point/</link>
      <pubDate>Mon, 27 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/post/product/product/does-ticket-must-need-story-point/</guid>
      <description>有參與過敏捷開發的人一定聽過 story point，網路上也很多有關 story point 的解釋以及如了運用， 他主要是協助衡量團隊的開發狀況，讓 PM 可以再有一定的基準下去跟其他部門溝通，如產品行銷或是活動銷售等等。 但是不是真的有了 story point 就一定可以讓產品或專案順利進行？ 有沒有可能有了 story point 但還是遇到一堆狀況？
永遠估不準的 Story Point 有沒有遇過這個狀況，在 sprint lanning 時團隊評估這個 sprint 可以完成 40 點，但 sprint 結束時卻只完成了 25~30 點， 常見的原因可能有這幾種：
ticket 的點數估不準（如後端工程師估一同評估前端工程師的 ticket ） 評估 ticket 時忘記某個項目也要做（如 App 新功能只評估畫面開發，遺漏 API 串接） 實作 ticket 時出現預期之外問題或任務（在串接第三方平台時，回的參數與文件給的不同） 這些狀況都可能對在進行中的 sprint 造成一些風險，當然一般來說還是有辦法解決， 通常會在 Retrospective meeting 中去討論如何避免這次該遇到的困難，如後端工程師需要了解前端的開發不只有畫面，也包含邏輯； 與第三方廠商串接資料時需要先確認文件與實際提供的參數是否相同等事項，並期待下次再評估點數時可以更貼近團隊的狀況。
但，有沒有就是沒辦法解決的狀況？如不管討論幾次總是會出現預期之外的問題，或是 ticket 總是會在 sprint 中不斷地長大， 導致需要在 sprint 去調整開發進度，接著去跟其他部門溝通 Delay 的狀況呢？
以 Sprint Goals 為導向，Story Point 僅是參考 在執行敏捷開發的過程中，團隊可能覺得目標是『完成全部的 story point』， 但如果遇到了進度不如預期，會很容易掉入一個互相踢皮球的狀況，如『 PM 安排太多事情了拉』， 『這個 sprint 少一天沒辦法做這麼多啊』、『為什麼工程師可以做這麼慢，這不是很簡單嗎？』、『做不完大家都有鍋啊』之類的情境內。</description>
    </item>
    
    <item>
      <title>為什麼產品開發一定要有 Deadline？ 注意這五點提升團隊效率</title>
      <link>https://ianlifelab.com/post/product/product/why-need-deadline/</link>
      <pubDate>Sat, 05 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/post/product/product/why-need-deadline/</guid>
      <description>Deadline 的用途是什麼？ 產品經理在規劃產品路線圖（Roadmap）時常以會先做競品分析、市場分析或是用戶訪談，結著評估分析結果是否契合公司的年度或季度目標，最後再安排進 Roadmap 。這份 Roadmap 並非僅提供給產品跟技術團隊，行銷、業務、客服團隊也會根據 Roadmap 上即將釋出的功能去提前做準備，如與合作夥伴洽談、KOL 協作或是撰寫 FAQ 等，這時 Deadline 變得尤為重要，它成為各個團隊追蹤進度的標準。當 Deadline 一到，所有的任務都將完成，產品因此得以投入市場。不過若某團隊因為某些原因導致無法如期完成這項任務，則會影響到其他部門，甚至公司達成目標。
因此， Deadline 不僅僅是產品發佈的時間點，同時也是團隊協作中的一個共同指標，避免有認知上的落差。
Deadline 除了讓團隊有一致的目標，還能讓產品提早迭代 剛才我們提及，產品經理在策劃產品時有諸多因素需要考量。以區塊鏈產業來說，2021 年末是 NFT 風潮的高峰， 年初產品經理經過評估認為 NFT 將是今年的趨勢，因此規劃相關功能並預計年中完成並投入市場。若在 Deadline 之前完成，對於產品而言可以提早進入市場做測試、收集用戶反饋，進行迭代更新，等到 NFT 流量達到巔峰時，產品已經完成打磨，符合 80 甚至 90% 市場需求，行銷與業務部門也可以提前布局，讓產品更容易被市場關注，進而吸引大量的用戶。反之若錯失高峰後才完成，用戶早就已經找到習慣使用的產品，這時要再將其他產品的用戶轉換到自家產品將變得相當困難。
是否每件事都需要設定一個 Deadline 以軟體產品為例，可能大部分公司都是以 Scrum 的方式在迭代產品。通常，這種方法不會明確產生一個絕對的 Deadline，或者說 Sprint 的最後一天即視為 Deadline。而 Scrum 作為開發的話會更專注在每個 Sprint 的 Sprint Goals ，有明確的 Goals 可以讓團隊在 Sprint 期間能夠專注目標衝刺。
然而產品總是會有需要推出重大更新的時候，通常是基於市場趨勢的評估，或是發現有新的痛點或是機會的突破口，需要在特定的時間點完成特定任務，如果錯過時機，可能也就會錯失增長或盈利的機會。這就是為何必須有明確的 Deadline，以確保產品能在正確的時間點推向市場。
以先前 NFT 的例子為例，若是在 2021/06 加密貨幣錢包推出 NFT 相關功能，早期的 NFT 玩家將優先選擇有支援 NFT 的錢包做使用，雖然功能可能不完整，但市場上暫無其他產品競爭，產品不僅獲取了早期玩家，還有時間可以做迭代更新，領先其他競爭對手。若是在 2021/12 NFT 流量最高時推出，也能吸引一些追隨NFT潮流進入市場的圈外玩家，但相較於 6 月，12 月時支援了 NFT 功能的錢包已更多，所以獲客成本相較於 6 月會高出一些。最後就是在流量往下掉時推出，市場或許認為 NFT 即將泡沫化，大部分玩家不再對 NFT 保持樂觀，這時產品要獲取用戶將極具挑戰。</description>
    </item>
    
    <item>
      <title>畫 Wireframe 目的是什麼？</title>
      <link>https://ianlifelab.com/post/product/product/pm101-wireframe/</link>
      <pubDate>Mon, 02 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/post/product/product/pm101-wireframe/</guid>
      <description>最近畫 Wireframe 的頻率有點高，也畫出了一些心得，中間也有遇到一些問題，剛好分享紀錄一下。
什麼是 Wireframe 基本的 Wireframe 是一種低保真的設計原型，頁面上面沒有華麗的設計元素，只有匡線、文字資訊、架構排版等。 在一個新的需求出現時，會有非常多的不確定性，需要先確定產品要呈現什麼資訊給用戶、使用旅程是什麼、可能遇到什麼問題、我們想解決什麼問題等， 都需要考慮進去，所以若是太快進入 UI 設計，如果架構或是流程等部分需要做更改，可能會造成過多的資源消耗。
畫 Wireframe 目的是什麼？ 我認為 Wireframe 階段主要考慮以下兩個部分：
傳遞資訊 使用者流程 以下會拿會員系統內新增訂單功能來做範例：
傳遞資訊 畫面上要呈現什麼類型的資訊給用戶，必須在 Wireframe 階段就決定， 使用適當的文字幫助用戶理解情境，讓用戶可以很簡單的知道新功能的價值是什麼。
比方說，電商會員系統中新增了查詢訂單的功能，用戶在登入會員後會希望去看自己的訂單狀況， 或許在會員頁面上用一段文字提醒目前訂單狀況，讓用戶在一進到會員頁面時就知道自己的訂單現在的狀況。
使用者流程 接續上述的情境，當用戶看到自己訂單狀況時，要怎麼樣引導他去看到自己的訂單。 可以在文字附上超連結導去訂單頁面，也可以在畫面上新增『我的訂單』的分頁，讓用戶可以用最短時間內找到自己的訂單， 這些都是我們希望用戶去看到訂單的方式。
所以 Wireframe 除了傳達資訊以外，使用者流程也是很重要的一環，用戶看到關鍵訊息後，可以很簡單的使用新功能。
Wireframe 常見的錯誤 第一次畫 Wireframe 的人很有可能落入『濫用視覺元素』這個錯誤，畫著畫著就會開始想頁面的顏色要怎樣呈現比較好按鈕形狀長怎樣， 要放什麼 icon 在畫面上，在顯示圖片的地方要放哪張圖等。 但這些東西並不是在 Wireframe 階段該專注的事情，上面有提到 Wireframe 專注於傳遞資訊，包含資訊架構、流程等等， 而不是設計，所以用最簡單基本的方式呈現，剩下精緻的設計就讓設計師煩惱吧。
以下幾個是我從零開始畫 Wireframe 時會注意的幾點：
只用灰白色，專注於架構的呈現 單一字體，專注於傳達資訊 只用 3, 4 種字級 不用照片或插圖，用方框框代替 不用強烈風格的 icon 或裝飾圖 另一個情況是，產品已經很成熟，在 Wireframe 階段會拿既有的畫面去改，這時要注意的點便是每個畫面或是元件所使用的場景是什麼。 以電商來說，買家的訂單元件以及賣家的訂單元件可能就長得不一樣，這時如果混用的話，由於已經算是高保真的設計， 這時一同討論的工程師或是設計師可能會因為精緻的畫面，而跳過『討論資訊架構』的階段，開始思考畫面的問題。 所以當使用既有的畫面去做 Wireframe 時要注意使用的元件要正確，不能混用，導致誤會。</description>
    </item>
    
  </channel>
</rss>
