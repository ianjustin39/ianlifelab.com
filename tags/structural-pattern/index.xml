<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Structural Pattern on Life Story</title>
    <link>https://ianjustin39.github.io/ianlife/tags/structural-pattern/</link>
    <description>Recent content in Structural Pattern on Life Story</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 28 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://ianjustin39.github.io/ianlife/tags/structural-pattern/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>代理模式 | Proxy Pattern</title>
      <link>https://ianjustin39.github.io/ianlife/design-pattern/proxy-pattern/</link>
      <pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianjustin39.github.io/ianlife/design-pattern/proxy-pattern/</guid>
      <description>本系列文章同步分享於IT邦幫忙第12屆鐵人賽
Design Pattern 系列文章導讀 Design Pattern可以說是開發上大家都會遇到的一個課題， 這系列文會從Design Principles、各種design pattern到最後的Anti-Patterns &amp; Code Smells介紹下去，讓我們可以更了解各種pattern的使用時機與場合。 預計目標主題如下，若有哪部分不熟的章節可以直接點進去看 註：可以利用Online Java Compiler IDE 設計模式 - 入門篇 什麼是Design Pattern? Design Pattern的類型與原則 設計模式 - 原則篇 | Design Principles 單一職責原則 | Single Responsibility Principle 開閉原則 | Open/Closed Principle 里氏替換原則 | Liskov Substitution Principle 介面隔離原則 | Interface Segregation Principle 依賴反轉原則 | Dependency Inversion Principle 合成/聚合複用原則 | Composite/Aggregate Reuse Principle 迪米特法則 | Law of Demeter 設計模式 - 創建型模型篇 | Creational Patterns 單例模式 | Singleton Pattern 工廠模式 | Factory Pattern 抽象工廠模式 | Abstract Factory Pattern 生成器模式 | Builder Pattern 原型模式 | Prototype Pattern 設計模式 - 結構型模型篇 | Structural Patterns 適配器模式 | Adapter Pattern 橋接模式 | Bridge Pattern 组合模式 | Composite Pattern 裝飾者模式 | Decorator Pattern 外觀模式 | Facade Pattern 享元模式 | Flyweight Pattern 代理模式 | Proxy Pattern 設計模式 - 行為型模型篇 | Behavioural Patterns 責任鏈模式 | Chain of Responsibility Pattern 命令模式 | Command Pattern 迭代器模式 | Iterator Pattern 中介者模式 | Mediator Pattern 狀態模式 | State Pattern 備忘錄模式 | Memento Pattern 觀察者模式 | Observer Pattern Strategy Pattern Template Pattern Visitor Pattern Interpreter Pattern 設計模式 - 番外篇 Anti-Patterns Code Smells Design Pattern VS 演算法 定義 爲其他物件提供一種代理以控制對這個物件的訪問。</description>
    </item>
    
    <item>
      <title>享元模式 | Flyweight Pattern</title>
      <link>https://ianjustin39.github.io/ianlife/design-pattern/flyweight-pattern/</link>
      <pubDate>Sun, 27 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianjustin39.github.io/ianlife/design-pattern/flyweight-pattern/</guid>
      <description>本系列文章同步分享於IT邦幫忙第12屆鐵人賽
Design Pattern 系列文章導讀 Design Pattern可以說是開發上大家都會遇到的一個課題， 這系列文會從Design Principles、各種design pattern到最後的Anti-Patterns &amp; Code Smells介紹下去，讓我們可以更了解各種pattern的使用時機與場合。 預計目標主題如下，若有哪部分不熟的章節可以直接點進去看 註：可以利用Online Java Compiler IDE 設計模式 - 入門篇 什麼是Design Pattern? Design Pattern的類型與原則 設計模式 - 原則篇 | Design Principles 單一職責原則 | Single Responsibility Principle 開閉原則 | Open/Closed Principle 里氏替換原則 | Liskov Substitution Principle 介面隔離原則 | Interface Segregation Principle 依賴反轉原則 | Dependency Inversion Principle 合成/聚合複用原則 | Composite/Aggregate Reuse Principle 迪米特法則 | Law of Demeter 設計模式 - 創建型模型篇 | Creational Patterns 單例模式 | Singleton Pattern 工廠模式 | Factory Pattern 抽象工廠模式 | Abstract Factory Pattern 生成器模式 | Builder Pattern 原型模式 | Prototype Pattern 設計模式 - 結構型模型篇 | Structural Patterns 適配器模式 | Adapter Pattern 橋接模式 | Bridge Pattern 组合模式 | Composite Pattern 裝飾者模式 | Decorator Pattern 外觀模式 | Facade Pattern 享元模式 | Flyweight Pattern 代理模式 | Proxy Pattern 設計模式 - 行為型模型篇 | Behavioural Patterns 責任鏈模式 | Chain of Responsibility Pattern 命令模式 | Command Pattern 迭代器模式 | Iterator Pattern 中介者模式 | Mediator Pattern 狀態模式 | State Pattern 備忘錄模式 | Memento Pattern 觀察者模式 | Observer Pattern Strategy Pattern Template Pattern Visitor Pattern Interpreter Pattern 設計模式 - 番外篇 Anti-Patterns Code Smells Design Pattern VS 演算法 定義 運用共享技術有效地支持大量細粒度的物件。</description>
    </item>
    
    <item>
      <title>外觀模式 | Facade Pattern</title>
      <link>https://ianjustin39.github.io/ianlife/design-pattern/facede-pattern/</link>
      <pubDate>Sat, 26 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianjustin39.github.io/ianlife/design-pattern/facede-pattern/</guid>
      <description>本系列文章同步分享於IT邦幫忙第12屆鐵人賽
Design Pattern 系列文章導讀 Design Pattern可以說是開發上大家都會遇到的一個課題， 這系列文會從Design Principles、各種design pattern到最後的Anti-Patterns &amp; Code Smells介紹下去，讓我們可以更了解各種pattern的使用時機與場合。 預計目標主題如下，若有哪部分不熟的章節可以直接點進去看 註：可以利用Online Java Compiler IDE 設計模式 - 入門篇 什麼是Design Pattern? Design Pattern的類型與原則 設計模式 - 原則篇 | Design Principles 單一職責原則 | Single Responsibility Principle 開閉原則 | Open/Closed Principle 里氏替換原則 | Liskov Substitution Principle 介面隔離原則 | Interface Segregation Principle 依賴反轉原則 | Dependency Inversion Principle 合成/聚合複用原則 | Composite/Aggregate Reuse Principle 迪米特法則 | Law of Demeter 設計模式 - 創建型模型篇 | Creational Patterns 單例模式 | Singleton Pattern 工廠模式 | Factory Pattern 抽象工廠模式 | Abstract Factory Pattern 生成器模式 | Builder Pattern 原型模式 | Prototype Pattern 設計模式 - 結構型模型篇 | Structural Patterns 適配器模式 | Adapter Pattern 橋接模式 | Bridge Pattern 组合模式 | Composite Pattern 裝飾者模式 | Decorator Pattern 外觀模式 | Facade Pattern 享元模式 | Flyweight Pattern 代理模式 | Proxy Pattern 設計模式 - 行為型模型篇 | Behavioural Patterns 責任鏈模式 | Chain of Responsibility Pattern 命令模式 | Command Pattern 迭代器模式 | Iterator Pattern 中介者模式 | Mediator Pattern 狀態模式 | State Pattern 備忘錄模式 | Memento Pattern 觀察者模式 | Observer Pattern Strategy Pattern Template Pattern Visitor Pattern Interpreter Pattern 設計模式 - 番外篇 Anti-Patterns Code Smells Design Pattern VS 演算法 定義 為子系統中的一組接口提供一個統一的高層接口，使得子系統更容易使用。</description>
    </item>
    
    <item>
      <title>裝飾者模式 | Decorator Pattern</title>
      <link>https://ianjustin39.github.io/ianlife/design-pattern/decorator-pattern/</link>
      <pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianjustin39.github.io/ianlife/design-pattern/decorator-pattern/</guid>
      <description>本系列文章同步分享於IT邦幫忙第12屆鐵人賽
Design Pattern 系列文章導讀 Design Pattern可以說是開發上大家都會遇到的一個課題， 這系列文會從Design Principles、各種design pattern到最後的Anti-Patterns &amp; Code Smells介紹下去，讓我們可以更了解各種pattern的使用時機與場合。 預計目標主題如下，若有哪部分不熟的章節可以直接點進去看 註：可以利用Online Java Compiler IDE 設計模式 - 入門篇 什麼是Design Pattern? Design Pattern的類型與原則 設計模式 - 原則篇 | Design Principles 單一職責原則 | Single Responsibility Principle 開閉原則 | Open/Closed Principle 里氏替換原則 | Liskov Substitution Principle 介面隔離原則 | Interface Segregation Principle 依賴反轉原則 | Dependency Inversion Principle 合成/聚合複用原則 | Composite/Aggregate Reuse Principle 迪米特法則 | Law of Demeter 設計模式 - 創建型模型篇 | Creational Patterns 單例模式 | Singleton Pattern 工廠模式 | Factory Pattern 抽象工廠模式 | Abstract Factory Pattern 生成器模式 | Builder Pattern 原型模式 | Prototype Pattern 設計模式 - 結構型模型篇 | Structural Patterns 適配器模式 | Adapter Pattern 橋接模式 | Bridge Pattern 组合模式 | Composite Pattern 裝飾者模式 | Decorator Pattern 外觀模式 | Facade Pattern 享元模式 | Flyweight Pattern 代理模式 | Proxy Pattern 設計模式 - 行為型模型篇 | Behavioural Patterns 責任鏈模式 | Chain of Responsibility Pattern 命令模式 | Command Pattern 迭代器模式 | Iterator Pattern 中介者模式 | Mediator Pattern 狀態模式 | State Pattern 備忘錄模式 | Memento Pattern 觀察者模式 | Observer Pattern Strategy Pattern Template Pattern Visitor Pattern Interpreter Pattern 設計模式 - 番外篇 Anti-Patterns Code Smells Design Pattern VS 演算法 定義 裝飾模式動態將責任附加在物件上，若要擴展功能上，裝飾者提供比繼承更有彈性的替代方案。</description>
    </item>
    
    <item>
      <title>组合模式 | Composite Pattern</title>
      <link>https://ianjustin39.github.io/ianlife/design-pattern/composite-pattern/</link>
      <pubDate>Thu, 24 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianjustin39.github.io/ianlife/design-pattern/composite-pattern/</guid>
      <description>本系列文章同步分享於IT邦幫忙第12屆鐵人賽
Design Pattern 系列文章導讀 Design Pattern可以說是開發上大家都會遇到的一個課題， 這系列文會從Design Principles、各種design pattern到最後的Anti-Patterns &amp; Code Smells介紹下去，讓我們可以更了解各種pattern的使用時機與場合。 預計目標主題如下，若有哪部分不熟的章節可以直接點進去看 註：可以利用Online Java Compiler IDE 設計模式 - 入門篇 什麼是Design Pattern? Design Pattern的類型與原則 設計模式 - 原則篇 | Design Principles 單一職責原則 | Single Responsibility Principle 開閉原則 | Open/Closed Principle 里氏替換原則 | Liskov Substitution Principle 介面隔離原則 | Interface Segregation Principle 依賴反轉原則 | Dependency Inversion Principle 合成/聚合複用原則 | Composite/Aggregate Reuse Principle 迪米特法則 | Law of Demeter 設計模式 - 創建型模型篇 | Creational Patterns 單例模式 | Singleton Pattern 工廠模式 | Factory Pattern 抽象工廠模式 | Abstract Factory Pattern 生成器模式 | Builder Pattern 原型模式 | Prototype Pattern 設計模式 - 結構型模型篇 | Structural Patterns 適配器模式 | Adapter Pattern 橋接模式 | Bridge Pattern 组合模式 | Composite Pattern 裝飾者模式 | Decorator Pattern 外觀模式 | Facade Pattern 享元模式 | Flyweight Pattern 代理模式 | Proxy Pattern 設計模式 - 行為型模型篇 | Behavioural Patterns 責任鏈模式 | Chain of Responsibility Pattern 命令模式 | Command Pattern 迭代器模式 | Iterator Pattern 中介者模式 | Mediator Pattern 狀態模式 | State Pattern 備忘錄模式 | Memento Pattern 觀察者模式 | Observer Pattern Strategy Pattern Template Pattern Visitor Pattern Interpreter Pattern 設計模式 - 番外篇 Anti-Patterns Code Smells Design Pattern VS 演算法 定義 物件以樹狀結構組合，做為表現出整體-部分的階層關係。</description>
    </item>
    
    <item>
      <title>橋接模式 | Bridge Pattern</title>
      <link>https://ianjustin39.github.io/ianlife/design-pattern/bridge-pattern/</link>
      <pubDate>Wed, 23 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianjustin39.github.io/ianlife/design-pattern/bridge-pattern/</guid>
      <description>本系列文章同步分享於IT邦幫忙第12屆鐵人賽
Design Pattern 系列文章導讀 Design Pattern可以說是開發上大家都會遇到的一個課題， 這系列文會從Design Principles、各種design pattern到最後的Anti-Patterns &amp; Code Smells介紹下去，讓我們可以更了解各種pattern的使用時機與場合。 預計目標主題如下，若有哪部分不熟的章節可以直接點進去看 註：可以利用Online Java Compiler IDE 設計模式 - 入門篇 什麼是Design Pattern? Design Pattern的類型與原則 設計模式 - 原則篇 | Design Principles 單一職責原則 | Single Responsibility Principle 開閉原則 | Open/Closed Principle 里氏替換原則 | Liskov Substitution Principle 介面隔離原則 | Interface Segregation Principle 依賴反轉原則 | Dependency Inversion Principle 合成/聚合複用原則 | Composite/Aggregate Reuse Principle 迪米特法則 | Law of Demeter 設計模式 - 創建型模型篇 | Creational Patterns 單例模式 | Singleton Pattern 工廠模式 | Factory Pattern 抽象工廠模式 | Abstract Factory Pattern 生成器模式 | Builder Pattern 原型模式 | Prototype Pattern 設計模式 - 結構型模型篇 | Structural Patterns 適配器模式 | Adapter Pattern 橋接模式 | Bridge Pattern 组合模式 | Composite Pattern 裝飾者模式 | Decorator Pattern 外觀模式 | Facade Pattern 享元模式 | Flyweight Pattern 代理模式 | Proxy Pattern 設計模式 - 行為型模型篇 | Behavioural Patterns 責任鏈模式 | Chain of Responsibility Pattern 命令模式 | Command Pattern 迭代器模式 | Iterator Pattern 中介者模式 | Mediator Pattern 狀態模式 | State Pattern 備忘錄模式 | Memento Pattern 觀察者模式 | Observer Pattern Strategy Pattern Template Pattern Visitor Pattern Interpreter Pattern 設計模式 - 番外篇 Anti-Patterns Code Smells Design Pattern VS 演算法 定義 將抽象部分與實現部分分離，使它們都可以獨立的變化。</description>
    </item>
    
    <item>
      <title>適配器模式 | Adapter Pattern</title>
      <link>https://ianjustin39.github.io/ianlife/design-pattern/adapter-pattern/</link>
      <pubDate>Tue, 22 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianjustin39.github.io/ianlife/design-pattern/adapter-pattern/</guid>
      <description>本系列文章同步分享於IT邦幫忙第12屆鐵人賽
Design Pattern 系列文章導讀 Design Pattern可以說是開發上大家都會遇到的一個課題， 這系列文會從Design Principles、各種design pattern到最後的Anti-Patterns &amp; Code Smells介紹下去，讓我們可以更了解各種pattern的使用時機與場合。 預計目標主題如下，若有哪部分不熟的章節可以直接點進去看 註：可以利用Online Java Compiler IDE 設計模式 - 入門篇 什麼是Design Pattern? Design Pattern的類型與原則 設計模式 - 原則篇 | Design Principles 單一職責原則 | Single Responsibility Principle 開閉原則 | Open/Closed Principle 里氏替換原則 | Liskov Substitution Principle 介面隔離原則 | Interface Segregation Principle 依賴反轉原則 | Dependency Inversion Principle 合成/聚合複用原則 | Composite/Aggregate Reuse Principle 迪米特法則 | Law of Demeter 設計模式 - 創建型模型篇 | Creational Patterns 單例模式 | Singleton Pattern 工廠模式 | Factory Pattern 抽象工廠模式 | Abstract Factory Pattern 生成器模式 | Builder Pattern 原型模式 | Prototype Pattern 設計模式 - 結構型模型篇 | Structural Patterns 適配器模式 | Adapter Pattern 橋接模式 | Bridge Pattern 组合模式 | Composite Pattern 裝飾者模式 | Decorator Pattern 外觀模式 | Facade Pattern 享元模式 | Flyweight Pattern 代理模式 | Proxy Pattern 設計模式 - 行為型模型篇 | Behavioural Patterns 責任鏈模式 | Chain of Responsibility Pattern 命令模式 | Command Pattern 迭代器模式 | Iterator Pattern 中介者模式 | Mediator Pattern 狀態模式 | State Pattern 備忘錄模式 | Memento Pattern 觀察者模式 | Observer Pattern Strategy Pattern Template Pattern Visitor Pattern Interpreter Pattern 設計模式 - 番外篇 Anti-Patterns Code Smells Design Pattern VS 演算法 定義 The Adapter Pattern converts the interface of a class into another interface the clients expect.</description>
    </item>
    
  </channel>
</rss>
