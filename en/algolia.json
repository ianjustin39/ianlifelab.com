[{"authors":null,"categories":null,"date":1633910400,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"taxonomy","lang":"zh","lastmod":1633910400,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/tags/blockchain/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/tags/blockchain/","section":"tags","summary":"","tags":null,"title":"Blockchain","type":"tags","url":"/ianlife/tags/blockchain/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1633910400,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"section","lang":"zh","lastmod":1633910400,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/blog/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/blog/","section":"blog","summary":"","tags":null,"title":"Blog","type":"blog","url":"/ianlife/blog/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1633910400,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"taxonomyTerm","lang":"zh","lastmod":1633910400,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/categories/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/categories/","section":"categories","summary":"","tags":null,"title":"Categories","type":"categories","url":"/ianlife/categories/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1633910400,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"home","lang":"zh","lastmod":1633910400,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/","section":"","summary":"","tags":null,"title":"Life Story","type":"page","url":"/ianlife/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1633910400,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"taxonomy","lang":"zh","lastmod":1633910400,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/tags/polkadot/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/tags/polkadot/","section":"tags","summary":"","tags":null,"title":"Polkadot","type":"tags","url":"/ianlife/tags/polkadot/","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1633910400,"description":"DOT is the native token of the Polkadot network in a similar way that BTC is the native token of Bitcoin or ether is the native token of the Ethereum blockchain.","dir":"blog/technology/blockchain/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["Polkadot"],"kind":"page","lang":"zh","lastmod":1633910400,"objectID":"03f026eaab87538bdf72f9f3b1152b94","permalink":"https://ianjustin39.github.io/ianlife/blog/technology/blockchain/blockchain/polkadot/","publishdate":"2021-10-11T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/blog/technology/blockchain/blockchain/polkadot/","section":"blog","summary":"","tags":["Blockchain","Polkadot","Polkadot transaction","Polkadot payload"],"title":"Polkadot Parse","type":"區塊鏈","url":"/ianlife/blog/technology/blockchain/blockchain/polkadot/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1633910400,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"taxonomy","lang":"zh","lastmod":1633910400,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/tags/polkadot-payload/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/tags/polkadot-payload/","section":"tags","summary":"","tags":null,"title":"Polkadot payload","type":"tags","url":"/ianlife/tags/polkadot-payload/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1633910400,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"taxonomy","lang":"zh","lastmod":1633910400,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/tags/polkadot-transaction/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/tags/polkadot-transaction/","section":"tags","summary":"","tags":null,"title":"Polkadot transaction","type":"tags","url":"/ianlife/tags/polkadot-transaction/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1633910400,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"taxonomyTerm","lang":"zh","lastmod":1633910400,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/series/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/series/","section":"series","summary":"","tags":null,"title":"Series","type":"series","url":"/ianlife/series/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1633910400,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"taxonomyTerm","lang":"zh","lastmod":1633910400,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/tags/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/tags/","section":"tags","summary":"","tags":null,"title":"Tags","type":"tags","url":"/ianlife/tags/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1633910400,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"taxonomy","lang":"zh","lastmod":1633910400,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/categories/tech/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/categories/tech/","section":"categories","summary":"","tags":null,"title":"TECH","type":"categories","url":"/ianlife/categories/tech/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1633910400,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"taxonomy","lang":"zh","lastmod":1633910400,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/series/%E5%8D%80%E5%A1%8A%E9%8F%88/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/series/%E5%8D%80%E5%A1%8A%E9%8F%88/","section":"series","summary":"","tags":null,"title":"區塊鏈","type":"series","url":"/ianlife/series/%E5%8D%80%E5%A1%8A%E9%8F%88/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1627084800,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"taxonomy","lang":"zh","lastmod":1627084800,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/categories/learning/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/categories/learning/","section":"categories","summary":"","tags":null,"title":"Learning","type":"categories","url":"/ianlife/categories/learning/","weight":0,"wordcount":0},{"authors":null,"categories":["Learning"],"date":1627084800,"description":"寫一篇好文章，可以重複銷售自己的時間與價值，讓人生複利成長。","dir":"blog/learning/reading/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["讀書心得","大人的11堂寫作課"],"kind":"page","lang":"zh","lastmod":1627084800,"objectID":"bda4df616aba2e173ce18b3d18503ae1","permalink":"https://ianjustin39.github.io/ianlife/read/11-writing-lesson/","publishdate":"2021-07-24T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/read/11-writing-lesson/","section":"blog","summary":"","tags":["讀書心得"],"title":"大人的11堂寫作課 - 複利成長自身的價值","type":"讀書心得","url":"/read/11-writing-lesson","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1627084800,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"taxonomy","lang":"zh","lastmod":1627084800,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/series/%E5%BE%9E%E7%8F%BE%E5%9C%A8%E9%96%8B%E5%A7%8B%E8%AA%8D%E7%9C%9F%E8%AE%80%E6%9B%B8/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/series/%E5%BE%9E%E7%8F%BE%E5%9C%A8%E9%96%8B%E5%A7%8B%E8%AA%8D%E7%9C%9F%E8%AE%80%E6%9B%B8/","section":"series","summary":"","tags":null,"title":"從現在開始認真讀書","type":"series","url":"/ianlife/series/%E5%BE%9E%E7%8F%BE%E5%9C%A8%E9%96%8B%E5%A7%8B%E8%AA%8D%E7%9C%9F%E8%AE%80%E6%9B%B8/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1627084800,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"taxonomy","lang":"zh","lastmod":1627084800,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/tags/%E8%AE%80%E6%9B%B8%E5%BF%83%E5%BE%97/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/tags/%E8%AE%80%E6%9B%B8%E5%BF%83%E5%BE%97/","section":"tags","summary":"","tags":null,"title":"讀書心得","type":"tags","url":"/ianlife/tags/%E8%AE%80%E6%9B%B8%E5%BF%83%E5%BE%97/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1624752000,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"taxonomy","lang":"zh","lastmod":1624752000,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/tags/%E5%A5%BD%E6%9B%B8%E6%8E%A8%E8%96%A6/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/tags/%E5%A5%BD%E6%9B%B8%E6%8E%A8%E8%96%A6/","section":"tags","summary":"","tags":null,"title":"好書推薦","type":"tags","url":"/ianlife/tags/%E5%A5%BD%E6%9B%B8%E6%8E%A8%E8%96%A6/","weight":0,"wordcount":0},{"authors":null,"categories":["Learning"],"date":1624752000,"description":"說書，是將書本的知識『再傳遞』，如果有辦法有效的說書，那也代表自己可以有效的掌握了這本書。","dir":"blog/learning/reading/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["讀書心得","讀懂一本書"],"kind":"page","lang":"zh","lastmod":1624752000,"objectID":"8606ff3881830ca263917e05db6fa2ca","permalink":"https://ianjustin39.github.io/ianlife/read/understand-a-book/","publishdate":"2021-06-27T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/read/understand-a-book/","section":"blog","summary":"","tags":["讀書心得","好書推薦"],"title":"讀懂一本書 - 從讀書到說書","type":"讀書心得","url":"/read/understand-a-book","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1623801600,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"taxonomy","lang":"zh","lastmod":1623801600,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/tags/ethereum/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/tags/ethereum/","section":"tags","summary":"","tags":null,"title":"Ethereum","type":"tags","url":"/ianlife/tags/ethereum/","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1623801600,"description":"Ethereum London Hard Fork （倫敦硬分叉）所做的更新，包含了 EIP-1559、EIP-3198、EIP-3238 三個提案，其中 EIP-1559 也是這次比較備受關注的部分， EIP-1559 可能會改變以太坊的交易費用模型。","dir":"blog/technology/blockchain/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["Ethereum","Ethereum London Hard Fork","London Hard Fork"],"kind":"page","lang":"zh","lastmod":1623801600,"objectID":"907b8b6dace481cf3d5d867dd69a5a65","permalink":"https://ianjustin39.github.io/ianlife/blog/technology/blockchain/blockchain/ethereum-london-hard-fork/","publishdate":"2021-06-16T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/blog/technology/blockchain/blockchain/ethereum-london-hard-fork/","section":"blog","summary":"","tags":["Blockchain","Ethereum"],"title":"無視礦工，以太坊的倫敦硬分叉","type":"區塊鏈","url":"/ianlife/blog/technology/blockchain/blockchain/ethereum-london-hard-fork/","weight":0,"wordcount":0},{"authors":null,"categories":["Learning"],"date":1621036800,"description":"跳脫勝負、平手、僵局之外，看懂自己身處的賽局，才能選對策略、創造最大價值。","dir":"blog/learning/reading/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["讀書心得","無限賽局"],"kind":"page","lang":"zh","lastmod":1621036800,"objectID":"8369d642924fd23d3c0e0f90640c8db6","permalink":"https://ianjustin39.github.io/ianlife/read/game-the-infinite-game/","publishdate":"2021-05-15T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/read/game-the-infinite-game/","section":"blog","summary":"","tags":["讀書心得","好書推薦"],"title":"無限賽局 - 『永續』還是『取勝』？","type":"讀書心得","url":"/read/game-the-infinite-game","weight":0,"wordcount":0},{"authors":null,"categories":["Learning"],"date":1616284800,"description":"超速學習的定義為『一種獲取技能與知識的策略，兼具自主性與高強度。』","dir":"blog/learning/reading/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["讀書心得","超速學習","ultralearning"],"kind":"page","lang":"zh","lastmod":1616284800,"objectID":"39f7a184e4cbf0beaac2eca78090f86d","permalink":"https://ianjustin39.github.io/ianlife/read/ultralearning/","publishdate":"2021-03-21T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/read/ultralearning/","section":"blog","summary":"","tags":["讀書心得","好書推薦"],"title":"超速學習 - 『學習』從來不是一件輕鬆的事","type":"讀書心得","url":"/read/ultralearning","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1615939200,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"taxonomy","lang":"zh","lastmod":1615939200,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/tags/algorithm/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/tags/algorithm/","section":"tags","summary":"","tags":null,"title":"Algorithm","type":"tags","url":"/ianlife/tags/algorithm/","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1615939200,"description":"快速排序使用分治法（Divide and conquer）策略，藉由一個基準值來把一個序列（list）分為較小（左）和較大（右）的 2 個子序列，然後遞迴地排序兩個子序列。","dir":"blog/technology/data_structures_and_algorithms/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["演算法","Algorithm","Quick Sort","快速排序法"],"kind":"page","lang":"zh","lastmod":1615939200,"objectID":"42206d43bf586b7e0f16a050be283ecb","permalink":"https://ianjustin39.github.io/ianlife/algorithms/quick-sort/","publishdate":"2021-03-17T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/algorithms/quick-sort/","section":"blog","summary":"","tags":["Algorithm"],"title":"快速排序 - Quick Sort","type":"Data Structures and Algorithms","url":"algorithms/quick-sort","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1615939200,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"taxonomy","lang":"zh","lastmod":1615939200,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/series/%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B%E8%88%87%E6%BC%94%E7%AE%97%E6%B3%95/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/series/%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B%E8%88%87%E6%BC%94%E7%AE%97%E6%B3%95/","section":"series","summary":"","tags":null,"title":"資料結構與演算法","type":"series","url":"/ianlife/series/%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B%E8%88%87%E6%BC%94%E7%AE%97%E6%B3%95/","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1615852800,"description":"合併排序法屬於分治法（Divide and Conquer）演算法，先把大問題拆解成小問題，解決小問題後再將小問題合併，進而解決大問題。","dir":"blog/technology/data_structures_and_algorithms/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["演算法","Algorithm","Data Structures","Merge Sort","合併排序"],"kind":"page","lang":"zh","lastmod":1615852800,"objectID":"4f0d7f7d079e0a0843d53a726c3ad318","permalink":"https://ianjustin39.github.io/ianlife/algorithms/merge-sort/","publishdate":"2021-03-16T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/algorithms/merge-sort/","section":"blog","summary":"","tags":["Algorithm"],"title":"合併排序 - Merge Sort","type":"Data Structures and Algorithms","url":"algorithms/merge-sort","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1615766400,"description":"泡沫排序是一種穩定排序演算法，不斷重複比較兩個元素，如果要最小的開頭，若前一個元素小於現在這個元素，則兩個元素位置互換，反之亦然，直到所有元素都是由小到大排序才結束。而也因為這種『小元素經由交換慢慢浮至集合頂端』，故稱作泡沫排序","dir":"blog/technology/data_structures_and_algorithms/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["演算法","Algorithm","Data Structures","Bubble Sort","泡沫排序"],"kind":"page","lang":"zh","lastmod":1615766400,"objectID":"3965d9eadb869d54154c96cad143d464","permalink":"https://ianjustin39.github.io/ianlife/algorithms/bubble-sort/","publishdate":"2021-03-15T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/algorithms/bubble-sort/","section":"blog","summary":"","tags":["Algorithm"],"title":"泡沫排序 - Bubble Sort","type":"Data Structures and Algorithms","url":"algorithms/bubble-sort","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1615680000,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"taxonomy","lang":"zh","lastmod":1615680000,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/categories/life/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/categories/life/","section":"categories","summary":"","tags":null,"title":"LIFE","type":"categories","url":"/ianlife/categories/life/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1615680000,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"taxonomy","lang":"zh","lastmod":1615680000,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/series/%E7%9C%8B%E9%9B%BB%E5%BD%B1%E7%9A%84%E7%9C%81%E6%80%9D/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/series/%E7%9C%8B%E9%9B%BB%E5%BD%B1%E7%9A%84%E7%9C%81%E6%80%9D/","section":"series","summary":"","tags":null,"title":"看電影的省思","type":"series","url":"/ianlife/series/%E7%9C%8B%E9%9B%BB%E5%BD%B1%E7%9A%84%E7%9C%81%E6%80%9D/","weight":0,"wordcount":0},{"authors":null,"categories":["LIFE"],"date":1615680000,"description":"不管這個世界怎麼看你，你都要相信你自己。","dir":"blog/life/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["複身犯","plurality"],"kind":"page","lang":"zh","lastmod":1615680000,"objectID":"03c5754c533bf7b3f70140010cdc8b3c","permalink":"https://ianjustin39.github.io/ianlife/movie/plurality/","publishdate":"2021-03-14T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/movie/plurality/","section":"blog","summary":"","tags":["電影心得"],"title":"複身犯 - 寫出你的名字，你是誰？","type":"電影心得","url":"movie/plurality","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1615680000,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"taxonomy","lang":"zh","lastmod":1615680000,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/tags/%E9%9B%BB%E5%BD%B1%E5%BF%83%E5%BE%97/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/tags/%E9%9B%BB%E5%BD%B1%E5%BF%83%E5%BE%97/","section":"tags","summary":"","tags":null,"title":"電影心得","type":"tags","url":"/ianlife/tags/%E9%9B%BB%E5%BD%B1%E5%BF%83%E5%BE%97/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1615593600,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"taxonomy","lang":"zh","lastmod":1615593600,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/tags/algolia/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/tags/algolia/","section":"tags","summary":"","tags":null,"title":"Algolia","type":"tags","url":"/ianlife/tags/algolia/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1615593600,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"taxonomy","lang":"zh","lastmod":1615593600,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/tags/blog/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/tags/blog/","section":"tags","summary":"","tags":null,"title":"blog","type":"tags","url":"/ianlife/tags/blog/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1615593600,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"taxonomy","lang":"zh","lastmod":1615593600,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/tags/hugo/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/tags/hugo/","section":"tags","summary":"","tags":null,"title":"hugo","type":"tags","url":"/ianlife/tags/hugo/","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1615593600,"description":"Algolia 是為你在APP或網站提供搜索功能的最佳方式之一，在 Hugo 中加入 Algolia，讓你更方便尋找以前的文章。","dir":"blog/technology/build_blog/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"page","lang":"zh","lastmod":1615593600,"objectID":"487bf2884c87079d0a7c7184147429f6","permalink":"https://ianjustin39.github.io/ianlife/build-blog/hugo-and-algolia/","publishdate":"2021-03-13T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/build-blog/hugo-and-algolia/","section":"blog","summary":"","tags":["Blog","Hugo","Algolia"],"title":"在 Hugo Blog 中加上 Algolia 文章搜索工具","type":"Build My Blog","url":"/build-blog/hugo-and-algolia","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1615593600,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"taxonomy","lang":"zh","lastmod":1615593600,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/series/%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%B7%B1%E7%9A%84-blog/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/series/%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%B7%B1%E7%9A%84-blog/","section":"series","summary":"","tags":null,"title":"建立自己的 Blog","type":"series","url":"/ianlife/series/%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%B7%B1%E7%9A%84-blog/","weight":0,"wordcount":0},{"authors":null,"categories":["LIFE"],"date":1615507200,"description":"寧靜的下午坐在咖啡廳、喝著咖啡、看著書，思考這『這杯咖啡的價值』是什麼。","dir":"blog/life/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["咖啡","時間","coffee","time"],"kind":"page","lang":"zh","lastmod":1615507200,"objectID":"99c371cfb85415aee26baaaaa3512570","permalink":"https://ianjustin39.github.io/ianlife/life/a-cup-of-coffee/","publishdate":"2021-03-12T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/life/a-cup-of-coffee/","section":"blog","summary":"","tags":["隨手寫"],"title":"咖啡的價值 - 是買咖啡還是買時間？","type":"隨手寫","url":"life/a-cup-of-coffee","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1615507200,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"taxonomy","lang":"zh","lastmod":1615507200,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/series/%E9%9A%A8%E6%89%8B%E5%AF%AB/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/series/%E9%9A%A8%E6%89%8B%E5%AF%AB/","section":"series","summary":"","tags":null,"title":"隨手寫","type":"series","url":"/ianlife/series/%E9%9A%A8%E6%89%8B%E5%AF%AB/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1615507200,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"taxonomy","lang":"zh","lastmod":1615507200,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/tags/%E9%9A%A8%E6%89%8B%E5%AF%AB/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/tags/%E9%9A%A8%E6%89%8B%E5%AF%AB/","section":"tags","summary":"","tags":null,"title":"隨手寫","type":"tags","url":"/ianlife/tags/%E9%9A%A8%E6%89%8B%E5%AF%AB/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1615248000,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"taxonomy","lang":"zh","lastmod":1615248000,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/tags/data-structures/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/tags/data-structures/","section":"tags","summary":"","tags":null,"title":"Data Structures","type":"tags","url":"/ianlife/tags/data-structures/","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1615248000,"description":"在電腦科學中，trie，又稱字首樹或字典樹，是一種有序樹，用於儲存關聯陣列，其中的鍵通常是字串。","dir":"blog/technology/data_structures_and_algorithms/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["演算法","資料結構","Data Structures","Algorithm","Trie","字首樹","字典樹"],"kind":"page","lang":"zh","lastmod":1615248000,"objectID":"966c45bb0d352be34385b13bbe054e39","permalink":"https://ianjustin39.github.io/ianlife/algorithms/tries/","publishdate":"2021-03-09T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/algorithms/tries/","section":"blog","summary":"","tags":["Algorithm","Data Structures"],"title":"字典樹 - Trie","type":"Data Structures and Algorithms","url":"algorithms/tries","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1615075200,"description":"","dir":"blog/technology/data_structures_and_algorithms/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["演算法","Algorithm","Binary search","資料結構","Data Structures","二分搜尋"],"kind":"page","lang":"zh","lastmod":1615075200,"objectID":"8f9a5ac419e7d8d884844dffeaddfcbf","permalink":"https://ianjustin39.github.io/ianlife/algorithms/binary-search/","publishdate":"2021-03-07T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/algorithms/binary-search/","section":"blog","summary":"","tags":["Algorithm","Data Structures"],"title":"二分搜尋演算法 (Binary search algorithm) - 終極密碼","type":"Data Structures and Algorithms","url":"algorithms/binary-search","weight":0,"wordcount":0},{"authors":null,"categories":["Learning"],"date":1613865600,"description":"40歲是『夾心世代』。為了過得更好，留下對自己真正必要的東西。","dir":"blog/learning/reading/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["為了遇見40歲更好的自己","讀書心得"],"kind":"page","lang":"zh","lastmod":1613865600,"objectID":"f59d99e846f350111dfdfafb56b1e65e","permalink":"https://ianjustin39.github.io/ianlife/read/40-years-old/","publishdate":"2021-02-21T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/read/40-years-old/","section":"blog","summary":"","tags":["讀書心得"],"title":"為了遇見40歲更好的自己","type":"讀書心得","url":"/read/40-years-old","weight":0,"wordcount":0},{"authors":null,"categories":["Learning"],"date":1611360000,"description":"在華氏 25 度的房間內有著一塊冰塊，隨著房間溫度緩慢的增加，26、27、28 。冰塊依然在，29、30、31 直到 32 （攝氏零度）度時，冰塊開始融化。如同習慣一樣，一開始可能沒有太大的差異，但從某一刻開始就會起到巨大的變化。","dir":"blog/learning/reading/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["原子習慣","讀書心得","atom habits"],"kind":"page","lang":"zh","lastmod":1611360000,"objectID":"728c7b9b2b8626a049a66710b176ddea","permalink":"https://ianjustin39.github.io/ianlife/read/atom-habits/","publishdate":"2021-01-23T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/read/atom-habits/","section":"blog","summary":"","tags":["讀書心得","好書推薦"],"title":"原子習慣 - 細微改變帶來巨大成就","type":"讀書心得","url":"/read/atom-habits","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1605571200,"description":"","dir":"photograph/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"page","lang":"zh","lastmod":1605571200,"objectID":"fc42ee396fdfdf07c1c83e1212873557","permalink":"https://ianjustin39.github.io/ianlife/photograph/20201117-jiaminglake/","publishdate":"2020-11-17T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/photograph/20201117-jiaminglake/","section":"photograph","summary":"","tags":null,"title":"嘉明湖","type":"photograph","url":"/ianlife/photograph/20201117-jiaminglake/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1601942400,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"taxonomy","lang":"zh","lastmod":1601942400,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/tags/behavioural-pattern/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/tags/behavioural-pattern/","section":"tags","summary":"","tags":null,"title":"Behavioural Pattern","type":"tags","url":"/ianlife/tags/behavioural-pattern/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1601942400,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"taxonomy","lang":"zh","lastmod":1601942400,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/tags/design-pattern/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/tags/design-pattern/","section":"tags","summary":"","tags":null,"title":"Design Pattern","type":"tags","url":"/ianlife/tags/design-pattern/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1601942400,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"taxonomy","lang":"zh","lastmod":1601942400,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/series/%E5%BE%9E%E7%94%9F%E6%B4%BB%E4%B8%AD%E8%AA%8D%E8%AD%98-design-pattern/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/series/%E5%BE%9E%E7%94%9F%E6%B4%BB%E4%B8%AD%E8%AA%8D%E8%AD%98-design-pattern/","section":"series","summary":"","tags":null,"title":"從生活中認識 Design Pattern","type":"series","url":"/ianlife/series/%E5%BE%9E%E7%94%9F%E6%B4%BB%E4%B8%AD%E8%AA%8D%E8%AD%98-design-pattern/","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1601942400,"description":"定義一系列演算法，並將其封裝起來，使他們可以相互替換，演算法的變換不影響使用。","dir":"blog/technology/design_pattern/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["Design Pattern","Behavioural Pattern","Strategy Pattern","策略模式"],"kind":"page","lang":"zh","lastmod":1601942400,"objectID":"0f7866f4b9b889b58c79dfd956dbe5c1","permalink":"https://ianjustin39.github.io/ianlife/design-pattern/strategy-pattern/","publishdate":"2020-10-06T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/design-pattern/strategy-pattern/","section":"blog","summary":"","tags":["Design Pattern","Behavioural Pattern"],"title":"策略模式 | Strategy Pattern","type":"2020 鐵人賽 | Design Pattern","url":"/design-pattern/strategy-pattern","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1601856000,"description":"多個物件之間存在著一對多的依賴關係，當一個物件發生改變時，所有跟他有關的物件都會被通知且更新。例如：訂閱youtuber，發布新影片就會接收到通知即觀察者模式。","dir":"blog/technology/design_pattern/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["Design Pattern","Behavioural Pattern","Observer Pattern","觀察者模式"],"kind":"page","lang":"zh","lastmod":1601856000,"objectID":"0fd220d9ec5662798c06ffdf874c9402","permalink":"https://ianjustin39.github.io/ianlife/design-pattern/observer-pattern/","publishdate":"2020-10-05T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/design-pattern/observer-pattern/","section":"blog","summary":"","tags":["Design Pattern","Behavioural Pattern"],"title":"觀察者模式 | Observer Pattern","type":"2020 鐵人賽 | Design Pattern","url":"/design-pattern/observer-pattern","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1601769600,"description":"備忘錄模式在不破壞封裝的前提下，儲存一個物件的某個狀態，以便於需要的時候將物件恢復到原先儲存的狀態。例如：後悔藥。","dir":"blog/technology/design_pattern/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["Design Pattern","Behavioural Pattern","Memento Pattern","備忘錄模式"],"kind":"page","lang":"zh","lastmod":1601769600,"objectID":"835bfcba3865a6c2408d08001c1fc8ff","permalink":"https://ianjustin39.github.io/ianlife/design-pattern/memento-pattern/","publishdate":"2020-10-04T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/design-pattern/memento-pattern/","section":"blog","summary":"","tags":["Design Pattern","Behavioural Pattern"],"title":"備忘錄模式 | Memento Pattern","type":"2020 鐵人賽 | Design Pattern","url":"/design-pattern/memento-pattern","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1601683200,"description":"有狀態的物件，把複雜的邏輯判斷分配到不同的狀態物件中，允許狀態物件在其內部狀態發生改變時改變行為。","dir":"blog/technology/design_pattern/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["Design Pattern","Behavioural Pattern","State Pattern","狀態模式"],"kind":"page","lang":"zh","lastmod":1601683200,"objectID":"42f59d1ae5de1185a240bbd3614e6e3f","permalink":"https://ianjustin39.github.io/ianlife/design-pattern/state-pattern/","publishdate":"2020-10-03T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/design-pattern/state-pattern/","section":"blog","summary":"","tags":["Design Pattern","Behavioural Pattern"],"title":"狀態模式 | State Pattern","type":"2020 鐵人賽 | Design Pattern","url":"/design-pattern/state-pattern","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1601596800,"description":"定義一個 Mediator 物件用來封裝一組物件的互動方式。Mediator 藉由避免物件間相互直接的引用，從而降低它們之間的耦合程度，並且可以讓我們獨立地改變這些物件間的互動方式。","dir":"blog/technology/design_pattern/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["Design Pattern","Behavioural Pattern","Mediator Pattern","中介者模式"],"kind":"page","lang":"zh","lastmod":1601596800,"objectID":"b930d4a1aee037cd1fca0862a45364a7","permalink":"https://ianjustin39.github.io/ianlife/design-pattern/mediator-pattern/","publishdate":"2020-10-02T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/design-pattern/mediator-pattern/","section":"blog","summary":"","tags":["Design Pattern","Behavioural Pattern"],"title":"中介者模式 | Mediator Pattern","type":"2020 鐵人賽 | Design Pattern","url":"/design-pattern/mediator-pattern","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1601510400,"description":"迭代氣模式提供一種方法可以順序性讀取一個集合物件中的各個元素，而又不會暴露該物件的內部表示。如 Java 中的 Collection、List、Set、Map 等都包含了迭代器。","dir":"blog/technology/design_pattern/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["Design Pattern","Behavioural Pattern","Iterator Pattern","迭代器模式"],"kind":"page","lang":"zh","lastmod":1601510400,"objectID":"72e9c85a46a3874975291320408e073b","permalink":"https://ianjustin39.github.io/ianlife/design-pattern/iterator-pattern/","publishdate":"2020-10-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/design-pattern/iterator-pattern/","section":"blog","summary":"","tags":["Design Pattern","Behavioural Pattern"],"title":"迭代器模式 | Iterator Pattern","type":"2020 鐵人賽 | Design Pattern","url":"/design-pattern/iterator-pattern","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1601424000,"description":"命令模式將一個請求封裝成一個物件，讓你可用不同的請求對客戶進行參數化、對請求排隊或記錄請求日誌，以及支援可取消的操作。","dir":"blog/technology/design_pattern/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["Design Pattern","Behavioural Pattern","Command Pattern","命令模式"],"kind":"page","lang":"zh","lastmod":1601424000,"objectID":"a0561040390f99c62d35649b4b38efc9","permalink":"https://ianjustin39.github.io/ianlife/design-pattern/command-pattern/","publishdate":"2020-09-30T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/design-pattern/command-pattern/","section":"blog","summary":"","tags":["Design Pattern","Behavioural Pattern"],"title":"命令模式 | Command Pattern","type":"2020 鐵人賽 | Design Pattern","url":"/design-pattern/command-pattern","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1601337600,"description":"責任鏈模式就是將多個物件連成一條鏈，沿著這條鏈傳遞至每一個物件並處理請求，當這個物件沒有處理的權限時，能夠將這個請求，傳遞給下一個物件繼續處理。","dir":"blog/technology/design_pattern/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["Design Pattern","Behavioural Pattern","Chain of Responsibility Pattern","責任鏈模式"],"kind":"page","lang":"zh","lastmod":1601337600,"objectID":"0aeb6eb2855104f9855f139a4b397eca","permalink":"https://ianjustin39.github.io/ianlife/design-pattern/chain-of-responsibility/","publishdate":"2020-09-29T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/design-pattern/chain-of-responsibility/","section":"blog","summary":"","tags":["Design Pattern","Behavioural Pattern"],"title":"責任鏈模式 | Chain of Responsibility Pattern","type":"2020 鐵人賽 | Design Pattern","url":"/design-pattern/chain-of-responsibility","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1601251200,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"taxonomy","lang":"zh","lastmod":1601251200,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/tags/structural-pattern/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/tags/structural-pattern/","section":"tags","summary":"","tags":null,"title":"Structural Pattern","type":"tags","url":"/ianlife/tags/structural-pattern/","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1601251200,"description":"代理模式目的爲其他物件提供一種代理以控制對這個物件的訪問。應用可以為遠端代理、虛擬代理、保護代理、智慧代理等等。","dir":"blog/technology/design_pattern/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["Design Pattern","Structural Pattern","Proxy Pattern","代理模式"],"kind":"page","lang":"zh","lastmod":1601251200,"objectID":"8b7975c4f22e370b75f9d68166d2f53b","permalink":"https://ianjustin39.github.io/ianlife/design-pattern/proxy-pattern/","publishdate":"2020-09-28T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/design-pattern/proxy-pattern/","section":"blog","summary":"","tags":["Design Pattern","Structural Pattern"],"title":"代理模式 | Proxy Pattern","type":"2020 鐵人賽 | Design Pattern","url":"/design-pattern/proxy-pattern","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1601164800,"description":"享元模式是運用共享技術有效地支持大量細粒度的物件。他可以避免大量相似類的開銷，在軟體開發中如果需要生成大量細粒度的類別實體來表示數據，如果這些實體除了幾個參數外基本上都是相同的，這時候就可以使用享元模式來大幅度減少需要實體化類的數量。","dir":"blog/technology/design_pattern/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["Design Pattern","Structural Pattern","Flyweight Pattern","享元模式"],"kind":"page","lang":"zh","lastmod":1601164800,"objectID":"960b3df457548f124187f9ce86986a4b","permalink":"https://ianjustin39.github.io/ianlife/design-pattern/flyweight-pattern/","publishdate":"2020-09-27T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/design-pattern/flyweight-pattern/","section":"blog","summary":"","tags":["Design Pattern","Structural Pattern"],"title":"享元模式 | Flyweight Pattern","type":"2020 鐵人賽 | Design Pattern","url":"/design-pattern/flyweight-pattern","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1601078400,"description":"外觀模式為子系統中的一組接口提供一個統一的高層接口，使得子系統更容易使用。比方說，當要找銀行貸款時，我們只需要找專員，而專員把我們的資料拿到後，要回銀行各部門跑流程，最後才能核貸給我們。行員就是接口，銀行各部門就是子系統。","dir":"blog/technology/design_pattern/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["Design Pattern","Structural Pattern","Facade Pattern","外觀模式"],"kind":"page","lang":"zh","lastmod":1601078400,"objectID":"55e3a55aa00c3d6e5578a57e9814f9ce","permalink":"https://ianjustin39.github.io/ianlife/design-pattern/facede-pattern/","publishdate":"2020-09-26T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/design-pattern/facede-pattern/","section":"blog","summary":"","tags":["Design Pattern","Structural Pattern"],"title":"外觀模式 | Facade Pattern","type":"2020 鐵人賽 | Design Pattern","url":"/design-pattern/facede-pattern","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1600992000,"description":"裝飾者模式可以想成買了一間房子不需要因為要裝潢，而改變整體結構。只需要在既有的結構上，加上要裝潢的材料即可。即動態將責任附加在物件上，若要擴展功能上，裝飾者提供比繼承更有彈性的替代方案。","dir":"blog/technology/design_pattern/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["Design Pattern","Structural Pattern","Decorator Pattern","裝飾者模式"],"kind":"page","lang":"zh","lastmod":1600992000,"objectID":"a77c9a7d38e7cb020faa4850403350c7","permalink":"https://ianjustin39.github.io/ianlife/design-pattern/decorator-pattern/","publishdate":"2020-09-25T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/design-pattern/decorator-pattern/","section":"blog","summary":"","tags":["Design Pattern","Structural Pattern"],"title":"裝飾者模式 | Decorator Pattern","type":"2020 鐵人賽 | Design Pattern","url":"/design-pattern/decorator-pattern","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1600905600,"description":"組合模式就是將元件做分離，依照需求一一組裝起來，建立不同需求的物件。","dir":"blog/technology/design_pattern/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["Design Pattern","Structural Pattern","Composite Pattern","组合模式"],"kind":"page","lang":"zh","lastmod":1600905600,"objectID":"f33943d35f4381a387979b1c3abc43fa","permalink":"https://ianjustin39.github.io/ianlife/design-pattern/composite-pattern/","publishdate":"2020-09-24T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/design-pattern/composite-pattern/","section":"blog","summary":"","tags":["Design Pattern","Structural Pattern","鐵人賽"],"title":"组合模式 | Composite Pattern","type":"2020 鐵人賽 | Design Pattern","url":"/design-pattern/composite-pattern","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1600905600,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"taxonomy","lang":"zh","lastmod":1600905600,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/","section":"tags","summary":"","tags":null,"title":"鐵人賽","type":"tags","url":"/ianlife/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1600819200,"description":"橋接模式是將抽象部分與實現部分分離，使它們都可以獨立的變化。即用合成關係代替繼承關係。如同合成/聚合複用原則。","dir":"blog/technology/design_pattern/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["Design Pattern","Structural Pattern","Bridge Pattern","橋接模式"],"kind":"page","lang":"zh","lastmod":1600819200,"objectID":"23f04ea8783d2b5d61cdb127df184aae","permalink":"https://ianjustin39.github.io/ianlife/design-pattern/bridge-pattern/","publishdate":"2020-09-23T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/design-pattern/bridge-pattern/","section":"blog","summary":"","tags":["Design Pattern","Structural Pattern","鐵人賽"],"title":"橋接模式 | Bridge Pattern","type":"2020 鐵人賽 | Design Pattern","url":"/design-pattern/bridge-pattern","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1600732800,"description":"適配器模式如同出國玩時，一定會有使用電器的需求。但每個國家的插座及電壓都不一樣，這時就會拿出事先準備好的轉接頭，藉由轉接頭將插座與電器插頭做連接。適配器模式的目的在於將一個類別的介面轉換成客戶希望的另外一個介面，Adapter使得原本由於介面相容而不能一起工作的那些類別可以一起工作。","dir":"blog/technology/design_pattern/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["Design Pattern","Structural Pattern","Adapter Pattern","適配器模式","接配器模式"],"kind":"page","lang":"zh","lastmod":1600732800,"objectID":"5e8185d6a99d2fdcc754293da146869d","permalink":"https://ianjustin39.github.io/ianlife/design-pattern/adapter-pattern/","publishdate":"2020-09-22T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/design-pattern/adapter-pattern/","section":"blog","summary":"","tags":["Design Pattern","Structural Pattern","鐵人賽"],"title":"適配器模式 | Adapter Pattern","type":"2020 鐵人賽 | Design Pattern","url":"/design-pattern/adapter-pattern","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1600646400,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"taxonomy","lang":"zh","lastmod":1600646400,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/tags/creational-pattern/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/tags/creational-pattern/","section":"tags","summary":"","tags":null,"title":"Creational Pattern","type":"tags","url":"/ianlife/tags/creational-pattern/","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1600646400,"description":"建立原型物件，透過複製的方式建立大量物件，而非傳統的建立方式。這為原型模式主張的目標，不但能提升效能，也隱藏了創建新物件的復雜性。","dir":"blog/technology/design_pattern/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["Design Pattern","Creational Pattern","Prototype Pattern","原型模式"],"kind":"page","lang":"zh","lastmod":1600646400,"objectID":"2424a9255953331f9049e13467b007d2","permalink":"https://ianjustin39.github.io/ianlife/design-pattern/prototype-pattern/","publishdate":"2020-09-21T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/design-pattern/prototype-pattern/","section":"blog","summary":"","tags":["Design Pattern","Creational Pattern","鐵人賽"],"title":"原型模式 | Prototype Pattern","type":"2020 鐵人賽 | Design Pattern","url":"/design-pattern/prototype-pattern","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1600560000,"description":"生成器模式就是將元件做分離，依照需求一一組裝起來，建立不同需求的物件。如同不同的人組一台電腦需要各種不同的零件一樣。","dir":"blog/technology/design_pattern/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["Design Pattern","Creational Pattern","Builder Pattern","生成器模式"],"kind":"page","lang":"zh","lastmod":1600560000,"objectID":"4ac5f31498e8ce0fef67005fa7eea270","permalink":"https://ianjustin39.github.io/ianlife/design-pattern/builder-pattern/","publishdate":"2020-09-20T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/design-pattern/builder-pattern/","section":"blog","summary":"","tags":["Design Pattern","Creational Pattern","鐵人賽"],"title":"生成器模式 | Builder Pattern","type":"2020 鐵人賽 | Design Pattern","url":"/design-pattern/builder-pattern","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1600473600,"description":"抽象工廠主要是由繼承來的次類別來決定要產生哪種實體產品，其主要目的是將客戶從實體型態中鬆綁。","dir":"blog/technology/design_pattern/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["Design Pattern","Creational Pattern","Abstract Factory Method","抽象工廠模式"],"kind":"page","lang":"zh","lastmod":1600473600,"objectID":"4a4ee77777cd4b7f4ff205cbb807e504","permalink":"https://ianjustin39.github.io/ianlife/design-pattern/abstract-factory-pattern/","publishdate":"2020-09-19T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/design-pattern/abstract-factory-pattern/","section":"blog","summary":"","tags":["Design Pattern","Creational Pattern","鐵人賽"],"title":"抽象工廠模式 | Abstract Factory Pattern","type":"2020 鐵人賽 | Design Pattern","url":"/design-pattern/abstract-factory-pattern","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1600387200,"description":"簡單工廠模式：藉由定義一個class來負責建立其他class的instance，被建立的instance通常都具有共同的super class；工廠方法模式：定義了一個建立物件的insterface，由子類別決定實體化的類別為何者。而兩者之間的差異在...","dir":"blog/technology/design_pattern/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["Design Pattern","Creational Pattern","Factory Method","Sample Factory","工廠模式","工廠方法模式","簡單工廠模式"],"kind":"page","lang":"zh","lastmod":1600387200,"objectID":"7a09007a457514f569ec993efb1abe3c","permalink":"https://ianjustin39.github.io/ianlife/design-pattern/factory-pattern/","publishdate":"2020-09-18T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/design-pattern/factory-pattern/","section":"blog","summary":"","tags":["Design Pattern","Creational Pattern","鐵人賽"],"title":"工廠模式 | Factory Pattern","type":"2020 鐵人賽 | Design Pattern","url":"/design-pattern/factory-pattern","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1600300800,"description":"Singleton = one instance ONLY。單例模式希望執行一個且唯一一個Singleton物件且Singleton物件可以全局使用。","dir":"blog/technology/design_pattern/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["Design Pattern","Creational Pattern","Singleton Pattern","單例模式"],"kind":"page","lang":"zh","lastmod":1600300800,"objectID":"850f31bee8cfb4ef508a6e487ae2d916","permalink":"https://ianjustin39.github.io/ianlife/design-pattern/singleton-pattern/","publishdate":"2020-09-17T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/design-pattern/singleton-pattern/","section":"blog","summary":"","tags":["Design Pattern","Creational Pattern","鐵人賽"],"title":"單例模式 | Singleton Pattern","type":"2020 鐵人賽 | Design Pattern","url":"/design-pattern/singleton-pattern","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1600214400,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"taxonomy","lang":"zh","lastmod":1600214400,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/tags/design-principle/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/tags/design-principle/","section":"tags","summary":"","tags":null,"title":"Design Principle","type":"tags","url":"/ianlife/tags/design-principle/","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1600214400,"description":"迪米特法則，又稱最少知識原則。其定義為各單元對其他單元所知應當有限：只瞭解與目前單元最相關之單元。意思就是，只跟你熟的朋友聊天，不要跟陌生人講話。","dir":"blog/technology/design_pattern/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["Design Pattern","Design Principle","Law of Demeter","LoD","Least Knowledge Principle","LKP","迪米特法則","最少知識原則"],"kind":"page","lang":"zh","lastmod":1600214400,"objectID":"e4df6d18cf0a5043f9a51dad36045fc2","permalink":"https://ianjustin39.github.io/ianlife/design-pattern/law-of-demeter/","publishdate":"2020-09-16T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/design-pattern/law-of-demeter/","section":"blog","summary":"","tags":["Design Pattern","Design Principle","鐵人賽"],"title":"迪米特法則 | Law of Demeter","type":"2020 鐵人賽 | Design Pattern","url":"/design-pattern/law-of-demeter","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1600128000,"description":"合成/聚合複用原則的在於當要重複使用套件時，應該先考慮使用組合/聚合的方式，其次才是繼承。而如果要使用繼承的話，則須符合里氏替換原則(LSP)。在這之前，要先了解什麼是合成？什麼是聚合？他們又與繼承差在哪？","dir":"blog/technology/design_pattern/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["Design Pattern","Design Principle","合成複用原則","組合/聚合複用原則","CRP","CARP","Composite/Aggregate Reuse Principle","Composite Reuse Principle"],"kind":"page","lang":"zh","lastmod":1600128000,"objectID":"0d74badd154313dd7b0343caba9ee7c4","permalink":"https://ianjustin39.github.io/ianlife/design-pattern/composite-aggregate-reuse-principle/","publishdate":"2020-09-15T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/design-pattern/composite-aggregate-reuse-principle/","section":"blog","summary":"","tags":["Design Pattern","Design Principle","鐵人賽"],"title":"合成/聚合複用原則 | Composite/Aggregate Reuse Principle","type":"2020 鐵人賽 | Design Pattern","url":"/design-pattern/composite-aggregate-reuse-principle","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1600041600,"description":"高層模組不應該依賴低層模組，是兩者都應該依賴抽象；而抽相不應該依賴細節，應該是細節應該依賴於抽象，這是依賴反轉原則的目的。他不但可以減低類別間的耦合，也提高了系統的可讀性及可維護性。","dir":"blog/technology/design_pattern/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["Design Pattern","Design Principle","Dependency Inversion Principle","DIP","依賴反轉原則"],"kind":"page","lang":"zh","lastmod":1600041600,"objectID":"b8201c805a87ef7c2d522bf6e265dafc","permalink":"https://ianjustin39.github.io/ianlife/design-pattern/dependence-inversion-principle/","publishdate":"2020-09-14T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/design-pattern/dependence-inversion-principle/","section":"blog","summary":"","tags":["Design Pattern","Design Principle","鐵人賽"],"title":"依賴反轉原則 | Dependency Inversion Principle","type":"2020 鐵人賽 | Design Pattern","url":"/design-pattern/dependence-inversion-principle","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1599955200,"description":"介面隔離原則目的在於客戶不應該被強迫依賴他們不使用的方法。如同一個公司有一般工程師及資深工程師。資深工程師可能還要囊括一些報告的工作，但一般工程師不用，這時工程師的技能分類就很重要了。","dir":"blog/technology/design_pattern/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["Design Pattern","Design Principle","Interface Segregation Principle","ISP","介面隔離原則"],"kind":"page","lang":"zh","lastmod":1599955200,"objectID":"a374670262b57aeb2538635ac9db5a68","permalink":"https://ianjustin39.github.io/ianlife/design-pattern/interface-segregation-principle/","publishdate":"2020-09-13T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/design-pattern/interface-segregation-principle/","section":"blog","summary":"","tags":["Design Pattern","Design Principle","鐵人賽"],"title":"介面隔離原則 | Interface Segregation Principle","type":"2020 鐵人賽 | Design Pattern","url":"/design-pattern/interface-segregation-principle","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1599868800,"description":"里氏替換原則主要在於子類別可以擴充套件父類別的功能，但不改變父類別原有的功能。就像老鷹跟企鵝都是鳥，老鷹會飛但企鵝不會。但企鵝不能去更改鳥類內的方法，只好經由其他設計達成目的。","dir":"blog/technology/design_pattern/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["Design Pattern","Design Principle","Liskov Substitution Principle","LSP","里氏替換原則"],"kind":"page","lang":"zh","lastmod":1599868800,"objectID":"cdb1958fc822d00749b856bcbea5e801","permalink":"https://ianjustin39.github.io/ianlife/design-pattern/liskov-substitution-principle/","publishdate":"2020-09-12T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/design-pattern/liskov-substitution-principle/","section":"blog","summary":"","tags":["Design Pattern","Design Principle","鐵人賽"],"title":"里氏替換原則 | Liskov Substitution Principle","type":"2020 鐵人賽 | Design Pattern","url":"/design-pattern/liskov-substitution-principle","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1599782400,"description":"擴充系統時，應該由新增程式碼代替修改程式碼。如同電鑽，可以換各種不同的鑽頭，而電鑽本身並不需要被改造，就符合開閉原則。","dir":"blog/technology/design_pattern/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["Design Pattern","Design Principle","Open/Closed Principle","OCP","開閉原則"],"kind":"page","lang":"zh","lastmod":1599782400,"objectID":"baa34f00ef96fe76d2949e2dbd68c040","permalink":"https://ianjustin39.github.io/ianlife/design-pattern/open-closed-principle/","publishdate":"2020-09-11T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/design-pattern/open-closed-principle/","section":"blog","summary":"","tags":["Design Pattern","Design Principle","鐵人賽"],"title":"開閉原則 | Open/Closed Principle","type":"2020 鐵人賽 | Design Pattern","url":"/design-pattern/open-closed-principle","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1599696000,"description":"一個類別只能有一個改變的原因。你做你該做的事，我做我該做的事。你我互不干擾，這就是單一職責原則。","dir":"blog/technology/design_pattern/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["Design Pattern","Design Principle","Single Responsibility Principle","SRP","單一職責原則"],"kind":"page","lang":"zh","lastmod":1599696000,"objectID":"8f0c2397eff2ae923b68595675a999c8","permalink":"https://ianjustin39.github.io/ianlife/design-pattern/single-responsibility-principle/","publishdate":"2020-09-10T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/design-pattern/single-responsibility-principle/","section":"blog","summary":"","tags":["Design Pattern","Design Principle","鐵人賽"],"title":"單一職責原則 | Single Responsibility Principle","type":"2020 鐵人賽 | Design Pattern","url":"/design-pattern/single-responsibility-principle","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1599609600,"description":"使用Design Pattern要先了解他的原則及分類，才能在實作中找到匹配的Pattern。","dir":"blog/technology/design_pattern/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["Design Pattern","Design Principle","設計模式","五大基本原則","六大基本原則","七大基本原則"],"kind":"page","lang":"zh","lastmod":1599609600,"objectID":"99b3a8eaa1da2877171dbb1b73f36644","permalink":"https://ianjustin39.github.io/ianlife/design-pattern/design-patterns-and-principle/","publishdate":"2020-09-09T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/design-pattern/design-patterns-and-principle/","section":"blog","summary":"","tags":["Design Pattern","Design Principle","鐵人賽"],"title":"Design Pattern的類型與原則","type":"2020 鐵人賽 | Design Pattern","url":"/design-pattern/design-patterns-and-principle","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1599523200,"description":"Design Pattern是解決問題的一種方案。","dir":"blog/technology/design_pattern/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":["Design Pattern","設計模式"],"kind":"page","lang":"zh","lastmod":1599523200,"objectID":"3cc58022c1e4561afd97ba91303488fc","permalink":"https://ianjustin39.github.io/ianlife/design-pattern/what_is_design_pattern/","publishdate":"2020-09-08T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/design-pattern/what_is_design_pattern/","section":"blog","summary":"","tags":["Design Pattern","鐵人賽"],"title":"什麼是Design Pattern?","type":"2020 鐵人賽 | Design Pattern","url":"/design-pattern/what_is_design_pattern","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1588723200,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"taxonomy","lang":"zh","lastmod":1588723200,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/tags/bootstrap/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/tags/bootstrap/","section":"tags","summary":"","tags":null,"title":"Bootstrap","type":"tags","url":"/ianlife/tags/bootstrap/","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1588723200,"description":"","dir":"blog/technology/build_blog/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"page","lang":"zh","lastmod":1588723200,"objectID":"50cf604c9e0e3a107bdeaa3c0b071136","permalink":"https://ianjustin39.github.io/ianlife/build-blog/build_photograph_in_hugo/","publishdate":"2020-05-06T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/build-blog/build_photograph_in_hugo/","section":"blog","summary":"","tags":["Blog","Hugo","Bootstrap"],"title":"用Bootstrap + Masonry + magnific Popup架設個人相簿","type":"Blog","url":"/build-blog/build_photograph_in_hugo","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1588377600,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"taxonomy","lang":"zh","lastmod":1588377600,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/tags/github/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/tags/github/","section":"tags","summary":"","tags":null,"title":"github","type":"tags","url":"/ianlife/tags/github/","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1588377600,"description":"","dir":"blog/technology/build_blog/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"page","lang":"zh","lastmod":1588377600,"objectID":"cf668ef5a54071881d259c576c2ae29a","permalink":"https://ianjustin39.github.io/ianlife/build-blog/deploy_hugo_on_github/","publishdate":"2020-05-02T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/build-blog/deploy_hugo_on_github/","section":"blog","summary":"","tags":["blog","github","hugo"],"title":"部署Hugo個人網頁至GitHub","type":"Blog","url":"/build-blog/deploy_hugo_on_github","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1588291200,"description":"","dir":"about/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1588291200,"objectID":"c267fa86b42e2c76a4ebaa25b13645ad","permalink":"https://ianjustin39.github.io/ianlife/en/about/","publishdate":"2020-05-01T00:00:00Z","readingtime":1,"relpermalink":"/ianlife/en/about/","section":"about","summary":"我是IAN，一名軟體工程師\nblog紀錄學習心得以防腦容量不足忘記學了什麼，同時也分享自己的人生！！\n 興趣是攝影及旅遊，也喜愛健身，目前正在朝0.5個巨巨的目標邁進\n 有時喜悅與人分享，遠比獨享還來的快樂 ｜ 謦語錄\n 若有任何問題歡迎與我聯繫！！\ngmail: ianjustin39@gmail.com\ngithub: https://github.com/ianjustin39","tags":null,"title":"About Me","type":"about","url":"/ianlife/en/about/","weight":0,"wordcount":11},{"authors":null,"categories":null,"date":1588291200,"description":"","dir":"about/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"section","lang":"zh","lastmod":1588291200,"objectID":"a69934980f795699f7cc4d8a50a604b2","permalink":"https://ianjustin39.github.io/ianlife/about/","publishdate":"2020-05-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/about/","section":"about","summary":"","tags":null,"title":"About Me","type":"about","url":"/ianlife/about/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1588291200,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"home","lang":"en","lastmod":1588291200,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/en/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/en/","section":"","summary":"","tags":null,"title":"Life Story","type":"page","url":"/ianlife/en/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1588291200,"description":"","dir":"photograph/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1588291200,"objectID":"87a44f296cd7c3a0c8eae429d38f998c","permalink":"https://ianjustin39.github.io/ianlife/en/photograph/","publishdate":"2020-05-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/en/photograph/","section":"photograph","summary":"","tags":null,"title":"Photograph","type":"photograph","url":"/ianlife/en/photograph/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1588291200,"description":"","dir":"photograph/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"section","lang":"zh","lastmod":1588291200,"objectID":"b69c5c5b426ecf644ffdce5394754260","permalink":"https://ianjustin39.github.io/ianlife/photograph/","publishdate":"2020-05-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/photograph/","section":"photograph","summary":"","tags":null,"title":"Photograph","type":"photograph","url":"/ianlife/photograph/","weight":0,"wordcount":0},{"authors":null,"categories":["TECH"],"date":1588204800,"description":"","dir":"blog/technology/build_blog/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"page","lang":"zh","lastmod":1588204800,"objectID":"fcee15e8a189f22cba64f5b002018f55","permalink":"https://ianjustin39.github.io/ianlife/build-blog/get_started_hugo/","publishdate":"2020-04-30T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/build-blog/get_started_hugo/","section":"blog","summary":"","tags":["hugo","blog"],"title":"使用Hugo建立個人網頁","type":"Blog","url":"/build-blog/get_started_hugo","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"taxonomyTerm","lang":"en","lastmod":-62135596800,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/en/categories/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/en/categories/","section":"categories","summary":"","tags":null,"title":"Categories","type":"categories","url":"/ianlife/en/categories/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"contact/","expirydate":-62135596800,"fuzzywordcount":0,"keywords":null,"kind":"section","lang":"zh","lastmod":-62135596800,"objectID":"6afdd20c496c23439408a9385435eca0","permalink":"https://ianjustin39.github.io/ianlife/contact/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/contact/","section":"contact","summary":"","tags":null,"title":"Contact","type":"contact","url":"/ianlife/contact/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"taxonomyTerm","lang":"en","lastmod":-62135596800,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/en/series/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/en/series/","section":"series","summary":"","tags":null,"title":"Series","type":"series","url":"/ianlife/en/series/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"taxonomyTerm","lang":"en","lastmod":-62135596800,"objectID":"","permalink":"https://ianjustin39.github.io/ianlife/en/tags/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/ianlife/en/tags/","section":"tags","summary":"","tags":null,"title":"Tags","type":"tags","url":"/ianlife/en/tags/","weight":0,"wordcount":0}]