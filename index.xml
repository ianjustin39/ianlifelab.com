<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Your Life, Your Lab</title>
    <link>https://ianlifelab.com/</link>
    <description>Recent content on Your Life, Your Lab</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 05 Mar 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://ianlifelab.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>還在自己畫流程圖嗎？學會下指令讓 ChatGPT &#43; Notion 幫你解決所有事情</title>
      <link>https://ianlifelab.com/tech/drawing-flowcharts-with-ChatGPT-and-Notion/</link>
      <pubDate>Tue, 05 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/tech/drawing-flowcharts-with-ChatGPT-and-Notion/</guid>
      <description>你的產品流程圖還在慢慢畫嗎？
開發產品時產品經理需要畫很多圖，就算是自己創業或是做 Side project，把你龐大的思緒整理成有條理的流程圖或心智圖也要花上不少時間。 最近在設計產品的全新功能，使用 ChatGPT + Notion 組合後發現，這組合大大的降低我準備素材的時間，只需要直接將 Mermaid 程式碼放入 Notion 的程式碼 block 內就可以將流程圖呈現出來，不需要再用 Mirror 或是 Figma 一個一個拉，同時 Notion 為主要的產品管理平台， 等於我們使用了最少的工具及時間，就可以完成這些複雜的事情。
該準備什麼素材給 ChatGPT？ 如何下 prompt 應該是大家比較在意的事情，但在下 prompt 之前，身為 PM 的你應該對於接下來要設計的新功能流程有一定程度上的了解， 如果沒有也沒關係，可以先問問 GPT ，看他對於你想要設計的新功能有什麼想法：
在詢問時先告訴 GPT 他需要 cosplay 什麼角色，GPT 會依照角色跟問題給回答一個相對精準的答案
註：回答的內容有點多截取部分做表示
這時你可以檢查這個流程是不是跟你想像中的一樣，或是有哪些地方需要增減，這邊先假設他提供的流程符合我的需求， 所以我接續要求他把這段流程寫成 Mermaid 的語法：
這時你便獲得了一串看似很複雜，自己要研究很久才看得懂的程式碼。不過不用擔心，你只需要將這段程式碼貼到 Notion 上， Notion 會自動幫你畫出整張流程圖
若覺得流程圖直式很難看，你只需要將程式碼第一行的graph TD 改為 graph LR 那流程圖就會改為橫式，就看使用上篇好哪種方式呈現拉！
LR：從左到右。
RL：從右到左。
TB or TD：從上到下。
BT：從下到上。
以流程圖來說，ChatGPT 產出的程式碼已經算堪用，畢竟流程只是要討論接下來如何實作該功能，但如果你希望更了解如何撰寫流程圖的話， 可以參考 Mermaid 的官方 Doc的資訊學習。
Functional Map 也讓 GPT 來幫我完成吧 隨著產品越來越大，Functional Map (功能地圖) 的維護也越發困難&amp;hellip;，但不要擔心，一樣靠 GPT 可以幫助你完成這件事。</description>
    </item>
    
    <item>
      <title>數位遊牧住哪裡？充滿法式風情的越南首都 - 河內</title>
      <link>https://ianlifelab.com/nomads/hanoi-digital-nomadism/</link>
      <pubDate>Sat, 02 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/nomads/hanoi-digital-nomadism/</guid>
      <description>越南在大家的印象中通常是不安全、交通混亂、在路上滑手機容易被搶，以及入境時可能要請海關人員喝咖啡等等，再加上之前到越南的簽證其實也不便宜（似乎要 4500 台幣），所以相比於鄰近的泰國，越南似乎比較少人去，聽到最多的應該是最近開放的小馬爾地夫 - 富國島。但越南還是有許多地方吸引著我們，如被列為世界遺產的下龍灣，或是因為殖民所遺留的法式街道、飲食文化等等，所以最後決定越南河內為這次為期三個月旅居的第二站。
亂中有序的越南交通 離開河內機場後，因為剛從釜山來到河內，對於環境或是街景都有些衝擊，而第一印象是極其混亂的交通以及 Airbnb 房東跟我們說的一句話： 『當你要過馬路時，舉起你的手直接走過去就對了，你站在路邊沒人會等你。』，當下聽到覺得有這麼誇張嗎？直到當天晚上要出門吃晚餐才深深體會到這句話的真實性。 在觀光區附近，也可以看到遊覽車、汽車、機車、腳踏車及路人卡在一個十字路口動彈不得的情景，但過了一會兒又會神奇地暢通，我想這也是他們文交通化的一部分吧！
雖然交通很混亂以及喇叭聲頻傳，但其實車上的車速普遍不快，喇叭似乎是要通知前車『你後面有我！』這樣而已。
數不盡個人特色的咖啡廳 身為一個數位遊牧者，到了不同的城市除了參與社群以外，當然是要去找咖啡廳拍照啊？啊不是我是說工作！
河內的咖啡廳大概就分兩種，一種是可以坐在街邊都是小椅子的咖啡廳，另一種則是一般有座位可以工作的咖啡廳。 相較於釜山，河內這邊咖啡廳的裝潢風格都滿有不同的特色，會讓你每天都想要去不同的咖啡廳看看，咖啡的價錢也很便宜， 喜歡熱鬧一點的區域可以去還劍湖附近尋找，若你是週五去，湖的附近還有每週五六日才有的夜市，可以順便去逛逛。 而你如果是喜歡有寬廣視野的人則可以到西湖四周找找，相較於還劍湖，這邊就比較優靜一點，工作累了可以到窗邊看看西湖的景色舒壓一下。
&amp;lsaquo; &amp;rsaquo; 在河內可以怎麼吃？ 美食這種東西比較主觀，蛋咖啡、法國麵包＋烤肉、蝦餅是我個人比較推的幾項，這幾個我都回訪兩三次！ 而其他的炒飯、河粉跟春捲之類的，我覺得哪家都差不多，就沒有特別找哪家。
另外若你在河內數位遊牧的時間不短，可以考慮住有廚房的 Airbnb，像我們每週都會到樂天超市採購一些食物回家料理， 有沒有比較便宜就看怎麼買怎麼吃，我覺得沒有很一定，如果膩了也可以看要怎麼料理自己想吃的食物，但我可以說品客洋芋片很便宜！ 水果類我就比較偏向去超市買，至少定價看得懂，被當盤子的機率就比較低。 另外個人認為越南的食物相較於泰國沒有那麼多樣，或是說吸引我們的種類不多，所以有 1/3 的時間是在 Airbnb 內解決。
&amp;lsaquo; &amp;rsaquo; 在河內下班放假可以去哪？ 若你在河內數位遊牧的時間不短，可以撥出一兩天拜訪下龍灣以及陸龍灣，身為世界新七大自然奇景的下龍灣絕對是直得你安排一兩天去拜訪。 陸龍灣則是被稱作路上的下龍灣，如果有時間也滿推薦去的。
如果你是個喜歡微熱鬧的人，假日可以到還劍湖旁晃晃，附近有很多店家可以逛，逛累了就可以坐在湖邊休息， 有些人也會在湖旁邊寫生，而且還劍湖週五晚上開始就有交通管制，管制區內並不會有吵雜的喇叭聲， 很適合在那邊休息放鬆，如果運氣好還有可能遇到當地舉辦的活動，像我們去時就有舉辦街舞比賽！
若是喜歡幽靜的環境，就去西湖旁邊找一間充滿植物的咖啡廳，一杯咖啡配著一本書，也是很棒的選擇。
&amp;lsaquo; &amp;rsaquo; 總結一下 總結河內數位遊牧將近一個月，讓我對越南的印象改觀了許多，當然也可能跟待的區域有關係，一開始朋友跟我說河內很無聊大概三天就差不多時我還煩惱了一下， 結果下一站的吉隆坡才真的讓我很失望🤣
關於安全的部分，有聽說相較於胡志明，河內的『搶手機怪客』似乎比較少，也可能是因為我們都待在觀光客常去或是很寬的人行道內，所以比較少遇到這類的狀況， 但還是建議如果有去越南的人還是多注意比較好。
最後就還劍湖跟西湖的湖景都很美，周圍也有很多不一樣的咖啡廳，這次大多都去還劍湖附近，比較少去西湖，直到離開前一天決定還西湖一周才發現， 很多很漂亮的咖啡廳想要進去，結果因為現金不夠沒辦法去&amp;hellip;，如果有機會再來，可能會多到西湖旁的咖啡廳工作！
一些跟河內數位遊牧的小 Tip 關於海關的咖啡錢 因為這次出門有帶空拍機，越南一直是這趟旅程風險最大的國家，許多人帶空拍機進越南被刁難，當然也有沒事的，剛好這次出海關時旁邊有一團旅行團， 海關人員看到旅行團就摸摸鼻子放行，還聽到導遊說『不用管他說啥，走就對了！』，所以下次如果要入境越南，看是要找旅行團一起混出來還是直接無視他們海關快速跑走 🤣
關於越南的交通 越南的 Grab 滿便宜的，如果第一次去且會待長時間的話，建議可以先訂閱一個月，會送幾張優惠券可以使用！（不過之後要自己記得取消訂閱就是了
關於換錢 在台灣跟機場不用換太多，匯率都很差，當時在機場換 750，金飾店 775。 如果有加入 FB 的社團，可以在上面獲得資訊，都有好心人士每天在上面 po 今日匯率。 我們在比較幾間換錢所後，還是決定去 FB 社團推薦的金飾店換錢最划算。</description>
    </item>
    
    <item>
      <title>數位遊牧不只讓我打開眼界，同時也成長了我的心靈</title>
      <link>https://ianlifelab.com/nomads/after-digital-nomads/</link>
      <pubDate>Sun, 18 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/nomads/after-digital-nomads/</guid>
      <description>開始數位遊牧前，你必須先知道這幾件事&amp;hellip;這篇文章有提到， 在開始數位遊牧之前，我非常嚮往這種生活模式，可以不用被固定在同一個地點，想去哪就去哪，探索世界各個角落， 各種幻想不斷地浮現在我的腦海裡，每天都期待著起飛的那一天。而確實我經過了這段時間的閱歷後，發現滿足的不單只有好心， 獲得的經驗比想像中還要多很多。
數位遊牧並非旅行，而是一種生活模式 『數位遊牧等於環遊世界嗎？』在體驗數位遊牧回來後，與幾位也有數位遊牧經驗的朋友聊了這個話題，其實大部分的人認為， 數位遊牧確實可以讓我們打開眼界，畢竟走訪不同的城市、認識來自各地的朋友、體驗各種國家的文化風情，都是人生中很好的閱歷。 但這充其量是『旅居國外』而非『出國旅遊』。
當你在數位遊牧時，可能有人會覺得『好好喔！你環遊世界到處玩！』，但其實數位遊牧者都知道，大家都是帶著工作出去遊牧， 並非每個人都是全職的旅遊 YTer 或是部落客，很多人是自由工作者、創業者或是遠端工作者，都是有工作在身上的。 就算是全職的旅遊創作者，旅遊就是他們的工作，必須在有限的時間把這些資料整理成影片或文章，讓他的粉絲可以從他這邊獲得有價值的資訊。
所以希望你的旅居各國的數位遊牧計畫啟動之前，除了已經知道的優點以外，也要開始了解究竟你去遊牧會遇到什麼挑戰，以及要如何克服難題！
我的家鄉其實沒那麼差，其他國家似乎也沒想像中的好！ 『好想移民日本喔！』，在鍾愛日本文化的台灣，你的朋友一定講過這句話，而通常接下來大機率會被回『日本適合旅遊，不適合生活。』 但或許沒在日本生活過得我們永遠不會知道這句話真實的意思代表什麼？
『我終於到拉！我好興奮ＲＲＲＲＲ！我要探索這個城市的每個角落』，這是我第一次落地泰國清邁時的心境，對於一個沒出國留學或是交換的我來說， 當下真的興奮到不行，覺得我即將面對一個完全不一樣的生活！直到三週後結束了人生第一次的旅居體驗，我獲得了許多不同與以往的經驗，如：
認識了一些不同國家的人，聽了他們的旅居故事
微深刻瞭解了泰國的民俗風情跟文化
清邁的慢步調生活讓大部分數位遊牧者喜歡
當然也遇到了些生活上的不習慣或是不便之處&amp;hellip;
打泰拳扭傷的右手，沒地方看還好有帶跌打損傷的油（出國記得要保險&amp;hellip;）
人家五天跑完的景點，我們三週都沒有跑完
泰國的辣可以辣到我天天拉肚子
嘟嘟車非常狂暴然後都坐地起價
當然這只是大概簡述一下狀況，環境、交通等個人因素就不多贅述。每個國家都有各自的需要解決的問題， 以往我們是以『旅客』的身份出入他國，被給予友善的對待是可以預期的，而且也因為是『短期旅遊』，對於一些缺點或是不理想的部分都有很大的包容度。 但當你在一個地方住久了，會發現不是所有事情都會符合你的期待，但也沒辦法改變，因為這是他國文化， 比方說在河內旅居時，越南風情的街景讓我非常感興趣，常在假日或下班時去湖邊散步，但河內從早到晚響不停的喇叭聲讓我感到非常的躁動及不舒服。
另外，異國的孤獨感讓我非常想家，所謂的孤獨感，除了當地沒有熟識的人需要認識新朋友以外，走在這些城市的街頭，所有街景、招牌、文字都不是以往熟悉的情景， 用英文與人溝通聊天時總少了些熟悉感，在這段旅程的尾聲，我思考著是否國外真的比較好，還是只是我有一雙看不見家鄉優點的眼睛？
還會有下一段數位遊牧的旅程嗎？ 我想這個答案是肯定的，儘管我不認為數位遊牧是環遊世界或是到處去玩，而我也只是短暫的體驗了這種生活模式，但這段體驗確實讓我的眼界增長了許多， 這些經驗不再只是透過螢幕，而是由我的自身去體驗獲得的經驗，透過旅居不同的城市的同時，也讓我反思我所處的環境是否真的這麼的不好？ 國外的月亮真的比較圓嗎？又或是我只是個愛抱怨卻不愛付出的人？旅程中的興奮、焦慮、無奈、失望等都是寶貴的回憶及養分。
下次相機只會帶定焦鏡，不然重的要死&amp;hellip;</description>
    </item>
    
    <item>
      <title>開始數位遊牧前，你必須先知道這幾件事...</title>
      <link>https://ianlifelab.com/nomads/before-start-digital-nomads/</link>
      <pubDate>Thu, 15 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/nomads/before-start-digital-nomads/</guid>
      <description>2023 年八月開始，我終於實現了數位遊牧的夢想，前後到了泰國清邁、越南河內、馬來西亞吉隆坡以及韓國釜山旅居， 體驗了許多文化、飲食以及歷史等等事物，雖然所去的城市及時間可能沒有多數的遊牧者多，但作為數位遊牧新手， 希望可以把這些經驗記錄下來，讓未來如果想要開啟數位遊牧的你們可以更清楚出發前需要做好什麼準備！
1. 要選擇哪個國家？出發前要注意？ 第一次數位遊牧一定非常興奮，會想著『天哪！我要常住在ＸＸ！我好興奮Ｒ』，所以可能會選好玩不無聊的地方， 但這時可能要冷靜一下，雖然你飛過去了，但你是帶著工作去，而不是完全去旅遊，所以除了遊玩景點，還要考慮住宿、工作地點、飲食、環境、網路等等問題， 所以你在選擇國家或城市時可以考慮這幾點：
住宿費用：通常遊牧會在一個定點住比較久，大部分房源都會有長租優惠，如果你是懶得移動又有預算考量就可以考慮長租。 工作地點：你抵達該國家後，是要在咖啡廳工作、在家工作還是到 Co-working space 工作，這影響到你的住宿地點跟交通費用。 交通：如果住大城市，大眾運輸就很方便，不然就是要使用叫車服務，交通費也算一個隱性成本，在規劃預算時記得也要納入考量。 網路：在國外長住，我覺得換 Sim 卡很不方便，還有可能弄丟，所以推薦使用 eSim 卡，網路流量用完了只要有 wifi 就可以再加購，手機網路在你踩到網路不穩的咖啡廳時可以幫助你度過難關。 飲食、環境：選一個自己喜歡的環境，不要跟風，如果環境不喜歡不如在台灣。（像我對於吉隆坡就滿失望的） 好好體驗不同的文化及生活：你都飛過去了，下班不要在家耍廢，多出去走走吧！ 接著是盤點生活、工作需要哪些東西，如每個國家的插座、日常保養品，有些東西要在訂住宿錢跟房東確認有沒有提供， 例如我們問了好幾間馬來西亞的 Co-living apartment 住宿都只有提供枕頭，其他東西要自己帶，這可能就會有些不方便。
2. 住宿要怎麼選擇？ 住宿在這先分成兩種，一種是跟其他數位遊牧民族一起住的 Co-living apartment，另一種則是家庭式的 Airbnb， 當然也可以選擇住民宿或是飯店，主要看你的預算有多少以及有什麼需求！
Co-living apartment
如果你屬於社交牛雜症或是社交恐怖份子，那 Co-living apartment 可能是你不錯的選擇！ Co-living apartment 的好處在於大部分都會為來這邊遊牧的住宿者舉行社交活動，讓各國不同的遊牧者可以互相認識不孤單， 以在清邁住的 Alt_chiangmai 為例，他們就有冰桶挑戰、瑜珈、Family meeting 等活動，讓你有機會認識不同國家的朋友。 Family meeting 時，主持人也會詢問未來一週有沒有人想要舉行活動，如路跑、爬山、桌遊等等，可以依照自己的喜好參加！
Co-working space 則是住在 Co-living apartment 的另一個優點，你不需要每天煩惱要去哪間咖啡廳工作， 或是天氣不好還要出門，直接下樓就可以開啟工作模式，就算你的工作時區跟所在公司時區相反（夜貓子型態），也不會有影響！
家庭式的 Airbnb
如果是個比較需要自己空間的人，可以選擇住在 Airbnb 內，只要住宿的地方可以讓你洗衣煮飯工作就好！ 但若你住宿時間比較長的話，可能要考慮幾個問題，如生活用品（洗衣精、衛生紙、毛巾）房東會不會提供，是否有每週都會打掃房間， 設備有問題時會不會及時修善等。
建議選擇評價比較多的房源，像這次在吉隆坡住的 Airbnb 是新房源，客服系統以及清潔流程都不順暢，花了很多時間與客服來回溝通， 住宿期間造成我們很大的困擾&amp;hellip;</description>
    </item>
    
    <item>
      <title>新產品不適合跑 Scrum？</title>
      <link>https://ianlifelab.com/post/start-up/start-up/do-not-use-scrum-before-new-pd-launch/</link>
      <pubDate>Thu, 07 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/post/start-up/start-up/do-not-use-scrum-before-new-pd-launch/</guid>
      <description>Scrum 算是現在軟體公司內最主流的協作框架，藉由 sprint 來切割產品每次更新的 scope ，讓產品可以不斷地與用戶互動，從而打造最貼近用戶及市場的產品。 但並不是所有的產品或是團隊都適合執行 Scrum 這個框架，甚至 Scrum 會阻礙開發的進度。
Scrum 的優勢在於小步快跑 Scrum 的優勢在於小步快跑，產品藉由每次的迭代更新，不斷地適應市場的改變與用戶的需求。 在執行 sprint 的過程中，會評估每個 task 所需要花的資源、每個 sprint 可以完成掉多少 task 以及定義每個 sprint 的 goals 等， 這些數據讓 PM 可以有效的管理產品的進度，同時也可以經由這些資訊與不同的部門合作，讓產品可以在市場上順利被推行。
新產品還沒上線之前不適合跑 Scrum？ 為什麼會說產品還沒上市前不適合跑 Scrum 呢？剛剛有提到，Scrum 講求小步快跑，藉由產品的快速迭代獲取更多用戶反饋，進而打造更貼近市場的產品。 重點來了！『產品的快速迭代』來獲取反饋，但產品還沒上線，怎麼來迭代獲取反饋呢？ 同時 Scrum 中的會議也會大量使用掉團隊的時間，在產品發布之前更應該把時間放在開發產品上，盡量避免耗時太久的會議。
在新產品上線之前，通常團隊或是 PM 會決定好新產品要有什麼功能，或是具備什麼條件，滿足這些需求推出市場才有意義。 所以在開發新產品時，團隊的目標並非迭代產品，而是完成可上線的產品，讓銷售部門可以順利的將產品推往市場。 這階段會更像是專案式的開發方式而非 Scrum。
專案式的開發方式，就像接案公司承接甲方的案件一樣，有明確的交付日期以及交付項目，這些資訊通常會跟著發佈計畫做調整； 同理，在公司內部開發新產品時，也會有一個發布計畫，預計新產品需要在何時發布、發布時需要囊括哪些功能、預期帶來什麼效應等等， 若錯過此時機，可能發布的效果就不會如預期般理想。
時效性的例子，我想以 Youtuber 是最好的範例，每年 Apple 新品發佈會，各大科技 YT 都會守在電腦前面，甚至有的被受邀出席 Apple 官方的實體發佈會， 在結束後分秒必爭的整理素材、剪輯後製、發布影片，為了就是要搭上發佈會後的這個黃金時段，因為這時流量最高，可能只要晚同業一兩天，流量就是天與地的差異。 產品的開發雖然沒有這麼極端，但邏輯卻非常相似。
這是否代表用專案式開發方式，要完全捨棄 Scrum 用取代呢？
新產品並非不適合 Scrum，而是看怎麼使用 其實並非新產品不適合 Scrum，而是不要拘泥於形式讓 Scrum 成了開發上的障礙，如開發不完就遞延，這可能會影響到產品上線的標準。</description>
    </item>
    
    <item>
      <title>矽谷推崇的新創思維 - 為何要產品需要 MVP？</title>
      <link>https://ianlifelab.com/post/start-up/start-up/why-need-mvp/</link>
      <pubDate>Tue, 05 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/post/start-up/start-up/why-need-mvp/</guid>
      <description>MVP 是那個 MVP 嗎？ 在軟體產業中，MVP （最小可行性產品）這個詞大家應該不陌生，但在工作上卻不太容易去接觸到，因為在我們進入公司時， 大部分的公司都已經有一個穩定的產品，或是已經經過打磨驗證的產品，這讓我們要從如何去實踐 MVP 這套理論的機會也變得比較困難。 所以大家可能都有『產品最好先推出 MVP 』的概念，但卻很少有實際執行 MVP 的經驗。
產品推出 MVP 會帶給你什麼好處？ 一定要推 MVP 嗎？以前的產品也沒 MVP 照樣有人買單啊！
說到早期產品開發，通常會經歷開會討論需求、確認規格、執行開發、功能測試、產品發佈等階段，中間可能還會有需求變更的環節、溝通落差等還環節讓時間延遲， 前後加起來可能 12~18 個月甚至更久，但早期的產品仍能獲得了成功，為何現在不行呢？ 相比十年前，現今社會的變化速度太快，以前可能五年市場才會出現變化，現在可能一年甚至更短，市場或是人們的習慣就會被改變。
以一個遊戲為例，約莫十年前日本推出一款遊戲叫龍族拼圖，當時風靡遊戲市場一大段時間，還記得當時一隻 T1 角色可以稱霸遊戲半年一年沒問題， 但現在遊戲的選擇太多，遊戲商為了讓玩家花更多注意力在遊戲上，遊戲不斷推出新的挑戰刺激玩家，副本 Meta 不斷改變， 上個月人人搶著抽的 T1 的角色，這個月在 PTT 可能就出現『XX 是不是過氣』的類似留言。
產品市場也是，現在環境以及用戶的習慣變化的太快速，如果花一兩年的時間開發產品，可能產品已經沒辦法滿足現在客戶的需求了。 而經由 MVP 提早接觸市場，我認為對產品有以下三個好處：
1. 確認產品的方向 我想拍拍圈（PopChill）是個不錯的例子，當初拍拍圈的產品想要做社群電商，像是 IG 裡面內建電商的功能一樣， 推出之後發現這個題目似乎跟當初預期的效果不一樣，最終他們決定要把題目改為『精品二手拍賣』，現在的成果就非常的好。 試想要是拍拍圈產品做了一兩年都沒推出市場，花了大把資源卻發現選錯題目，到時改題目的成本會不會更高？
產品提早接觸市場，不但可以驗證產品是否有解決市場上的問題，也可評估產品的方向是否需要改變。
2. 確認產品功能是否真的被需要 做產品的人有時會掉入『我要打造最強產品』漩渦，而忽略了市場需求及聲音。 團隊可能從市場發現某些需求，或是經由訪談找到了用戶沒被滿足的痛點，讓產品有機會從這些點切入， 但這些都停留在『我們覺得用戶需要』的階段，但我們不知道的是，可能這些需求對於用戶來說不夠痛，他們有其他替代品可以使用， 有或是推出的產品雖然解決了問題，但因為設計不良讓用戶花更多的時間適應產品，以至於用戶們不買單。 推出 MVP 可以驗證我們的假設，同時團隊可以從先行使用的用戶中獲得的反饋去優化產品，讓產品可以更貼近用戶的需求，解決他們實務上的問題。
3. 確認產品 TA 是否與預期的相似 一開始在設計產品時，團隊一定會依照某些標準去 target 一些用戶為產品的 TA，試著以這些 TA 的輪廓來規劃產品的解決方案。 這跟第二點類似，這些 TA 是『我們認為的 TA』，實際上可能不是，比方說一個加密貨幣錢包商，認為所有接觸加密貨幣的人都是錢包的 TA， 但推出產品後發現，相比於錢包，專業交易員更喜歡使用交易所，不只是交易所提供豐富的衍生性金融商品，交易所在交易上對於交易員來說比錢包方便很多。 這時團隊就會了解要把交易員剔除在目標客戶之外，關於交易相關的功能優先度就變得不是那麼的高。</description>
    </item>
    
    <item>
      <title>矽谷阿雅 - 追不到夢想就創一個!</title>
      <link>https://ianlifelab.com/read/create-dreams/</link>
      <pubDate>Sat, 02 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/read/create-dreams/</guid>
      <description>相信身為 PM 的人應該都聽過『矽谷阿雅』，也知道他的經歷非常的漂亮，這人人稱羨的經歷背後，可能是種種挫折堆疊而成的結果，但大家並不知道這些事情罷了。 有些人會覺得這是一本雞湯書，但看的過程卻有些共鳴，這些看似雞湯的背後，都是不為人知的辛酸血淚。
簡單聊聊閱讀過程中產生共鳴的一些部分。
獨立思考 vs 直接解答 我想這可能是歐美與亞洲國家的教育體制的差異？我們從小到大不管是教育、考試都會有一套標準答案，甚至工作後我們認為上司的指令就是我們工作的標準，但歐美似乎更注重你如何思考，如何解決問題，而不是伸手等著答案出現。
這讓我想到曾經當主管的經驗，每當組員來問問題時，一開始的我會給予我認為的解法，當然組員聽過想了想就會回『好我知道了』，變聽話照做。 結果並沒有不理想，但漸漸的我發現，他們看似解決了工作上的問題，但其實只是把一個答案填進去空格裡而已， 這樣其實失去了很多成長的機會，如沒辦法獨立下決定、害怕承擔錯誤等。
於是後來當他們來問我問題時，我都會反問『那你怎麼想呢？你覺得這個問題怎麼解決會比較好？』 其實這樣問並不是要去找麻煩，而是希望大家是真的經過思考，帶著一些想法過來討論，這個想法可以是不完整、可以不正確，但它可以訓練我們的思考解決問題的脈絡， 而不再只是像一個機器人一樣聽話照做。當往後再次遇到問題時，漸漸的自己會建立一套解決流程，而不會像無頭蒼蠅一樣不知所措。 我認為這不只是主管對組員的狀況才適用，而是當我們今天要找任何人，甚至老闆討論事情時，大家都希望你是帶著一點東西來，而不是伸手就要答案。
勇於挑戰，任何失敗都是在練習成功 穩定對於亞洲人、或是台灣人來說非常重要，踏出舒適圈代表著不穩定，可能會失敗， 我們非常的畏懼失敗，害怕失敗就會失去一切、被瞧不起， 與其要經歷失敗的痛苦，不如繼續穩定現在的生活，至少可以在不舒服中尋找小確幸。
其實這沒有什麼對錯，相較於歐美人，亞洲人的確會比較保守，但我認為在可承受的範圍內去探索未知的領域，其實都是給自己創造機會。 也許現在的自己能力已經非常的強，只是待在相同的環境沒辦法發揮，或是其他原因導致不自信、畏懼失敗等種種原因，讓人無法跨出第一步。 就算真的失敗了，在這過程中學習到的任何事物，都會成為我們的經驗，搞不好未來的哪天我們就可以運用這個經驗爬得更高。
以我為例子， 當年決定轉職成 PM 前猶豫了很久，當工程師也幾年了，如果轉職成 PM 那年資就要重算，薪水也要調降，這讓我糾結了很久。 最後我還是決定挑戰看看，現在回去看也覺得這個決定沒有做錯，在 PM 的這條路上，工程師的背景幫助我很多事情，讓我有更多的時間可以鑽研產品相關的技能。 有沒有可能失敗，當然有，失敗頂多回去當工程師。有沒有可能繼續當工程師薪水更高，當然也有，但這可能不是未來我想要的職涯， 等到那天我想通時再轉換的成本可能更高了。（但工程師的薪水是真的香 🤣
我的價值由自己肯定 30 歲成為上市公司的 CEO、大學畢業就創造了獨角獸新創公司，如果擁有這種 Title 應該很炫吧？ 年輕有為、少年董，這些 Title 都讓人著迷，但真正在年輕時擁有大成功的人並不是多數， 也不是每個人都有辦法複製這些成功，成為 CEO 或是創造獨角獸更不一定是每個人的夢想，那為何我們要按照別人或是社會的期待去活著？ 只有我才知道我的價值在哪裡，也只有我知道我未來的夢想是什麼，每個人都不一樣， 我們只需要肯定自身的價值並實現夢想，並不需要被社會的價值所綁架。
讀後心得 阿雅這本書可能很多人會覺得『啊不就是雞湯文』、『看似講了什麼，但好像又沒講什麼』，但我認為可能擁有過類似經歷的人看了這本書會比較有共鳴， 在看的過程中我也在思考，如果我是他我會怎麼做？現在扛兩三百萬的貸款壓力就很大了，更不用說在她那個時代， 可能大部分的人都會想著『如果我失敗了怎麼辦』，但有些事真的是沒有經歷過我們都不會知道結果會是怎樣， 如果結果是『不小心成功了』的話呢？我們會不會慶幸當下有做這個決定？ 我認為人生的路上一定會遇到很多迷茫，那些成功創業家的背後，也不知道經歷了多少挫折失敗，才造就了現今的獨角獸或是科技大廠。
想想年幼的我們，對任何事物都充滿好奇心，面對任何事情都認為自己一定可以解決，但隨著年紀的增長，有了知識、有了金錢、有了名聲， 卻失去了年輕時的勇氣、好奇以及無畏，這是多麼可惜的事情。 每個明天對我們來說都是未知的，天天都有機會出現意料之外的事情，與其焦慮、憂鬱、擔心，不如試著擁抱這種未知性， 接受並解決他們，讓每個今天都過得比昨天更好。
結論，我認為是一本好書，書中還有很多有趣的故事，就算不是 PM 也推薦看看！！</description>
    </item>
    
    <item>
      <title>誰說 sprint ticket 一定要 story point?</title>
      <link>https://ianlifelab.com/post/product/product/does-ticket-must-need-story-point/</link>
      <pubDate>Mon, 27 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/post/product/product/does-ticket-must-need-story-point/</guid>
      <description>有參與過敏捷開發的人一定聽過 story point，網路上也很多有關 story point 的解釋以及如了運用， 他主要是協助衡量團隊的開發狀況，讓 PM 可以再有一定的基準下去跟其他部門溝通，如產品行銷或是活動銷售等等。 但是不是真的有了 story point 就一定可以讓產品或專案順利進行？ 有沒有可能有了 story point 但還是遇到一堆狀況？
永遠估不準的 Story Point 有沒有遇過這個狀況，在 sprint lanning 時團隊評估這個 sprint 可以完成 40 點，但 sprint 結束時卻只完成了 25~30 點， 常見的原因可能有這幾種：
ticket 的點數估不準（如後端工程師估一同評估前端工程師的 ticket ） 評估 ticket 時忘記某個項目也要做（如 App 新功能只評估畫面開發，遺漏 API 串接） 實作 ticket 時出現預期之外問題或任務（在串接第三方平台時，回的參數與文件給的不同） 這些狀況都可能對在進行中的 sprint 造成一些風險，當然一般來說還是有辦法解決， 通常會在 Retrospective meeting 中去討論如何避免這次該遇到的困難，如後端工程師需要了解前端的開發不只有畫面，也包含邏輯； 與第三方廠商串接資料時需要先確認文件與實際提供的參數是否相同等事項，並期待下次再評估點數時可以更貼近團隊的狀況。
但，有沒有就是沒辦法解決的狀況？如不管討論幾次總是會出現預期之外的問題，或是 ticket 總是會在 sprint 中不斷地長大， 導致需要在 sprint 去調整開發進度，接著去跟其他部門溝通 Delay 的狀況呢？
以 Sprint Goals 為導向，Story Point 僅是參考 在執行敏捷開發的過程中，團隊可能覺得目標是『完成全部的 story point』， 但如果遇到了進度不如預期，會很容易掉入一個互相踢皮球的狀況，如『 PM 安排太多事情了拉』， 『這個 sprint 少一天沒辦法做這麼多啊』、『為什麼工程師可以做這麼慢，這不是很簡單嗎？』、『做不完大家都有鍋啊』之類的情境內。</description>
    </item>
    
    <item>
      <title>數位遊牧住哪裡？韓國的海港城市 - 釜山</title>
      <link>https://ianlifelab.com/nomads/busan-digital-nomadism/</link>
      <pubDate>Sun, 19 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/nomads/busan-digital-nomadism/</guid>
      <description>自從上次從清邁體驗過數位遊牧的生活之後，彷彿發現新世界一樣，不管是時間或是心態都跟旅遊時不同，沒有一定要逛完所有景點， 也沒有時間壓力，在保有新鮮感的同時也可以照著自己的步調走，所以趁著還有這股衝動回國後立馬規劃下一次遊牧的時間及國家。 剛好秋天是楓葉季，且聽說秋天的釜山整體氣溫涼爽，非常宜人，只要套一件薄外套出門就可以了，所以第一站就決定給韓國的釜山了！
這次旅居釜山與清邁不同，在清邁時大部分時間都待在 Co-Living 內， 由於 Co-Living 的費用包含了 Co-Wprking 的工作空間，所以除了吃飯很少出去探索周圍的環境， 而這次的旅居目標是『探索當地更多不一樣風景』，看看釜山哪邊適合工作、有什麼在地的好吃的食物、平時大家的休閒是什麼、最後再想想是不適合移民來韓國 🤣🤣🤣
釜山要去哪裡工作？ 聽說韓國有 95% 咖啡豆從釜山進入，所以路上真的隨便就是一間咖啡廳，還有人說釜山可能沒地方吃飯，但不會找不到咖啡廳，不知道是真的還是假的🤣。
這次住在西面站附近，西面站應該算是釜山的鬧區，可能有點像台北的東區或是信義區的地方，店家選擇很多非常的熱鬧。 在西面站附近有非常多的咖啡廳可以工作，尤其是田圃咖啡街對面的街道（沒錯，適合工作咖啡廳在咖啡街對面 XD），每天在路上選就選不出來了！！ 而且基本上每家咖啡廳都有附插座及 Wifi，美式咖啡的價格通常落在 3k ~ 4k 上下，當然有些店家會更便宜，環境也很適合工作一整天，個人覺得這種價格不貴， 而且每家咖啡廳風格也都不一樣，有些很好拍照，當工作做累了就可以站起來隨處拍拍放鬆一下心情。
當然如果要工作還是要選擇適合久坐的咖啡廳，釜山也有很多是自己創業開店的咖啡廳，這就比較偏向打卡聊天吃甜點，不適合工作了 （人家排隊吃甜點，如果看到你把電腦拿出來應該會白眼翻一百圈吧哈哈）
另外，釜山周圍有非常多海水浴場，如廣安、海雲臺等，這些海水浴場的規劃都非常的好，而且也有很多海景咖啡廳。 如果今天你想要遠離城市的喧囂，可以到海水浴場附近選擇一間咖啡廳，一邊看海景一邊工作，也會有不一樣的感受！
文章最後有附上在釜山一個月內踩過五間我認為適合工作的咖啡廳以及可以採買生活用品的超市
平常在釜山可以幹嘛？ 下班後不妨到街上走走，雖然有些人會說韓國很無聊，市容跟台北高度相似，但我覺得還是得看你是以什麼心態去看待這些事， 像這次在路上就遇到滿多當地舉辦的活動或是街頭藝人表演，這些都滿新鮮的，尤其時釜山在 2030 年要舉辦世博，他們從現在就開始準備了，所以其實滿有機會看到不同的活動。但如果你說要逛街的話，我是覺得台灣街頭很多日韓貨，所以可能會覺得差異不大沒有新鮮感。
假日就可以跑比較遠的地方，這次剛好運氣比較好，待在釜山的期間有遇到煙火節，剛好體驗到整個沙灘擠爆百萬人，若中間跑去上廁所就沒辦法回到座位上的窘境。
旅居釜山一個月的感想 相較於清邁，感覺釜山出沒的歐美旅客或是數位遊牧的人相對比較少一點（在咖啡廳工作時亞洲面孔的出沒機率比較高）， 不過我仍然認為釜山是一個很棒的城市，如果今天上班想換個心情，搭個地鐵 20 分鐘就可以到廣安海水浴場， 選一間咖啡廳就可以配著海景工作一整天，心情也會愉悅很多。 而且釜山是個很多樣化的城市，不管是輕鬆休閒的海灘，或是比較喧囂繁華的鬧區，都可以在釜山找到。 這次去也剛好遇到釜山舉辦不同的活動，讓我看到這座城市帶給大家的魅力，如果未來有機會旅居釜山，一定要好好深入感受一下當地的文化， 相信會是一段有別於『旅遊』的體驗！
一些跟釜山數位遊牧的小 Tip 關於釜山西面推薦工作咖啡廳 這次大概踩了十多間咖啡廳，選了五間個人認為適合工作的咖啡廳推薦一下，評價標準就是依據是否有插座、網路順暢度以及環境舒適度， 不過這很主觀，以及這些咖啡廳都是連鎖店，每間連鎖店的環境也會依照地區的差異有所不同，所以參考參考就好！
&amp;lsaquo; &amp;rsaquo; Top1 EDIYA COFFEE
四樓有專門的讀書或辦公空間，幾乎每個座位都有插座，且網路很順，環境安靜不吵雜
📍 地址：부산 부산진구 서전로10번길 71 2, 3, 4층
🗺️ 地圖：https://naver.me/5nXbeRyb
👍 推薦：⭐⭐⭐⭐⭐</description>
    </item>
    
    <item>
      <title>為何交易所也推出錢包服務？</title>
      <link>https://ianlifelab.com/post/technology/blockchain/exchange-and-wallet/</link>
      <pubDate>Tue, 14 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/post/technology/blockchain/exchange-and-wallet/</guid>
      <description>錢包是踏入 Web3 的第一站但大家卻都選擇交易所？ 在幣圈打滾幾年的人應該都知道，如果要使用 Defi 或是進入元宇宙，都會需要自己建立一個加密貨幣的錢包，但交易所的用戶量始終大於錢包的用戶，明明錢包應該才是進入 Web3 的入口，為什麼大家卻選擇交易所呢？我認為有以下兩個原因
交易所的操作性與 web2 一樣 大部分用戶是想要『投資賺錢』 過去的 web3 因為進入門檻實在太高，再加上未知的領域太多，導致一般人很難或是很怕進入這個領域，但隨著早期貢獻者的開拓以及技術的堆疊，現在進入 web3 的門檻已經不像以前一樣那麼高，而且各種應用的出現也是為了讓圈外人可以更簡單的進入這個產業。而錢包則從早期保護資產安全到中期可以連動多種 Dapp 到現在試著融入一般現實世界的生活。雖然幣圈老屁股不斷強調 Not your key, not your crypto，一直呼籲菜鳥玩家要用錢包，把錢放在自己身上才是最安全的，連世界第二大的 FTX 都可以倒，只有把錢放在自己身上才沒有風險（還是有啊，忘記種子的話 XD），但為何大家還是去用交易所呢？
主打去中心化的優勢？但用戶只在意好不好用，賺不賺得到錢 過去 web3 產業打著『自託管』、『去中心化是未來』的口號，試圖建立大家的『正確』的知識，但就算建構者不斷地呼籲這件事，時不時還是會有新聞報出哪間交易所其實是詐騙（如 2023 年的 JPEX），散戶們損失了幾個億等等，而這類新聞只要出現，就會發現錢包商的用戶短期內會有所增長，那為何大家不一開始就使用錢包而還要去用交易所呢？
試想以前在教自己的長輩使用 Facebook 或 Line 等這些他們那個時代沒有的東西時，是不是會聽到『這太難了拉』、『你幫我設定好，讓我可以直接用』，把這個情境搬到 web3 似乎沒有違和感，『蛤建立錢包要抄註記詞喔，啊我弄丟了錢不就不見了』、『交易所可以用 google 登入誒，我用交易所就好了吧』、『我只是要買幣又沒有要玩 Dapp，交易比較方便拉』之類的聲音出現。因為自己建立錢包不但不方便，還有可能遺失『密碼』讓自己的錢不見，我只是想要投資買幣而已，與其相信自己不如相信交易所。
AA 錢包的出現讓交易所也開始推出錢包服務 EIP-4337 Account Abstraction 協議出現之後，似乎開始改變了這個窘境(網路上有很多關於 AA 提供了什麼功能，在這邊就先不細談)，在以太坊上使用 AA 錢包，體驗跟 web2 一樣，可以用手機或是 email 來建立錢包，就算丟失了帳戶的 key 也可以通過朋友或家人的錢包來為你做『社交恢復』，如此一來傳統加密貨幣錢包帶來的不便（複雜的註記詞）及風險（弄丟註記詞）在 AA 上面就被解決了。
AA 錢包的出現，也讓交易所有所警覺，先撇除交易所提供豐富的金融商品，相較於錢包，交易所的優勢在於『當用戶只是想買加密貨幣投資時，交易所有著與 web2 有著相同的用戶體驗，讓用戶可以不需要有額外的學習成本就可以持有加密貨幣』。現在 AA 錢包有著跟交易所類似的體驗，卻更忠於 web3 的去中心化的理念，用戶也可以『真正持有自己的資產』，交易所能不緊張嗎？與其把用戶拱手讓給錢包商，不如自己成為錢包商，讓用戶的資產可以『低成本的』在交易所以及自家錢包內轉換，憑藉著交易所豐富的金融商品及使用體驗來綁住這些用戶。</description>
    </item>
    
    <item>
      <title>人生不是只有加速鍵</title>
      <link>https://ianlifelab.com/life/slow-down-your-life/</link>
      <pubDate>Thu, 26 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/life/slow-down-your-life/</guid>
      <description>資訊科技快速進步的時代 近年科技的蓬勃發展，加速了資訊的傳播途徑，我們也漸漸發現資訊的落差已不再像過去那般明顯。以工程師為例，過去轉職成軟體工程師時，大多需參加資策會或私立電腦補習班，而如今豐富的資源在網路上隨手可得，Youtube 也有很多詳細的教學影片，線上課程也是百百種，知識取得的難度明顯降低。
而在疫情過後，國際國內的資訊交流更加緊密，招募和求職的選擇變得更多元。這也意味著競爭者不再僅限於國內，而是擴大到全球。在這樣的情境下，我們時刻提醒自己不能停滯不前。只要稍有鬆懈，將難以在這快速迭代的社會中立足。
年輕成功者備受世界矚目 受到資訊快速發展的影響，時至今日，我們可以在媒體和社交平台時常播報著某國大學生的創業報導，或某名二十幾歲的年輕創者短期間就擄獲全球關注，成就備受矚目。在當前世界，似乎需要年輕人早早取得成功，方能贏得社會的認可，而傳統意義上的小職員好像則會被視為無成就的代表。
這樣的觀念在社會中滋生，仿佛年輕人要早早創業，或是年輕一代必須不斷努力，爭取早日獲得成就。這種思維同時讓年輕人不敢停頓休息，壓力不斷增加， 不禁困惑於每天的努力到底是為了什麼？但如果不努力，彷彿下一個被裁減的就是自己。
放慢腳步，會發現不一樣的視野 不知道大家有沒有開車或騎車的經驗，當車子在高速行駛的時候，充斥著緊張及刺激，也版隨著狹窄的視野，而更不用說車窗外一閃而過的美麗風景。 想想我們的生活是不是也一樣，當我們前進的速度越來越快，不斷地追求薪資成長、社會地位等，在享受成就感以及社會讚揚的同時 是否也錯失許多美好的風景，如同說專注於事業成長的父母，沒有多餘的時間可以陪伴自己的小孩，轉眼間小孩就已經大學畢業即將步入職場。
另外，有多少人是投入職場幾十年，卻還是感到遺憾的呢？如同你的同事 A 或 B 或 C 跟你說，後悔沒趁年輕去打工旅遊，體驗異國生活； 又或是你的老前輩 Y 說，終身奉獻給公司，沒有找到自己的興趣，退休後突然沒了生活目標。
相比於跟著社會的風向走，將速度放慢，甚至暫停一下先認識自己、與自己對話、找到屬於自己的道路，這條路或許會走得比較長久，儘管你會在過程中不斷地懷疑自己的決定， 不斷地思考是不是本來的路更好，我覺得這些都是再正常不過的事，在這過程中我們需要學會與自己對話並接受這些狀況，因為你也不會知道原本的路是否真的會更好。
每個人的時間軸不一樣，調整好後再加速 我覺得這個觀點講出來很容易，要接受很困難，但必須時刻提醒自己『我有屬於自己的時間軸』，並專注在自己可以做的事情上就好。 每個人的成長、生活背景都不一樣，所以很難去複製別人的成功經歷，但不代表不能學習。與其像個無頭蒼蠅一樣沒方向的快速飛竄， 不如調整好找到明確目標後再加速衝刺。</description>
    </item>
    
    <item>
      <title>第一次數位遊牧，原來『邊工作邊環遊世界』跟我想的不一樣！</title>
      <link>https://ianlifelab.com/nomads/First-Time-Digital-Nomadism/</link>
      <pubDate>Fri, 29 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/nomads/First-Time-Digital-Nomadism/</guid>
      <description>疫情之後開啟了大遠端時代，這讓很多本來要進公司的上班族可以在家或是任何地方上班，尤其是在軟體公司上班的人，不在受限於辦公室，只要有一台電腦就可以工作。以前要請假才可以去的國家，現在只要帶著電腦還是可以在異地上班，對於很多人來說是非常誘人的事情，當然我也不例外，於是在快速計畫一陣子後決定『清邁』為我的首次旅居的城市。
為何選擇清邁 查了一些資料發現，清邁為最適合數位遊牧的城市之一，有許多適合工作的咖啡廳，且網路速度也很穩定（雖然我大部分時間都待在 Alt_ChiangMai 內），物價也很便宜。 另外就是這次選擇住宿的 Alt_ChiangMai ，相較於其他國家同類型的住宿 Alt_ChiangMai 它更有彈性，大部分 Coliving Space 最短會要求至少一個月或三個月， 但 Alt_ChiangMai 最短可以只住一週即可，而且整體硬體設備也都滿新的，身為第一次旅居外地遊牧菜鳥，不確定是否會適應這類型的生活，但又想要體驗看看社群的感覺， Alt_ChiangMai 的彈性對我們來說剛好是一個很棒的選擇，不過缺點就是價格偏高，就算有打折，一天也要 1200 上下。
什麼是 Coliving？ 選擇 Alt_ChiangMai 的另一個原因是因為它屬於 Coliving Space，可以與不同國家的數位遊牧工作者一同工作交流， Alt_ChiangMai 本身也會舉辦很多社交活動，如瑜伽、冰桶挑戰、Family meeting 等，住在這邊的人也會揪團一起去打泰拳、攀岩等等， 對於第一次體驗這類社群的我來說算是滿新鮮的，如果是想要認識不同國家的朋友可以來住看看。
去國外不會一直想要玩嗎？這樣怎麼工作 與其說是出國玩，不如說是藉由數位遊牧的方式體驗不同國家的文化及生活。像是以前出國五天，每天都要跑當地熱門景點，吃當地特有的餐廳，比較像是『難得放假出國，不要浪費這些時間』的模式，但如果把住宿時間拉長，其實就跟本來的生活類似，平日早上上班、晚上休息、假日出去玩，至少對現在的我來說要每天跑景點吃大餐還是會有些累 XD。
至於會不會一直想往外跑，我覺得難免還是會，不過換個角度想，這次來並不是只待三五天，而是待一個月甚至更久，其實可以好好安排這些時間，也不一定這一趟就要把所有的景點都去過，待在台灣也不一定所有地方都去過，畢竟就算是短期也會需要有選擇，而且這次沒來到也有理由下次再來啊哈哈。
第一次旅居的感想 對於這次清邁旅居的體驗算是滿新鮮的，可以認識不同類型不同國家的工作者，而居住時間比較長，步調並不會像短期出國旅遊一樣緊湊，反而是可以慢下來體驗當地的生活。也因為對於這些事情充滿好奇，工作就要變得更有效率，才可以有更多的時間了解當地的各種事物。可能很多人會覺得『太好了吧！我也想要過這種生活』，但必須要說不一定每個人都適合這種模式，畢竟到了一個新的國家或城市生活，可能沒辦法朋友說揪就揪，也要不斷認識新朋友才不會讓自己孤單，如果自己是比較內向的又是一個人的話，可能就會過得比較孤單辛苦。</description>
    </item>
    
    <item>
      <title>為什麼產品開發一定要有 Deadline？ 注意這五點提升團隊效率</title>
      <link>https://ianlifelab.com/post/product/product/why-need-deadline/</link>
      <pubDate>Sat, 05 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/post/product/product/why-need-deadline/</guid>
      <description>Deadline 的用途是什麼？ 產品經理在規劃產品路線圖（Roadmap）時常以會先做競品分析、市場分析或是用戶訪談，結著評估分析結果是否契合公司的年度或季度目標，最後再安排進 Roadmap 。這份 Roadmap 並非僅提供給產品跟技術團隊，行銷、業務、客服團隊也會根據 Roadmap 上即將釋出的功能去提前做準備，如與合作夥伴洽談、KOL 協作或是撰寫 FAQ 等，這時 Deadline 變得尤為重要，它成為各個團隊追蹤進度的標準。當 Deadline 一到，所有的任務都將完成，產品因此得以投入市場。不過若某團隊因為某些原因導致無法如期完成這項任務，則會影響到其他部門，甚至公司達成目標。
因此， Deadline 不僅僅是產品發佈的時間點，同時也是團隊協作中的一個共同指標，避免有認知上的落差。
Deadline 除了讓團隊有一致的目標，還能讓產品提早迭代 剛才我們提及，產品經理在策劃產品時有諸多因素需要考量。以區塊鏈產業來說，2021 年末是 NFT 風潮的高峰， 年初產品經理經過評估認為 NFT 將是今年的趨勢，因此規劃相關功能並預計年中完成並投入市場。若在 Deadline 之前完成，對於產品而言可以提早進入市場做測試、收集用戶反饋，進行迭代更新，等到 NFT 流量達到巔峰時，產品已經完成打磨，符合 80 甚至 90% 市場需求，行銷與業務部門也可以提前布局，讓產品更容易被市場關注，進而吸引大量的用戶。反之若錯失高峰後才完成，用戶早就已經找到習慣使用的產品，這時要再將其他產品的用戶轉換到自家產品將變得相當困難。
是否每件事都需要設定一個 Deadline 以軟體產品為例，可能大部分公司都是以 Scrum 的方式在迭代產品。通常，這種方法不會明確產生一個絕對的 Deadline，或者說 Sprint 的最後一天即視為 Deadline。而 Scrum 作為開發的話會更專注在每個 Sprint 的 Sprint Goals ，有明確的 Goals 可以讓團隊在 Sprint 期間能夠專注目標衝刺。
然而產品總是會有需要推出重大更新的時候，通常是基於市場趨勢的評估，或是發現有新的痛點或是機會的突破口，需要在特定的時間點完成特定任務，如果錯過時機，可能也就會錯失增長或盈利的機會。這就是為何必須有明確的 Deadline，以確保產品能在正確的時間點推向市場。
以先前 NFT 的例子為例，若是在 2021/06 加密貨幣錢包推出 NFT 相關功能，早期的 NFT 玩家將優先選擇有支援 NFT 的錢包做使用，雖然功能可能不完整，但市場上暫無其他產品競爭，產品不僅獲取了早期玩家，還有時間可以做迭代更新，領先其他競爭對手。若是在 2021/12 NFT 流量最高時推出，也能吸引一些追隨NFT潮流進入市場的圈外玩家，但相較於 6 月，12 月時支援了 NFT 功能的錢包已更多，所以獲客成本相較於 6 月會高出一些。最後就是在流量往下掉時推出，市場或許認為 NFT 即將泡沫化，大部分玩家不再對 NFT 保持樂觀，這時產品要獲取用戶將極具挑戰。</description>
    </item>
    
    <item>
      <title>就是因為『沒時間』，才什麼都能辦到</title>
      <link>https://ianlifelab.com/read/just-do-it/</link>
      <pubDate>Sun, 27 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/read/just-do-it/</guid>
      <description>沒時間，那就全部一起做 『我想要學XXX啊，但下班後就沒有時間』，或是說『這件事情太難，我沒時間學』之類的話。我們往往被『工作』、『家庭』等這些生活上事情所困，但多半因為這樣也會因為被這些塞滿，時不時會有『我想幹大事』的衝動，可能是『想要去打工度假』，也可能是『想要開始征服百岳』等，就是因為沒有自由的時間，才是充滿『幹勁』的時刻。
當發現了這個『沒時間』反而是『轉機』後，來整理看看自己每天的時間，就會知道自己的一天有多少可利用時間，以及哪些時間段是可以被優化的部分。如下兩張圖，圖一時作者平時的行程，圖二為決定去美國留學後的行程，誰說有工作又要帶小孩就不能準備出國留學？可以發現藉由調整早上與晚上兩時段的作息，讓他一天多了三小時可以為了留學而做準備。
時間無法節約，那只能提升價值密度 什麼是提升時間的價值密度？當我們整理了自己的一天之後會發現，我們其實有許多時間可以利用，不管是一段長的時間，或是很小很零碎的時間。但空出時間不代表就會成功，還需要列出要執行的待辦清單，並依照重要程度將這些任務安排在空出的時間內，否則我們單純就只是把時間空出來繼續滑抖音而已。
不知道大家有沒有看過一個短片，教授分別把高爾夫球、碎石、沙粒以及啤酒分別到入罐子內，並在每放入一個東西時，問學生裝滿了沒。這些內容物就是代表任務，而高爾夫球就是清單上最重要的任務，試想如果先放入了沙粒以及碎石，哪還有沒有空間放高爾夫球呢？所以當整理出可利用的時間後，應該優先把清單上的高爾夫球放入時間內，再接著放入碎石即沙粒，才有辦法確保最重要的事情一定會優先完成，而不是都把時間花在瑣碎且不重要的事物上。這邊可能有人會想，那啤酒呢？啤酒則代表，就算生活過得再辛苦，也要停下來喝杯酒休息一下 🤣
因為你不想做，所以變得困難 羅賓・夏瑪說過『不是因為某件事很難，你才不想做，而是因為你不想做，所以變得困難。』
大家應該都有騎腳踏車的經驗，起步時的第一下是最辛苦的，但是在接續第二下之後會發現，第二下所耗費的力氣比第一下小許多，於是便可以更容易的踏下第三、第四下。在學習新事物或是挑戰新計畫也是一樣，我們沒辦法準備到 100% 完美時才開始執行這些事，可以想像不管我們在學生時代、或是在職場上，環境強迫我們踏出第一步接觸新事物，並且在新的環境內遇到各種不同的挑戰，我們會嘗試解決這些問題，過程中當然會遇到挫折或失敗，但同時我們也獲得了更多的經驗，讓自己不斷地強壯。
正常速度沒辦法完成，那就加速吧 回到騎腳踏車的議題，若我們今天的目標是一日雙塔，時速 10 公里跟時速 30 公里所花費的時間一定不同，在學習挑戰任何事物的時候也是如此，但要怎麼做才可以有效的『加速』？
先來談談如何加速，第一點是『不要想太多，先做了再說』，試想當生日時買了新手機，會先打開把玩看看，還是看一頁一頁的說明書呢？想必不會是打開說明書，一定是先開機玩玩看。如果把手機換成學習程式語言 Python 呢？可能就會開始去研讀他的官方文件，不是說讀文件不好，從零開始一定要會一些基本的東西，但當這些東西都學會之後，應該要開始自己寫看看，體驗一下這個程式語言到底該怎麼撰寫，如果不這樣，永遠不會知道自己遇到什麼問題，一定是執行一段程式碼後後發現了 bug 才會知道遇到了什麼問題並尋求解決方案。
第二點就是『不要停，一直堅持下去』，當決定開始學寫 Python ，已經安裝好 Python 、載好了開發工具，並成功的將『Hello World!!』給印出來時，最困難的第一步已經完成了，剩下的就是如何堅持下去，可以自己定一個目標讓計畫堅持下去，可能是要用 Python 的框架建造一個電商網站，那就可以朝著這個目標邁進，隨著不斷執行計畫，技能會越來越熟練，速度自然會越來越快。
最後就是給自己一個『deadline』吧。有了期限限制，便能發揮『臨陣磨槍』的狂熱，期限是讓人『加速』的必要條件，因為以正常速度並沒有辦法完成事情，那叫讓他加速讓他有可能成功。
讀後心得 這本書與其說是方法書，我覺得更像是作者的經歷分享，從決定申請哈佛研究所到學成歸國，這段經歷中所遇到各種挑戰時的心境，以及最後如何解決這些問題，最後如願取得哈佛的碩士。我想這比『成功的人都比你更努力』這句話更貼近我們，在讀完這本書後不禁會思考，這位三個小孩的母親，並不是富二代，也沒嫁入豪門，完全靠著他自己對於『哈佛』的憧憬，努力的完成了他的夢想，那我們還有什麼理由原地踏步。或許我們真的被生活壓得喘不過氣，想要停下腳步休息，我認為這沒有不對，但在休息過後還是要跨步向前，開始人生的下個旅程，若是一直停滯不前，也只能落入我們認為不美滿的無限迴圈內而已。最後，用羅賓・夏瑪的這段話來讓自己動起來吧！
『不是因為某件事很難，你才不想做，而是因為你不想做，所以變得困難。』</description>
    </item>
    
    <item>
      <title>FTX 慘劇，論去中心化的重要性，錢要放哪才是你的錢？</title>
      <link>https://ianlifelab.com/post/technology/blockchain/ftx-is-gone/</link>
      <pubDate>Mon, 14 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/post/technology/blockchain/ftx-is-gone/</guid>
      <description>在 2022/05 發生 Luna 崩跌事件後，當大家還覺得為什麼最近市場的波動這麼小時，全球第二大加密貨幣交易所 FTX 在上週給了大家一個驚喜，因為被爆私自挪用用戶資金，導致交易所內發生了擠兌潮，以至於 FTX 不堪負荷，不但暫停用戶提領，更在一週內宣告破產，讓許多來不及逃難的用戶資金卡在 FTX 內沒辦法拿出來。
（ 還錢～～～
FTX 相關事件的文章或分析相信在網路上搜個關鍵字都可以找到很多資訊在這就不多加敘述，而本篇要來探討的並非 FTX 倒閉，而是身在加密貨幣的世界裡，要如何選擇存放資產的位置，才不會風險發生時被當成韭菜收割。
選擇大到不會倒的交易所？ 大家在一開始接觸加密貨幣時，應該都會聽到『選一間你信任且大到不會倒的交易所，就可以開始把錢放進去買虛擬貨幣了』，相較於一些名不見經傳的交易所，世界排行前幾名的交易所的確安全許多，但 FTX 卻給了我們一個重擊，全球第二大的交易所不到一週就宣布破產，相信在 SBF 與 CZ 隔空交火時，大部分的人應該還沒想到會是這個結果。
區塊鏈的精神 - 去中心化 交易所倒閉跟去中心化又有什麼關係呢？想必有接觸過區塊鏈都聽過『去中心化』一詞，那這又代表著什麼呢？在 Web2.0 的世界裡，科技巨頭 Facebook, Google 掌握著用戶的所有資料以及生殺大權，今天只要他們認為你不合乎平台規範，他們便可以將你封鎖（想想之前川普的 twitter）；而傳統金融也是，錢讓私有銀行管理，如果銀行營運出了什麼問題導致沒辦法領出現金，那你在銀行的錢錢就只是一串數字罷了（比如說前陣子中國四大銀行無法提領現金的狀況）。而區塊鏈的其中一個精神，就是不希望有一個集團或是一個機構來『操控』這一切，你的資產讓你自己保管，鏈上一切皆由參與者來共同決定這件事。
講到這有沒有覺得，都已經投入了一個『去中心化』的世界了，卻還相信著『中心化』的機構，是不是有種矛盾的感覺？？🤣
『被管理』的資產 加密貨幣的地址是以持有的註記詞經由一連串的協議及演算法導出的一串英數字，而註記詞會交由交易保管並不會提供給用戶，用戶只會獲得每個加密貨幣的地址，提供給別人接收加密貨幣。而當要發送交易時，需要發送『申請』，等交易所同意這筆交易，用戶才能將交易發送到區塊鏈上。從頭到尾的操作，都需要經過『交易所』的同意（除了存錢以外），雖然看起來是自己決定自己的資產要做什麼，但其實所有的一切都是由交易所決定，而不是自己，哪天交易所駁回你的請求，那我們也沒辦法用其他方式拯救自己的資產。
Not Your Keys, Not Your Asset 什麼是 Key？區塊鏈的每一筆交易都需要用 private key 簽署後得到一個 signature，並將這個 signature 連同交易發送到區塊鏈上驗證。而這個 key 也是由註記詞依照一串協議及演算法推導而成。剛剛提到在交易所發送一筆交易時都需『被同意』，同意後交易所會發送一筆用『我們的 key』簽署出來的簽章及交易到鏈上，當然他也可以不同意，這樣我們就沒辦法操控自己的資產。
而這把 Key 除了放在交易所內，也可以放在加密貨幣錢包中。只要持有錢包，所有的交易都不再需要被同意，任何交易行為都掌控在自己的手上。也就是說，我們有 100% 掌控錢包內資產的權力，就算有第二個 FTX 不給用戶提領也跟我們沒有關係，因為我們的 Key 在自己的手上不需要遷就其他團體或機構。
究竟是加密貨幣不安全，還是對產業不了解？ 最後回到 FTX 事件，個人認為如果把 FTX 事件的原因歸咎於『加密貨幣就是不安全』的話，就不太合情理，畢竟中心化的機構，本來就伴隨著『人』這個最大的風險，十年夫妻也可能被戴綠帽，何況是一間交易所。不過這不代表不能把錢存在交易所內，只是做任何決定時需要知道其伴隨的風險，當風險發生時伴隨的傷害會不會影響到自己的生活甚至周遭的人，評估之下若是可以負擔的狀況，再來做這件事，不然如果心臟太小顆的話，還是把錢放在錢包內吧。</description>
    </item>
    
    <item>
      <title>行為上癮，短影片是如何綁架你的時間</title>
      <link>https://ianlifelab.com/read/behavioural-addiction/</link>
      <pubDate>Wed, 27 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/read/behavioural-addiction/</guid>
      <description>相信大家都有一種經驗，每當下定決心要發奮學習時，手機拿起來滑個影片，不知不覺就到睡覺時間了，不但該做的事沒有做，還浪費了一個晚上，明明知道不行，但身體卻很誠實的一部部影片看下去。 到底短影片是怎樣綁架我們的時間呢？
1. 意志力不足才會沈迷於某些事物？ 毒癮、賭癮是最常見到行為上癮的事務，不管哪個，都會讓人甚至家庭造成巨大的危害。但你以為沒吸毒賭博，就不會成癮了嗎？ 遊戲、社群是這個世代另種讓人成癮的事物，在科技發達的現代，各種 app、廣告、媒體、遊戲都在爭奪人們的眼球，只要有辦法讓人停留一秒，那就有機會觸發上癮的行為。 比如說，明明沒事卻一直重新整理 IG 頁面，抖音影片都看完了，還是不斷重看等。
明明我們知道不能一直這樣下去，但還是會不由自主的花時間成癮在這些事物上，是為什麼？可能有人會說『一定是他們意志力不足。』 但真的是這樣嗎？曾經有一個測試意志力實驗的案例是這樣：
實驗兩組學生進行一個無解的數學題考試，並要求兩組學生在解題前要空腹，分別安排在裝滿餅乾以及胡蘿蔔的房間， 一組要求只能吃餅乾，另一組只能吃胡蘿蔔，相較於餅乾組，胡蘿蔔組的學生需要驅動意志力才可以抵抗餅乾的誘惑。 隨後兩組學生在分別去進行無解的數學題考試，餅乾組堅持的時間是胡蘿蔔組的兩倍。 就結果來看，胡蘿蔔組的學生，縱使他們很有意志力的讓自己不吃，但最後的數學題卻沒能堅持太久就放棄了。 很顯然，意志力是很難持續驅動的，就像是肌肉一樣，當人一直使用肌肉的力量到筋疲力盡時，肌肉變無法再提供力量作其他的活動。 所以意志力並非一項技能，他更像一種會消耗的力量。
2. 是什麼讓我們行為上癮？ 既然我們沒辦法一直驅動意志力，那究竟是什麼因素導致了人們會沈迷於某些事物呢？ 人的行為模式，好比一個個演算法的組成，當然依照不同的類型還是有些微的差異，但大致上可以分成三個階段：動機、能力以及觸發條件。
動機 在做每一件事之前，我們都會思考為什麼要做這件事，好比說工作一天身心非常的疲憊，所以拿出手機想看個短影片舒壓一下，『想要舒壓』就是動機。
能力 當感覺想要拿出手機時，往口袋一伸就拿到了，代表著很簡單就可以做到這件事，『口袋拿手機』就是能力，那是否有其他因素會影響呢？ 當然會，比方說下班正在等公車，當天又下雨，一手提著公事包一手撐著雨傘，就沒辦法做『拿手機』這個動作，也就是沒能力做這個動作，那就沒辦法完成這件事。
觸發條件 有了動機、有了能力，那要如何『觸發』這個行為，那就是剛剛提到的，『感到疲憊』這件事。只要感到疲憊，就會想要舒壓，那便會去尋找手機在哪，如此一來『看短影片』這個行為就產生了。
所以，當動機 (Motivation)、能力 (Ability) 以及觸發 (Trigger) 三個元素都存在時，那行為 (Behavior) 就會被啟動。
B = MAT 當然，觸發行為有很多種，例如當今天我發表了一篇文章，發現我的朋友有給我點讚，那下次看到他的貼文，我也會反射性地也給他點讚，這就是個體觸發內的互惠行為。
3. 登入就送大禮包，讓『入坑』變得很簡單 『登入七天就送魔關羽』，這句話在電視或是廣告上出現的頻率非常的高，科技發達的現代，交友軟體、遊戲等 App 不斷推陳出新，為了短時間內累積用戶，送禮物給第一次下載的用戶已經不足為奇了。 相較於遊戲一開始就要求玩家課金，直接送一個 SS 及英雄，讓玩家體驗 SS 級英雄在各方面素質都遠比其他英雄來的優異時，玩家自然會對高級英雄產生興趣，為了玩得更舒服，自然會不由自主的課金買英雄。
除了登入送禮包以外，免費開盲盒也是一種簡單入坑的方式。只要贏得遊戲勝利就會贈送一個銀寶箱，銀寶箱需要花費三個小時才能打開，此外也有一定的機率會獲得金寶箱，而金寶箱就需要等八小時，當然也可以去商城選擇是否要購買鑽石。 當玩家開到高級卡片後，便會開始期待下個寶箱會開出什麼卡片，這也促使了部分玩家會進入商城購買鑽石來開寶箱，滿足當下的慾望。
這些看似免費送福利的行為，其實都是新設計的一套流程，先讓用戶『使用』這個產品，接著慢慢的讓用戶離不開，最後引導他們在產品內消費，這稱作『登門檻效應』。
一批實驗人員在一個社區做實驗，要求一些住戶在自家窗戶掛一個小招牌，一段時間後再掛一個更大更醜的招牌， 有五成的住戶同意更換招牌。而如果直接要求掛又大又醜的招牌，成功率僅兩成。 4. 未完待續，讓你一部一部的看下去 讓人沈迷的可不是只有短影片，追劇也是很容易成癮的事。許多人應該都有類似的經驗，『這部劇還沒出完，等他出完在一次看完』， 原因是，每次影集都會在最精彩的部分突然『下集待續』，需要經過漫長的等待，才有辦法看到下集，不但覺得時間過的漫長，還要負擔內心對影集好奇心的煎熬。 比方說宮鬥劇看得正精彩，太后要把女主角小宮女殺了的時候，突然一個聲音出現『且慢』，接著『下集待續』的畫面出現，這不禁會讓人心頭養，覺得怎麼會在這邊停住？
同樣的理論用在電影的預告片也是一樣，前幾集是個正派突然在這集變成大魔王、男主開車跌落懸崖不知道有沒有獲救等，不管是，其實這些東西就是觀眾的『認知缺口』。 因為產生了『缺口』，所以想要快點填補，自然而然就會一集一集、一部一部的看下去。
5. 擺脫上癮，相反習慣治療法 擺脫行為上癮，不外乎就是遠離環境，制定明確的目標等方法，但書中提供了一個滿有趣的方法叫『替換習慣』，習慣要如何替換呢？
比方說，有個小女孩有咬指甲的習慣，他非常討厭這個行為，但覺又控制不了自己，導致指甲凹凸不平不好看。 他也試著靠意志力來告訴自己不要做這件事，但最後都是以失敗告終，最後只好求助於心理醫師。
心理醫師幫他歸納出了以下幾點原因：</description>
    </item>
    
    <item>
      <title>幣圈黑天鵝，前十大公鏈 Terra 如何從月球殞落</title>
      <link>https://ianlifelab.com/post/technology/blockchain/blockchain-black-swan-terra/</link>
      <pubDate>Thu, 12 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/post/technology/blockchain/blockchain-black-swan-terra/</guid>
      <description>一個星期前，Terra 還是市值前十的加密貨幣，其中包含近期最熱門的 Defi 項目 Anchor 也是大家趨之若鶩投資的項目之一， 甚至有很多投資人把大部分資產兌換成 UST 放到 Anchor 內。 但短短的一週 Luna 的價格卻從 80 跌到0.00001 美金，Anchor 中的 UST 資金也大量的撤離， 這中間與 UST 脫鉤有著莫大的關係，一個大家都以為會成功的項目是如何在短時間內跌落谷底， 自身參與了這個幣圈的重大事件 (韭菜？)，想說來紀錄一下。
Terra 的模型 Terra 是一個擁有雙主鏈幣的區塊鏈，包含其算法穩定幣 Terra 及治理代幣 Luna，而 UST 為算法穩定幣 Terra 的一種。 由於 UST 並不像 USDC 有美元資產儲備抵押，需要依靠演算法及市場支撐與美金的掛鉤。
所以當 UST 價格高於一美元時，代表供不應求，這時便會燃燒 Luna 並鑄造 UST，讓價格回穩到一美元， 而這中間也因為 Luna 的總量變小，進而提高了 Luna 的價格。
反之，若 UST 低於一美元時，代表供過於求，這時則會燃燒 UST 去鑄造 Luna，也因為這樣 UST 的總量變小，可以讓價格回穩至一美元， 而當 UST 價格回穩後，因為 Luna 便多，所以導致 Lune 的價格下降。
這看似很合理的邏輯，似乎必須建立在市場對 Terra 有信心的情況下，Terra 才可以穩定的生存， 這也讓 Terra 埋下了一個落入死亡螺旋的不安定因素。</description>
    </item>
    
    <item>
      <title>畫 Wireframe 目的是什麼？</title>
      <link>https://ianlifelab.com/post/product/product/pm101-wireframe/</link>
      <pubDate>Mon, 02 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/post/product/product/pm101-wireframe/</guid>
      <description>最近畫 Wireframe 的頻率有點高，也畫出了一些心得，中間也有遇到一些問題，剛好分享紀錄一下。
什麼是 Wireframe 基本的 Wireframe 是一種低保真的設計原型，頁面上面沒有華麗的設計元素，只有匡線、文字資訊、架構排版等。 在一個新的需求出現時，會有非常多的不確定性，需要先確定產品要呈現什麼資訊給用戶、使用旅程是什麼、可能遇到什麼問題、我們想解決什麼問題等， 都需要考慮進去，所以若是太快進入 UI 設計，如果架構或是流程等部分需要做更改，可能會造成過多的資源消耗。
畫 Wireframe 目的是什麼？ 我認為 Wireframe 階段主要考慮以下兩個部分：
傳遞資訊 使用者流程 以下會拿會員系統內新增訂單功能來做範例：
傳遞資訊 畫面上要呈現什麼類型的資訊給用戶，必須在 Wireframe 階段就決定， 使用適當的文字幫助用戶理解情境，讓用戶可以很簡單的知道新功能的價值是什麼。
比方說，電商會員系統中新增了查詢訂單的功能，用戶在登入會員後會希望去看自己的訂單狀況， 或許在會員頁面上用一段文字提醒目前訂單狀況，讓用戶在一進到會員頁面時就知道自己的訂單現在的狀況。
使用者流程 接續上述的情境，當用戶看到自己訂單狀況時，要怎麼樣引導他去看到自己的訂單。 可以在文字附上超連結導去訂單頁面，也可以在畫面上新增『我的訂單』的分頁，讓用戶可以用最短時間內找到自己的訂單， 這些都是我們希望用戶去看到訂單的方式。
所以 Wireframe 除了傳達資訊以外，使用者流程也是很重要的一環，用戶看到關鍵訊息後，可以很簡單的使用新功能。
Wireframe 常見的錯誤 第一次畫 Wireframe 的人很有可能落入『濫用視覺元素』這個錯誤，畫著畫著就會開始想頁面的顏色要怎樣呈現比較好按鈕形狀長怎樣， 要放什麼 icon 在畫面上，在顯示圖片的地方要放哪張圖等。 但這些東西並不是在 Wireframe 階段該專注的事情，上面有提到 Wireframe 專注於傳遞資訊，包含資訊架構、流程等等， 而不是設計，所以用最簡單基本的方式呈現，剩下精緻的設計就讓設計師煩惱吧。
以下幾個是我從零開始畫 Wireframe 時會注意的幾點：
只用灰白色，專注於架構的呈現 單一字體，專注於傳達資訊 只用 3, 4 種字級 不用照片或插圖，用方框框代替 不用強烈風格的 icon 或裝飾圖 另一個情況是，產品已經很成熟，在 Wireframe 階段會拿既有的畫面去改，這時要注意的點便是每個畫面或是元件所使用的場景是什麼。 以電商來說，買家的訂單元件以及賣家的訂單元件可能就長得不一樣，這時如果混用的話，由於已經算是高保真的設計， 這時一同討論的工程師或是設計師可能會因為精緻的畫面，而跳過『討論資訊架構』的階段，開始思考畫面的問題。 所以當使用既有的畫面去做 Wireframe 時要注意使用的元件要正確，不能混用，導致誤會。</description>
    </item>
    
    <item>
      <title>給予 - 施比受更有福，給予的力量</title>
      <link>https://ianlifelab.com/read/give-and-take/</link>
      <pubDate>Tue, 26 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/read/give-and-take/</guid>
      <description>1. 誰在金字塔的頂端？ 給予、索取、互利是三種人際的互動模式，在生活、職場上，每個人都可能扮演不同的角色，與不同對象互動時會採取不同的互動模式。 比方說，在求職談薪水時會展寫出索取者的姿態，但在指導新人的時候又會變成給予者的模式。
那以職場來講，誰在金字塔的底部，而又是誰在頂層呢？你可能會猜在金字塔底部的應該是給予者，因為給予者喜歡給予，但也是因為這一點，在給予的過程中給予者可能會犧牲自己的權益。
加州有份調查報告是有關於工程師在工作上的生產力以及效率，統計發現表現最差的工程師確實是給予比索取多的人，這些人為了幫助別人付出更多心力，但也無法好好的完成工作。 那頂層是索取者還是互利者呢？在同一份調查結果顯示，生產力最高的一樣式給予者，工作成果評分最高的工程師一直樂於貢獻。 當然這種現象不只出現在工程師，同樣也有一份調查是針對業務員，結果就如同工程師的統計一樣，不管是表現最差還是最好的，都是給予者。
那為何在金字塔的頂端以及底部都是給予者呢？
2. 影響力真空，頂與底的給予者 大家普遍會認為，過多的給予只會造成自己的困擾，但是其實許多成功者本質上也喜歡給予，頂端與底部的給予者本質上的差異又是什麼呢？ 底層的給予者屬於『無私奉獻型』給予者，他們重視他人的利益，但卻過度忽視自己的利益，把時間和精力花在奉獻上，而不顧自己的需求。 頂端的給予者屬於『利人利己型』給予者，他們關注於他人利益的同時，也重視著自己的利益。 可能多數人會認為『利己』以及『利人』在光譜的兩邊，而這是否也更像互利者？
書中提到的電訪員的故事，該部門的電訪員需要打給畢業校友募款，其中給予型的電訪員業績普通，甚至稱不上好，但索取型的電訪員業績則是給予型的好幾倍。 索取型的電訪員在這個部門的薪水是最高的，這也是他的動力之一，也是他們的『獎勵』。但給予型電訪員想要的獎勵卻不是錢，他更在意自己可以有什麼貢獻。 電訪員所募來的資金大多數會作為大學生的獎學金，這筆獎學金可以幫助到不少的學生完成學業。當給予型電訪員知道這個原因後，只花了一週業績就追上了索取型電訪員。
給予者『利己』的目標較於互利者以及索取者不太一樣，他們更在意自己做的事是否可以幫助到他人。 當自己所做的事可以對他人產生價值時，給予者的成就往往會高出另外兩者許多，如果沒有，就會在底層打滾，這種現在稱作『影響力真空』。
3. 如何找到人才 世界上一些有名的網球選手，第一個網球教練並不是超強的教練，但這些教練大多都很會帶小朋友，他們提供了孩子動力，讓他們對網球產生興趣，願意花時間去練習。
給予者擔任領導及教導的角色時，能力並不是他們考量的第一要點，他們認為每個人都有『潛力』。 這些選手的教練，會特別關照他們，並不是因為他們天賦異稟，而是因為他們有過於常人的決心、肯努力。 心理學家把這種特質稱作韌性 (grit)：對長程目標有熱情及毅力。
但這並不代表天賦不重要，只是當有一群能力都過門檻的人，韌性就會成為指標，能預測這些人發揮潛力的程度，這也是為什麼對於給予者來說，栽培有韌性的人 CP 值最高的原因。
在職場上同理，給予型的主管會提攜後輩，他認為人人都是『潛力股』，並且他也不會畏懼能力出眾的下屬，因為給予者的目標並不是個人的成就，而是大家的成就。 但索取者就不一樣了，索取者會預設立場，懷疑別人立意不良，若遇到有潛力的人會視為威脅，不願支持與栽培，較少扮演扶植者。 而互利者是只要發現有潛力，就會給予支持，但這相對也是缺點，因為互利者通常都看到指標才會行動，不願意冒險，這也讓他們有可能錯失有潛力的人才。
4. 給予的力量，團隊分享 給予的力量到底有多大？
試想自己在職場上，提出了一個創新的方案，主管在跟老闆提案時說『這是我花一個月想出來的方案』以及『這是 XXX 提出，並經由團隊共同討論得出的方案』 哪個更願意讓人繼續追隨。
一個團隊的成功，團隊裡的給予者，並不會去搶功勞，因為他希望整個團隊都一起成功。 而索取者則會認為，功勞都是自己的，別人只是幫他抬轎而已，他不願意分享成果。 雖然『搶功勞』對於索取者來說並不影響他的成就，但『分享成果』這件事卻會促使給予者的成功。 因為這對於給予者來說，分享的當下可能會損失一些收入或名氣，但把時間拉長，相較於索取者，大家更願意主動推薦給予者，跟他一起合作， 而互利者也只會想要獎勵給予者，懲罰索取者。
5. 給予者如何避免成為別人的『墊腳石』 給予者在某種程度上還是會成為索取者的『墊腳石』，索取者可能會假扮成給予者，讓給予者認為好像遇到志同道合的人，但其實只是想要利用給予者而已。 大家可能會認為『這個人感覺還不錯』他就是給予者；『這個人相處起來不舒服』他一定是索取者。 一開始認識朋友，當他對你冷淡，會以為對方不在乎我們，因為我們對他沒有利益，所以他是索取者。 但在生活上也可能遇到『討人喜歡的給予者』，所以『討人喜歡』與否，只是一個印象，並不能代表索取者或給予者。
如何分辨真假給予者？『真程度篩選』是給予者分辯索取者及互利者的一個方法，給予者相較於其他兩類人更有辦法分辨出誰是索取者及互利者。 因為給予者比較會注意他人的行爲舉止，也比較能了解別人的思緒和感覺，因此更能察覺出一些線索。 第二點就是，他們很容易信任別人，可能有時會被索取者背刺，但也可能因為自己的付出獲得超值的回報。 時間一長，給予者對於每個人之間的差異就會更敏感，便不會落入『討喜』或『不討喜』的選擇題內。
給予者在可以分辨真假給予者後，便會依照對方的類型改變自己的互動方式，書中稱此行為叫做『寬容版的以牙還牙』。 賽局理論中的以牙還牙的策略，是典型的互利做法。也就是一開始先配合對方的做法，當對方開始競爭後，才開始改採競爭做法，但缺點則是對於偶發事件不夠寬容。 而寬容版的以牙還牙則是開始一樣採配合做法，當對方開始競爭後，才開始改採競爭做法，但也不是每次都與其競爭，2/3 採競爭做法，其餘則是選擇寬恕配合。 這對於給予者來說是一個彈性，遇到索取者時給予者有辦法與他來回互動，不在是單方面給予。
讀後心得 在社會上打滾幾年後來看『給予』這本書特別有感觸，社會上形形色色的人都有，如何找到正確的人，與不同類型的人合作，一直都是重要的課題。 職涯一路走來也受到不少人的幫助，自己也會想究竟為何有人就是未將手伸出來幫助別人，救自己都來不及了何況救別人？XD 但也許也是因為這樣，現在每當看到一些有需要的人時，就會想到以前自己是如何受人幫助，便會不自主地伸出手。 並不是說自己有多偉大，但或許這些舉動可以讓這些人找到自己的路，就像當年的我一樣。 在書中也看到了，要真的居上位，不一定要踩著別人往上爬，做的『利人利己的給予者』一樣可以走到高處。</description>
    </item>
    
    <item>
      <title>什麼是 Blockchain Bridges，運作原理是什麼?</title>
      <link>https://ianlifelab.com/post/technology/blockchain/blockchain-bridge/</link>
      <pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/post/technology/blockchain/blockchain-bridge/</guid>
      <description>區塊鏈技術在近幾年來成長非常的快速，最早的 Bitcoin、Ethereum 到 Binance Chain 、 Polygon 、 Solana 等，每條鏈上都有各自的治理模式、協議、規則，甚至是 Defi、NFT、DAO 等多元化的應用也相繼出現。
儘管近幾年出現的這麼多元的應用，但這些終究只能存在於單一條區塊鏈上，並沒有辦法與其他的區塊鏈互動，也就是說鏈與鏈之間並沒有互相操作性。每一條區塊鏈，就好比一座小島，試想在台灣的 Ian 想要跟在日本的 Justin 溝通訊息，該如何做到呢？現在的社會可以經由通訊軟體或是社群軟體，直接將訊息傳遞出去，也就是所謂 Web 2.0 的應用，同理，比特幣想要到以太坊上做應用，以現在的狀況來說，只有中心化交易所（還不能經由去中心化交易所 Dex）換成以太幣或是 ERC-20 token 才有辦法做到這件事。但若這樣操作手上便不在持有比特幣，這也跟當初想要以『比特幣在以太坊上做應用』的想法有所差異。
什麼是 Bridges，運作原理是什麼？ 先來講講什麼是 Blockchain Bridge ，它是以什麼方式來解決互相操作性的問題。Bridge 允許兩條不同規則、不同協議的區塊鏈將他們的數據、代幣互相傳遞。以上述的例子來講，可以不經由交易所得換幣服務，直接再以太坊上使用自己持有的比特幣。
在你希望將自己的一部分比特幣轉移到以太坊上時， Blockchain Bridge 會先將你比特幣鎖在所使用的 Bridge 上，並在以太坊上建立等同價值的比特幣代幣（稱作 wBTC），此時便可以使用 wBTC 去操作以太坊上的 Dapp 。相反，當你認為不需要繼續在以太坊上，想要換回比特幣時，只需要做反向的行為，以太坊上的 wBTC 會被燒毀，而同等價值的比特幣則會回到你的手上。但必須注意的是，若用 Bridge 將 10 BTC 換成 10 wBTC，換回時卻只有 9 wBTC 的話，也只能取得 9 BTC。
簡單來說，經由 Bridge 是將你的加密貨幣『複製』一份到別條鏈上，讓他符合另一條鏈的規範與協議，可以操作上面的各種應用。
Bridges 種類 Bridges 又分為 One-Way Bridges &amp;amp; Two-Way Bridges，以及 Trust-Based &amp;amp; Trustless Bridges。</description>
    </item>
    
    <item>
      <title>大器可以晚成</title>
      <link>https://ianlifelab.com/read/late-bloomers/</link>
      <pubDate>Tue, 29 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/read/late-bloomers/</guid>
      <description>1. 英雄出少年的時代 現在時常可以看到關於『三十歲以下的傑出青年榜』、『矽谷獨角獸創辦人年紀僅二十多歲』之類的新聞，大多在敘述現在的年輕人有多麼的積極，年紀輕輕就創出了一番名號、甚至改變產業，賺進鉅額的資產。而父母為了讓自己的兒女也可以『英雄出少年』，便讓小孩從小學，甚至幼稚園開始就開始補習，目的就是為了不要讓他們輸在起跑點，可以在年紀輕輕就有一番成就。
這個文化不只影響了父母，學校教育也逐漸偏向這種風氣，比方說，如何用智力測驗篩選出菁英人才；為了讓考生可以進入菁英大學而開設的補習班等等，整個社會彷彿充斥著『你必須要在年輕時就成功，這樣才算一個成功者』的氛圍，但同時也扼殺了年輕人的潛能。為了及早成功，這些人相較以前更為疲憊、脆弱、甚至害怕失敗。為了成功，他們不在願意冒險，只想打著安全牌，這樣看似可以交出一些東西，也不會被檢討。或許這在成績、工作上可以帶來成就，但這並不一定是自己想要過的人生。
2. 創造屬於自己的文化 如同之前講的，社會對於年輕就有成就的人給予了極大的肯定，心理學家稱這類的想法為『規範性思維』。『規範性思維』有幾個缺點，首先大部分的人都認為『多數人的選擇』才是正確的選擇，像是『大家都考大學，所以我也要跟著考大學』一樣。第二個壞處在於，會無止盡的『有害比較』，如哪間大學畢業、薪水多少、職業是什麼等。如果自己沒有遵從這規範性思維，就會被社會排擠、被認為是異類。不過也有成功人士，在年輕時默默無聞，經歷了一番歷練後才有所成就， 如漫威（Marvel）教父史丹．李（Stan Lee）40多歲創立自己的漫畫世界、張忠謀 56 歲創立台積電、肯德基爺爺哈倫德 65 歲才創肯德基。
若當下的自己還沒有，或是沒辦法發揮自己的潛能，或許可以看看現今社會對文化的影響，可能不是你不夠好，只是你被現今的社會文化所束縛了。一定得進 google 才算成功嗎？自己開一間餐館或許是更好的選擇。
3. 學會放棄，探索更多可能 成功的秘訣在於堅忍不拔，克服重重困難。在這個社會，放棄是被忽略的選項甚至是被禁止的事情，但堅持不懈卻幾個問題：
韌性以及意志是一種有限的資源：也就是自我損耗的概念，當你在堅持一件自己沒那麼相信的事，那到最後只會將你的意志力消磨殆盡而已。這就很像去重訓，最多就只能做100公斤四組，但硬要做到第五組，那結果顯而易見（但這不代表意志力可以像肌肉一樣鍛鍊）。
放棄反而有益健康＆常能帶來更好的結果：1970 末期 intel 因為日韓進入了記憶體市場而開始跟他們薛假競爭，這是 intel 決定要放棄記憶體市場，將未來賭在微處理器上，以現在看來這是個成功的決定，但當初並不是這麼順利，如果 intel 沒有放棄記憶體市場，現在的微處理器大廠可能就換人了。所以放棄並非失敗，放棄只是為了尋找更適合的方向。
4. 成長的太慢？那就尋找更好的花盆 相信大家都聽過『螃蟹心理』，當一隻螃蟹想要往上爬時，其他螃蟹會將他往下拉。有時自己想要往上爬，便會感到同溫層會將自己往下拉的力量，就如同螃蟹一樣。 不過為了自己可以有更好的發展，必須要找到適合的地方，就像每種植栽都適合不同的栽種方式，必須要找到適合的花盆，才有可能長的美麗。
但不是說毫無計畫的更換，如果想要去國外工作，離職去當外送員似乎助力不大，或許去外商公司上班磨練，會是更好的選擇。所以在選擇花盆時，應該考慮自己的目標是否與花盆契合，轉換後是否可以讓自己更專心、認真、更全心投入，讓整體表現都比現在狀況更好。轉換的過程中也會有阻力，不管是環境或是自己，畢竟改變是痛苦的，為何我不好好待在舒適圈？不過我們應該時刻的問自己『我是不是待在最能讓我發光發熱的花盆內？』這才是最重要的事。
5. 成功沒有期限 在資訊爆發的年代，很多團體或是公司橫空出世，大家所認為的『一夕爆紅』、『一夜至富』的背後，其實是十幾年、甚至二三十年的堅持，才能活得的結果。諸多大器晚成的人都表示，只要找到屬於自己的花盆，就要努力堅持下去。
讀後心得 在這網路發達的時代，社群媒體、新聞上充斥著各種的年輕創業家，短短幾年內把自己的產品打造成獨角獸的故事。讓社會漸漸的覺得『如果沒有年紀輕輕有一番作為，那一定沒辦法成功』。當然這個觀念也深深影響到了我，曾經的我也認爲需要在年輕時有一番作為，不管年薪達到一個門檻，或是當上某間公司的主管，就是一個成功者。這也讓我在追逐著這『自以為的成功』的過程中付出了不小的代價。
這本書説是為大器晚成的人抱不平，但其實我認為他想傳遞的思想是『跳脫社會主流的價值觀，活出自己想要的樣子』。或許每個人都要思考一下，自己有限的人生中，想要成為什麼樣子的人？社會定義的文化並非適用於每個人，也不是一個必須遵守的法則。耐心尋找屬於自己的路，走出自己的人生才是最重要的。</description>
    </item>
    
    <item>
      <title>可複製的領導力：樊登的九堂商業課</title>
      <link>https://ianlifelab.com/read/reproducible-leadership/</link>
      <pubDate>Mon, 24 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/read/reproducible-leadership/</guid>
      <description>管理者的定位是什麼？ 管理者的任務是打造有戰鬥力團隊，而不是什麼事都親力親為，一個能力好管理者，除了帶領團隊達成目標以外，同時也能培養出有能力的人才。
透過別人完成任務 當從一名職員升職成一名管理者，所需承擔的責任也從『完成被交付的任務』變為『讓團隊完成任務』。 就算曾經是一名超級員工，也不太可能一個人囊括所有的任務，所以如何讓『透過別人完成任務』就是管理者很重要的課題。
給部屬嘗試錯誤的空間 要培養一個健康且強大的團隊，就必須激發員工的各種潛能。這過程中不可避免會有些錯誤，經歷了這些錯誤才可以不斷地成長。
船長的責任 團隊好比一艘船，每個船員在這艘船上都有各自的任務該做。一艘小船，船長可以自己執行所有任務來駕駛這艘船， 但若是一艘大船，船長的任務就不在是駕駛船隻，而是需要掌握船的方向、速度以及安全。 管理者同理，隨著團隊的擴張，管理者需要奠定策略，組織員工達成任務。
用目標管理，降低主觀影響 在團隊中，我們需要讓員工知道，到底公司或團隊想要做到什麼事？目標是什麼？究竟為了什麼而努力？ 而目標管理與目標一樣重要，目標管理會因為團隊中各層級的不同，對於各自任務的目標設置也會有所不同。
用目標管理也可以屏除管理者的主觀意識，可以很客觀的評斷每一位員工是否有達到各自設置的目標。 同時管理者也要思考，給予員工的目標是否合理、明確、可量化。
可參考此篇SMART法則，讓目標變得更容易
溝通視窗的四個象限 溝通視窗，也稱周哈里窗，是一種溝通的技巧與理論。其中又分為以下四個象限：
隱私窗格：正面溝通，避免誤解 顧名思義，隱私就是隱僻、不公開的私事。但在隱私窗格內，分為三個階層，從不能公開到部分公開，
第一層：不能說 又稱為『 Deep Dark Secret 』，每個人都有 DDS ，但如果一個人有過多的 DDS，則會承受龐大的精神壓力。 在日常生活中，不打聽別人的隱私，給予對方一些空間，這是基本禮儀。 但在工作中，沒有必要有太多 DDS，不然會讓人整天活在焦慮與壓力之下。
第二層：不好意思說 有時在工作上，員工犯錯時，本來應該給予嚴厲的懲罰，但當員工一臉緊張的到你面前時，當下又會動了惻隱之心。 這在職場上很常見，因為管理者『不好意思說』，該被糾正的問題沒有被糾正，下一次造成更嚴重的問題。
第三層：忘了說 『忘了說』比不好意思說更嚴重，『忘了說』指的是，管理者誤以為大家都應該知道這些是，不需要再多講，但這往往是管理者的一廂情願。 這是團隊中最應該被重視的一點，又被稱『知識的詛咒』。
知識的詛咒：當我們對某件事非常了解，腦中存有非常多的專業知識時，就會轉換表達方式， 以致說出來的東西，別人聽不懂或是難以理解，自己卻以為已經說得很明確了。 如何破解知識的詛咒 知識的詛咒，是行銷中很重要的改念，可以看看這一篇 舒利茲啤酒的由來 ，了解行銷大師霍普金斯如何破解知識的詛咒，讓舒利茲大賣。
盲點窗格：利用回饋，看到自身侷限 盲點窗格，就是自己不知道，但別人知道的部分。盲點窗格有點類似汽車的視覺死角，所以需要後照鏡來輔助，試想如果開車或停車時， 後照鏡被拔掉了，駕駛沒辦法經由後照鏡看到視線死角，是否整個過程都會一路上都會感到焦慮？ 就如同自身的盲點窗格，若是越大，自己則會覺得越危險。
如何改善盲點窗格 若有人願意提出自己的缺點時，先想想是否確實擁有這個問題，以及是否為盲點窗格。 投訴以及回饋的機制也是可以讓自己知道自身盲點窗格的方法之一。
潛能窗格：不要輕視每一名員工的潛能 每個員工都有巨大的潛能，作為管理者，應該要克服自己的主觀偏見，以一個標準化的流程，讓每個員工有公平競爭的機會。 其中管理者也比需思考以下兩件事：
是否充分調動了員工的積極性？ 是否為員工能力的提升提供了好的規劃與培訓？ 公開窗格：讓員工尊重你，而不是懼怕你 大家都知道的資訊，如姓名、性別等，這都屬於公開窗格的資訊。它的好處的就具有社會影響力，讓人們產生信任感，如明星代言產品。 但壞處則是少了隱私，需要時刻預防偷拍、防止負面新聞流出等。
帶領團隊與公開窗格的關係又是如何？職涯的進展，就是擴大公開窗格的過程。在剛出社會時，因為經驗不足、認識的人少，所以公開窗格的內容也少。 但隨著工作上經驗增加，認識了同事、業務，甚至帶了一個團隊，公開窗格不斷地擴大，別人對我們的態度也會漸漸產生轉變。 換言之，公開窗格就是自己的成長過程，當一個管理者有足夠大的公開窗格，團隊對於管理者就會產生尊重以及信任。
傾聽 傾聽的要點是聽取對方的訊息，而多數管理者會希望別人認真聽完自己的意見後去執行，卻不善於傾聽員工的意見。 傾聽絕非只是被動等人把話說完，而是一個接受對方資的過成。 善於傾聽的人能夠盡可能接受對方表達出來以及未表達出來的資訊，進而提升雙方溝通的效率，建立彼此的信任。
書中提出了傾聽的一個基本流程：深呼吸、提問、複述。
深呼吸 深呼吸的目的在於穩定自身的情緒，將注意力集中在對方說話這件事上，藉由深呼吸來讓自己的心沈靜下來，專注於陳述的事實而非情緒。</description>
    </item>
    
    <item>
      <title>大人的11堂寫作課 - 複利成長自身的價值</title>
      <link>https://ianlifelab.com/read/11-writing-lesson/</link>
      <pubDate>Sat, 24 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/read/11-writing-lesson/</guid>
      <description>為什麼要寫作？ 寫作可以重複銷售自己的時間 一個人最簡單的商業模式，就是販售時間，比方說：上班就是把自己的時間賣給老闆賺取薪水。 而在這模式中，又可分為三種類型，同一份時間出售一次、重複出售同一份時間、購買他人的時間再出售。 絕大多數的人都是第一種，少部分是第三種。而我們則可以靠自身優化從第一種進化成第二種。
舉個簡單的例子，今天要分享故事，與多人分享的效率一定比只跟一個人講高。 但如果另一群人要聽，又要再講一次，等於要再花一次的時間。 是把演講的內容寫成一篇完整的文章，今天會有人看，明天也會有人看，甚至一年後也會有人看。 但並不需要再花時間做一次演講，這就是將時間重複銷售。
寫的爛才要開始寫 『我覺得我寫的很爛，等進步了我在開始寫』，這是多數人不敢開始寫作的理由。但應該是因為寫的差，所以要從現在開始練習寫。 想想我們在做任何改變或是學習之前，應該都有『我這方面就是比較差，所以要開始練習』的認知，寫作也一樣， 應該是『我覺得我寫不好，所以現在要開始練習寫作』。 所以如何踏出寫作的第一步。就是先認清『自己暫時寫的差』的這個事實。
先寫好一段話 寫作的第一步，並不是寫長篇文章，而是先寫好一段話。比方說從『無限賽局』中學到了什麼事有限思維以及無限思維， 一開始就要寫一篇關於無限思維的文章困難度非常高，但可以先從一段文字開始，試著用幾句話向別人解釋什麼是無限思維。 『原子習慣』一書中提到『最小努力原則』，意思是讓習慣簡單到就算沒意願也會執行，難度越低，執行起來越容易。 比方說，今天看完一部電影，要直接寫出影評太困難，但可以先寫 50~100 字的觀後心得。 持續練習下來會發現，300~400 的文章已經可以輕鬆地寫出來，直到有一天就可以寫出一篇完整的觀後影評。
寫作的核心：輸入、思考、輸出 寫作不外乎就是，想到東西、整理思緒、寫下來。看似簡單的幾個動作，其中卻有不簡單的道理。 例如：
想寫一篇政治的文章，但一個沒看過新聞的人，怎麼寫得出來呢？『輸入』的重要性。 平時常常在看新聞，但只是邊看邊跟著罵政府，那能寫出什麼東西呢？『思考』的重要性。 平時都有看新聞，也有經過獨立思考了，終於拿起筆，但卻不知道要寫什麼，該怎麼辦？『輸出』能力。 接下來接著深入探討如何有效的『輸入』、『思考』、『輸出』。
輸入 要長期且穩定有高品質的輸出，就需要不斷的接收新資訊、新觀點，所以輸入的方法就很重要，可以用以下三種方法來提升我們輸入的能力。
強度：『沒數量就沒品質』，兩人能力相當的情況下，一年讀五百萬字和一年五十萬字的人，寫作能力就會有極大的差距。 標準：『8 星 &amp;gt; 6 星』，寧可多花一些時間去查詢評價，也不要直接去看一部沒什麼重點的爛片（不一定是影集）。 效果：『吸收 &amp;gt; 完成』，完成不是重點，重點是有沒有吸收。比方說同樣是讀書，有的人目標是『讀完』，有的人目標是『將書中的知識運用在工作上』。 思考 必須要將輸入的資訊整理清楚，才有辦法有效的輸出成文字，
追問：不管遇到什麼問題，都要有追根究底的精神。 建立連結：試著將學到的知識互相建立關係。例如：從寫好一句話開始 -&amp;gt; 原子習慣中的『最小努力原則』。 應用：將所學的東西實際應用出來。 輸出 有不斷的輸入、不斷的思考，最後就是如何把素材輸出成一篇文章，作者提供了以下四種方法來練習寫作：
就是寫：就是不會，才要『刻意練習』。如同開頭講的，可以從一段話開始慢慢練習。 學寫故事、觀點：故事及觀點可以讓我們思考文章如何呈現給讀者，讀者才會買單。 建立寫作流程：寫作也是需要流程的，選題、找素材、擬稿、成搞&amp;hellip;等，因人而異。 建立回饋系統：不管做任何事，回饋機制很重要，有回饋才有辦法改進，才能不斷的進步。 五個切入點寫出好文章 主題：對這世界要有點意見 一篇好的文章，主題很重要。作者認為我們應該『對這世界要有點意見』，多發表自己的觀點，用自己的思路去思考每件事。再來主題應該要可以覆蓋多數人群，打到大部分人的痛點，可以參考人生金字塔的五個階層。
題目：抓住眼球 好的題目可以讓讀者一眼看下去，就有『這就是我要找的』感覺。。這裡也可以參考剛剛提到的人生金字塔來擬定題目。 作者認為，好的標題包含三個因素：
你的寫作主題：讓讀者直接了解這篇文章要講的是什麼。 給讀者確定性：讓讀者覺得『我就是要找這篇文章』的感覺 是眼球聚集器：在數個標題內，可以成功吸引到讀者目光的題目。 素材：幫助文章畫龍點睛 自己或是身旁友人的經驗，是最好的素材，因為已經經歷過，並不想網路素材一樣虛幻，說服力也較高。
好的素材不是搜出來，而是搜集出來
結構：好的結構提升完讀率 吸引人的開頭，激發好奇心 讀者一但有了好奇心，就會繼續的往下閱讀文章，所以一個吸引人的開頭，是可以有效提升文章的完讀率。
設計小標題，幫助理解文章 如果長篇文章沒有段落或是小標題，讀者讀起來會覺得很辛苦，適當的設計小標題，不但可以讓讀者先清楚的了解文章的架構，也可以降低閱讀壓力。</description>
    </item>
    
    <item>
      <title>讀懂一本書 - 從讀書到說書</title>
      <link>https://ianlifelab.com/read/understand-a-book/</link>
      <pubDate>Sun, 27 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/read/understand-a-book/</guid>
      <description>在開始讀書之後，讓我開啟了廣大的視野，但如何將書本的東西有效的吸收內化， 甚至可以將書本的內容有效的分享給別人，也是我現階段重要的課題， 如果能有效的『再傳遞』書本內的知識，那也就代表我真的掌握到這本書所想傳遞的精神，真正的『讀懂一本書』。
閱讀是『反脆弱』的武器 什麼是脆弱？就像玻璃杯從桌上掉落，就被摔碎一樣。 相反就是堅固？比方說換成鐵球，就不會與玻璃杯有一樣的下場。 若是再換換成乒乓球，那它掉到地上就會馬上彈起來。
在『反脆弱』一書中，作者認為脆弱的相反不是堅固而是反脆弱，如同乒乓球，不管怎樣用不良、負面的事件去影響，它不僅不會壞，反而會更強大、更優異。 在現實中，脆弱代表著怕變動、怕跳戰、面對突如其來的事件會遭遇損害；而堅固則是面對突如其來的事件，對它來說什麼都不會影響及改變；反脆弱則代表者勇於接受變動、挑戰，越多刺激，那自身能力就會越進步。
為什麼閱讀是反脆弱的武器呢？因為閱讀有兩個特點， 第一點是『主動性』：讀書是主動的學習，我們所讀一定是我們所需要的，這可以彌補自身知識的不足。 第二點是『針對性』：讀書所帶來的收穫因人而異，莎士比亞說『一千個讀者，就會有一千個哈姆雷特』。每個人會因為尋找符合自身個性化的領域吸收加強。
當掌握這兩點，遇到變動或是挑戰時，不會再像玻璃杯一樣一摔就破，而是有辦法去適應這些事件，讓自己越來越強大。
為知識鬆綁，會讀書也要會說書 為什麼會認為閱讀是痛苦的，因為我們認為閱讀的成效不如我們的預期。就像去下定決心要減肥，但發現鏡子裡的自己好像沒有瘦，得不到成就感，最後只好選擇放棄。
說書，是將書本的知識『再傳遞』，如果有辦法有效的講書，那也代表自己可以有效的掌握了這本書。要更有效的說書，在閱讀時我們必須不斷的問自己三個問題：
我能不能準確把握這本書真正的含義，理解這本書？ 我能不能用自己的語言，清楚表達出這本書的真正含義？我的資訊效度和信度如何？ 我表達出來的內容能不能讓沒讀過這本書的人無障礙理解？我的語言是否通俗易懂，能夠被二次傳播？ 每次閱讀帶著這三個問題，先說服自己，才有辦法傳遞給他人。 如同我們工作上網查資料，必須先篩選適合的資料，並過濾出有效的資訊，接著解讀、思考是否有符合我們需求的資訊、最後再將其驗證。
一般人的劃線重點 v.s. 說書人的劃線重點 究竟書中的名言佳句是不是重點，我們會在閱讀時畫下『我們認為』重要的句子，可能是某個偉人的名言佳句、又或者是讓我們有深刻體悟的一段話。 樊登認為這是非常關鍵的一個問題，所以總結了以下八個評判標準：
1. 當你感覺概念被清楚界定時 如同一開始提到反脆弱所舉的例子，玻璃杯、鐵球、乒乓球間所代表的差異性。
2. 當你感覺問題很嚴重時 如果自己都沒覺得嚴重，那怎麼說服他人。像之前讀到的『為了遇見40歲更好的自己』中有提到，我們總是想要做很多事，發現每件事都有做，但每件事都沒達成目標。 因為人類大腦無法同時判斷多組情報，因此三種左右是最適當的數量。過去我也曾經有這個煩惱，這本書所提到的這個面相讓我有深刻的體驗，也感受到這個問題的嚴重。
3. 當你感覺某種解釋令你很意外時 抽菸者要戒菸普羅大眾認為要靠毅力，直到樊登朋友因為一本『這書能讓你戒菸』，而成功戒菸，讓他對於戒菸的印象有個改變。 因為書中提到，如果淺意識內認為抽煙是好的，就算再有毅力都不會成功。 戒菸應該靠對吸菸的『認知』，要知道吸菸對於身體或是周遭的人所產生傷害，才有辦法從根本上戒除。
4. 當你看出遞進關係時 樊登提到他在講『世界觀』這本書時，無法略過第谷，因為第谷提供全套的觀測結果，所以克普勒提出第一定律及第二定律，接著牛頓則算出橢圓形上的週期運動，這就是一步步的遞進關係。
5. 當你看出轉折關係時，要留意轉折後的內容 閱讀到書中的轉捩點，或是讀到觀感上的反轉，這也是很重要的部分。
6. 不同面向彰顯書籍內的價值 有的書結構是遞進；有的則是先提出主題，再用不同面向的去驗證這個主題。我認為我看過的書中『原子習慣』是遞進，而無限賽局則是『提出主題』。
『原子習慣』一書中，先定義習慣的對我們的影響多大，在從頭開始述說我們要怎麼去建立一個原子習慣。 『無限賽局』則是先定義無限以及有限定義出來，再經由幾個面向去解釋驗證無限思維的重要。
7. 閱讀受到心靈衝擊 在『無限賽局』一書中提到，無限思維與有限思維的差異讓我有深刻的體會。
8. 書中的奇聞趣事，增添說書的趣味性 記下一些書中提到有趣的故事，可以在說書時分享，讓過程更有趣。
讀後心得 在開始閱讀之後，時不時會與幾個朋友聚再一起分享閱讀的書籍，雖然每次都有寫下書本摘要及心得，但總感覺無法有效的將書中的知識做傳遞。 最初選這本書的原因只是希望自己可以真正的將書本內的知識吸收，並有效的轉換成文字或是言語分享給其他人，但讀完之後給我的啟發已經遠超過當初的期待。 從為什麼要閱讀、如何讀懂一本書、如何抓取書中的重點知識、說書其實是再創作、運用心智圖說書&amp;hellip;等等，對我來說都非常的有幫助。
我滿喜歡書中提到的一點『理解的池子有多大，就能讀懂多難的書』。如果連三角函數都不會，怎麼去學微積分，唯有不段的充實自己，才有更多的可能性。</description>
    </item>
    
    <item>
      <title>無視礦工，以太坊的倫敦硬分叉</title>
      <link>https://ianlifelab.com/post/technology/blockchain/ethereum-london-hard-fork/</link>
      <pubDate>Wed, 16 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/post/technology/blockchain/ethereum-london-hard-fork/</guid>
      <description>前言 現今以太坊的手續費過於昂貴，交易者需要付出高額的手續費才可以完成交易。 這次的 Ethereum London Hard Fork （倫敦硬分叉）所做的更新，包含了 EIP-1559、EIP-3198、EIP-3238 三個提案， 其中 EIP-1559 也是這次比較備受關注的部分。
EIP 是什麼？ EIP(Ethereum Improvement Proposals)，是為以太坊指定潛在新功能或流程的標準，包含提議更改的技術規範。通過 EIP 流程討論和開發以太坊的網絡升級和應用標準。
提案一： EIP-1559（區塊鏈交易費用模型） EIP-1559 是對用戶在以太坊網絡上支付 gas 費用方式的更改。（由於現在以太坊交易手續費過高，降低對用戶的吸引力）
以往：礦工可以賺的收入「挖礦獎勵」跟「 100% Gas fee 」 EIP 1559 ： gas fee 分為基礎費（base fee）和小費兩種，給礦工的是「小費」； base fee 的 50% 會直接銷毀。 EIP-1559 也導入目標塊容量機制，每個區塊的基本費用根據網絡需求而變化。如果一個區塊的交易量超過 50%，則基本費用將增加，低於 50% 的話基本費則會下降。 而基本費可能會隨著交易加入 block 時發生改變，可以先將 price 設定成願意支付的上限，最後沒用到的部分會退還。
這個提案重點在於基本費會被銷毀，並不會所有的 gas fee 都讓礦工拿走。而也藉由『銷毀』機制，讓以太幣的供應量下降，避免通貨膨脹。
交易格式的差異 以下部分段程式碼是從 EIP-1559 擷取。
新交易格式內的 base_fee_per_gas ＆ priority_fee_per_gas 取代了以往的 Legacy Ethereum transactions 的 gas_price。 但 EIP-1559 可以相容 Legacy Ethereum transactions 的格式。 雖然現有的交易格式仍然有效且也被包含在 block 中，不過 Legacy transactions 沒辦法享有新的 pricing system 所帶來的優點。</description>
    </item>
    
    <item>
      <title>無限賽局 - 『永續』還是『取勝』？</title>
      <link>https://ianlifelab.com/read/game-the-infinite-game/</link>
      <pubDate>Sat, 15 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/read/game-the-infinite-game/</guid>
      <description> 沒有開始、中場以及結束的賽局 想想從小到大，我們經歷了許多賽局，像是體育競賽，有已知的玩家，既定的規則。在達成目標，也就是誰的比分先到標準，該隊伍就會獲勝，賽局就會結束。 相較於競技比賽的『有限賽局』。『無限賽局』中並沒有時間限制、沒有終點線、沒有真正的結束，像是商場上會不斷的有新玩家加入，沒有既定的規則，大家會依照自己的方式衍生出商業模式，試著一直存活在這場賽局內。
從微軟與蘋果間的戰爭看待商業賽局 微軟本來的願景，是為了提高生產力，幫助地球每個人到組織，可以貢獻更多，成就更大。但到了近幾年，公司的目標逐漸轉向『打贏競爭者』，也就是打贏蘋果。 作者曾經受邀在微軟以及蘋果的教育高峰論壇上演講。在微軟的論壇中，多數的講者都會提到如何打敗蘋果；而在蘋果的論壇內，講者都花時間在討論蘋果如何幫助老師教學、幫助學生學習。
打敗蘋果事現在微軟的目標，所以微軟的產品都以『性能需要比蘋果強』為出發點思考；反之蘋果則是思考如何達到公司願景，創造更好的產品來滿足大眾的需求，並且可以不段的創新突破，這樣的信念也進而改變了市場的結構。
無限思維的五個關鍵 如何從有限思維的框架中跳脫出去，進而有無限思維呢？作者提供了五個關鍵給我們
崇高的信念 崇高的信念是對一個尚不存在的未來懷抱具體的願景；這個未來令人嚮往到人們願意犧牲小我，來實現這個願景。 『隨時隨地以最低的價格來服務美國廣大的勞工』，這是美國零售業沃爾瑪的企業願景。其創辦人沃爾頓秉持著這個信念經營，在經濟大蕭條時成為了最富有的人之一。 但就算這樣，沃爾瑪也有背離信念的時候。接任執行長杜克上任後，將公司目標轉向利潤、成長以及市場地位，服務的對象以股東為首，不在是美國勞工。這也造就了後續沃爾瑪的各種負面新聞。直到明倫接任杜克之後，才重拾沃爾瑪的信念，將公司帶回無限賽局內。
信念不像目標，達成就結束，而是會一直持續下去。若公司的不在以信念為核心推廣業務，反而只在乎獲利、報酬，長久下來會脫離原本的軌道，也無法進步。
彼此信任的團隊 領導者要負責的不是結果，領導者要負責的是要對結果負責的人們。 組織文化、環境關係到一個團隊的是否可以高效率的執行作業。 許多公司現在提倡組織扁平，每個員工都可以為了公司、產品提出自己的見解，讓資訊流通暢行無阻。 而領導者的責任就是維持這個組織的文化，提升成員對團隊的信任程度，讓員工發揮最佳的表現。
『有限思維』的領導者關注『結果』、『績效』，想著如何壓榨員工，讓他們達到自己預期的成果； 『無限思維』的領導者則是關注團隊的『環境』、解決問題的『過程』，遇到問題時大家是否可以適時的提出自己的意見，並一起解決眼前的問題。
可敬的對手 傳統思維讓我們採取要獲勝的態度，敬畏對手的思維則啟發我們採取改進的態度 『成為第一』、『打敗對手』內心總是想著如何讓對手退出賽局，傳統的思維讓我們侷限在只能『獲勝』的層次。 或許仔細思考，可以發現因為對手所擅長的事自己並不擅長，但我們卻不願意面對，轉而將精神放在如何擊敗他的上面？ 擁有『無限思維』的人為認為，可敬的對手指出了自身的不足，我們可以藉由向對方學習，不斷的提升自己，讓自己不斷的朝『崇高的信念』邁進。
『有限思維』的人關注『結果』，想著如何才可以打敗對手； 『無限思維』的人關注改變的『過程』，改變讓自己更接近『崇高的信念』。
攸關存亡的應變 攸關存亡的應變是為了更有效地推動信念，即使這麼做會顛覆現有的商業模式。 以往的商業模式可以賺大錢，但套用在現今或許不在實用，可以從柯達這間公司來思考。
『像鉛筆一樣簡單。你按快門，剩下的交給我們。』這是柯達的廣告詞。 柯達的底片佔了公司大部分營收，而第一台數位相機也是柯達發明，但為什麼柯達最後還是敗在數位相機？
柯達的領導者認為，數位相機這項產品，與自家的底片有衝突，如果就這樣發表出去，可能會影響到公司的營收。 最後領導者認為底片才是賺錢的來源，而數位相機會讓賣出的底片變少，所以選擇不發表這項產品。 十年後 Nikon 發表第一台數位相機，而柯達到最後也退出了這場賽局。
『有限思維』的人關注『短期獲利』，只想著怎麼樣才可以賺錢，而忽略了自身的信念； 『無限思維』的人關注『推動信念』，攸關存亡的應變為了更推動『崇高的信念』，即使推翻現有的商業模式。
領導的勇氣 正值不只是做對的事，正直是在大眾抗議或醜聞發生之前就採取行動。 當領導這知道公司明明在做不道德的事，卻等輿論爆發之後才採取行動，這不是正直，這叫損害控制。 2014 年，美國最大的連鎖藥局 CVS 宣布停售香煙及菸草，這項決定並沒有人去要求 CVS ，也並非任何負面消息，縱使這項決定會使他們每年損失二十億美元。 CVS 的領導者用『信念』來引導公司業務，而這項決定也讓有使命感的公司去跟他們合作，開啟了 CVS 在保健食品這塊領域的商機，也提升了公司的形象。 反觀競爭對手，只高喊帶給世人健康的信念，而沒有勇氣做出改變的決定。
限時的無限賽局 或許『信念』才是『無限思維』根本，蘋果的信念是創新，微軟的信念是激發大家的生產力，『崇高的信念』造就了這些偉大的公司。 當信念轉變成利益導向，如同微軟不在思考怎麼讓大家發揮價值，而把目標轉向打贏蘋果，此時陷入有限思維的微軟，如同丟掉武器赤手空拳的來對抗競爭者，對於蘋果的競爭力也不在像以前那麼高。
人生本是一場『無限賽局』，但我們僅擁有有限的時間，我們要用『無限思維』去看待這場『限時的賽局』。崇高的信念可以讓思維跳脫輸贏，可以犯錯、可以推翻現況，就是為了更接近人生的信念；擁有可敬的對手讓我們不在只在乎表面的輸贏，而是成為互相檢視的導師，推動自己不斷的向前邁進。當我們不在以『我』為中心來思考任何事，而是將眼光放遠，以信念來引導我們的方向，勢必可以創造屬於自己的價值，並影響更多的人。
🔅 原子習慣：一旦你發現『時間』才是最寶貴的貨幣，你會徹底改變你的生活風格和習慣。 SlideShare </description>
    </item>
    
    <item>
      <title>超速學習 - 『學習』從來不是一件輕鬆的事</title>
      <link>https://ianlifelab.com/read/ultralearning/</link>
      <pubDate>Sun, 21 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/read/ultralearning/</guid>
      <description>如何成為超速學習者？ 超速學習並非千篇一律的方法，每個人的學習計畫都是獨特的，而要到達的精通程度所需的方法也不同。這本書中整理出了九個普遍的法則基礎，並稱這套方法為超速學習。
後設學習、專心致志、直接學習、反覆練習、提取記憶、意見回饋、保留記憶、培養直覺、勇於實驗
建立學習地圖 超速學習的第一步為『後設學習』，後設學習在這本書中指的是學習關於學習這件事。比方說，只會英語者以及會西班牙語加英語的雙語者同時學法語課。後續追中顯示，雙語者表現會優於單語者。
為什麼？因為西班牙語以及法語都是羅馬語系，因此對雙語者來說是一個優勢。但其原因不只是這樣！會多種語言者可以藉由比較兩種或以上語言特中，開發出不同語言學習的策略能力。也就是所謂的『後設語言覺識』。
而要畫出學習地圖，則要先問自己『為什麼、做什麼、怎麼做』，進而了解自己的學習目標以及方法。
真正的學習，其實是在直接做你想變擅長的事時才會發生 回想以前考高中大學時常常聽到一句話：『若你覺得現在唸書是痛苦的，那代表你做對了，請你堅持下去。』，在我的認知裡，直接學習一項技能並不會太舒服，甚至很痛苦，例如想學一種語言，並非直接看文法、背單字或是與人對話，而是透過各種有趣的應用軟體，讓自己有種『我好像學到東西』的感覺。而 真正的學習，其實是在直接做你想變擅長的事時才會發生。 當真的要學習語言，應該思考如何做直接的可以學習到這項技能，比方說上線上真人課程與外國人溝通、每天閱讀英文報章雜誌學習新字彙&amp;hellip;等。
在被迎面痛擊之前，每個人都有自己的一套計畫。 學習過程中，取得回饋很重要，回饋是可以評估學習成效的重要方式之一。但不見得回饋越多越好，關鍵在於得到回饋的類型。當回饋提供的是指引學習方向有用的資訊，那就會有好的效果。若是給一個個體的評價，例如：『你好棒！』或是『你好懶墮&amp;hellip;』，這並非是對學習本身的回饋，通常會對學習有負面影響。
而回饋的不當解讀或無法給予有用的資訊，也會造成反效果。超速學習者必須留意兩種可能性：
對並未提供能帶來有用資訊的回饋反應過度。超速學習者必須對回饋敏感，並過濾。 如果運用不當，回饋對行動力也會有影響。過度負面會降低行動力，過度正面會阻礙進步。 勇於實驗，往舒適圈外探索 開始一項新技能時，通常只要照著比自己厲害的人去做就夠了。但隨著越學越多，只是遵循榜樣通常不再足夠，必須自己去實驗，找到屬於自己的道路。比方說一個程式設計師，一開始學寫程式時，通常都是上網找尋範本。但等到累積一定的知識量後，就不用在複製別人的範本，而是自行架設一個網站，可以藉由自行架設網站的過程中，知道哪些部分的能力還需要加強。
費曼技巧 書中第八個法則『培養直覺』中提到了費曼技巧，讓我想起為什麼想寫文章，一方面是想要紀錄自己學了什麼，另一方面是想如果是別人看我的文章，可以理解這個東西到什麼程度、要如何將我所理解的知識傳遞給他人，若無法順利傳遞知識，代表我對於正在學習的項目還不是很了解。
在一張紙的最上方，寫下你想了解的觀念或問題。 在下方空間解釋那個想法，彷彿你必須傳授他人。 若是觀念，先問自己，要如何把這個觀念傳給從未聽過的人 若是問題，就說明該如何解答；重要的事，要說明你為何認為解題步驟是合理的。 當你卡住了，就代表你的理解無法提供清楚的解答，請回去找書、筆記、老師、或是參考資料，直到找出答案為止。 可以應用在三個地方：
你完全不了解的事物。 你似乎無法解決的問題。 為了擴展直覺。 讀後心得 超速學習在這本書中，給了滿多真實範例及方法。但他絕對不是教你如何輕鬆學習，因為超速學習的定義為『一種獲取技能與知識的策略，兼具自主性與高強度。』而在書中也點出了一些我在學習時產生的盲點，如『直接學習』。就像上面講的，往往學習新事物都是痛苦的，所以都想要用輕鬆的方式去達成學習的成果，但都忽略了最直接的學習，可以最快速了解內容，雖然過程不舒服，但累積下來的成果也將非常可觀。
閱讀筆記 若想參考閱讀筆記，可以點 這裡 參考</description>
    </item>
    
    <item>
      <title>快速排序 - Quick Sort</title>
      <link>https://ianlifelab.com/algorithms/quick-sort/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/algorithms/quick-sort/</guid>
      <description></description>
    </item>
    
    <item>
      <title>合併排序 - Merge Sort</title>
      <link>https://ianlifelab.com/algorithms/merge-sort/</link>
      <pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/algorithms/merge-sort/</guid>
      <description></description>
    </item>
    
    <item>
      <title>泡沫排序 - Bubble Sort</title>
      <link>https://ianlifelab.com/algorithms/bubble-sort/</link>
      <pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/algorithms/bubble-sort/</guid>
      <description></description>
    </item>
    
    <item>
      <title>複身犯 - 寫出你的名字，你是誰？</title>
      <link>https://ianlifelab.com/movie/plurality/</link>
      <pubDate>Sun, 14 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/movie/plurality/</guid>
      <description>上次看電影是2019年的事（沒看天能，有理由不當低能🤣），而上次看國片更不知何時了，對於國片的記憶還停留在『大尾鱸鰻』、『總鋪師』等等賀歲片，這次剛好朋友介紹而看這部電影，起初以為是類似於人格分裂的犯罪電影，想不到劇情比我想的還要豐富，有點刷新了我對於國片既定的印象。雖然有部分沒有解釋的很到位，但對於我來說，看電影就是放鬆心情，不要太過於糾結🤣🤣🤣。
以下心得可能有點雷，還沒看過的就先跳出囉！！
人格的撕扯，我不是我。 『攔截記憶碼』是我對於這類電影的一個印象，但這片一次注入五個人格到單一個體的精神裡，是給演員的一大考驗。個人覺得楊祐寧把這五個人都詮釋的不錯，畢竟一次演兩個人就已經不是一件簡單的事了，更何況是五個人。而在這五個人存在於意識裡的空間，是與現實相同的實驗室，表示就算你們逃出了現實的實驗室，在意識裡面還是被關起來的。如果某一個人格想要驅動 193 的身體，就需要找到一個紅門，這個紅門，象徵著 193 與女兒講的『怪角鹿』的故事，那隻鹿為了面對自己而穿過的紅門。
張榕容飾演的科學家沈宜玲，竭盡自己的所學，為了小孩，不放棄所有可能找到他的線索，體現出一個母親，可以為自己的孩子付出一切。故事的最後，意外的反轉，193 並不是許明哲，而真的許明哲，為了奪取身體而模仿甚至策劃抹殺所有人的意識，一種『我不是我，那我是誰』的感覺。
整部下來印象最深刻的一句話還是公車司機邱俊生的：我只是想看我阿嬤啊
觀後的省思 世界友善對待先天有缺陷的人並不友善 想起以前學生時代，大家對於一些行為怪異或是身心有缺陷的人了，往往都給予不友善的態度甚至會霸凌他們。大家普遍認為他們是怪人，給與異樣眼光，對於這些人來說，這個世界有的甚至父母，都不會友善的對待自己。片中許明哲以及 193（意識載體）分別用不同的方法，去對待這些人。但許明哲這種極端的行為，也許演出很多人內心不敢表現出的想法，而 193 則是父母對待自己子女愛的體現。不禁讓人反思，是不是因為我們而造就了這個不友善的世界？
被『正義』包裝的『惡』 片尾王警官說：『我們沒辦法知道怪物的腦中想什麼，或許殺了他們，反而對他們比較好。』這句話就跟許明哲對沈宜玲（張榕容）講的話一樣：『這世界對他們並不友善，所以殺了他們。對他們比較好。』。往往有些『惡意』的外層包裝了『正義』，社會大眾就會覺的是合理的事，但是否只要是『正義』就是絕對的正確呢？
不管這個世界怎麼看你，你都要相信你自己。 193 對女兒說：『不管這個世界怎麼看你，你都要相信你自己。』
現在的人大多數在意『別人怎麼看我』，但我們是想要活出『我夢想中的自己』，還是『別人眼中的自己』。適度的在意並把意見化為養分是必要的，但應該要過濾，不是照單全收。
最後，你們有沒有看我阿嬤啊</description>
    </item>
    
    <item>
      <title>在 Hugo Blog 中加上 Algolia 文章搜索工具</title>
      <link>https://ianlifelab.com/build-blog/hugo-and-algolia/</link>
      <pubDate>Sat, 13 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/build-blog/hugo-and-algolia/</guid>
      <description>隨著文章越來越多，要找到以前寫的文章就越來越麻煩，所以就一直想尋找站內搜索的功能使用。之前有試用 google 的站內搜索功能，但總覺得整體不是很好看，也就沒有繼續使用。直到最近看到 Algolia ，可建立文章的索引，將資料上傳到 Algolia，再藉由串接 API 就可以完成搜索功能。
接下來就開始建立站內搜索功能吧。
註冊 Algolia 第一步就是要到 Algolia 註冊帳號，登入後會要求輸入一個 index（等等要用到這個 index），然後會以這個 index 建立一個 app ，接著選擇存取的國家（我是選日本），完成之後會有這個畫面。
然後點選左邊的 API Keys，這邊有等等設定需要使用的參數，可以先將他們記下來。
註：Algolia 有分幾個付費等級，現在有 15 天試用期，不過因為 blog 只需要簡單的搜索文章的功能，這裡目前是使用免費版，若要更進階的功能可以自行研究看看。
hugo 生成索引文件 1. 修改 config.toml 修改./config.toml設定好需要的參數。
[outputs] home = [&amp;#34;HTML&amp;#34;, &amp;#34;RSS&amp;#34;, &amp;#34;Algolia&amp;#34;] [outputFormats.Algolia] baseName = &amp;#34;algolia&amp;#34; isPlainText = true mediaType = &amp;#34;application/json&amp;#34; notAlternative = true [params.algolia] appId = &amp;#34;剛剛看到的 ID&amp;#34; indexName = &amp;#34;一開始輸入的 index&amp;#34; searchOnlyKey = &amp;#34;剛剛看到的 Search Only Key&amp;#34; vars = [&amp;#34;title&amp;#34;, &amp;#34;summary&amp;#34;, &amp;#34;date&amp;#34;, &amp;#34;publishdate&amp;#34;, &amp;#34;expirydate&amp;#34;, &amp;#34;permalink&amp;#34;] params = [&amp;#34;categories&amp;#34;, &amp;#34;tags&amp;#34;, &amp;#34;series&amp;#34;] 2.</description>
    </item>
    
    <item>
      <title>咖啡的價值 - 是買咖啡還是買時間？</title>
      <link>https://ianlifelab.com/life/a-cup-of-coffee/</link>
      <pubDate>Fri, 12 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/life/a-cup-of-coffee/</guid>
      <description>到咖啡廳唸書？ 很多人喜歡到咖啡廳看書，曾經的我覺得，為何要花錢去咖啡廳看書？自制力高一點在家看不就好了，何必要多花一筆錢？那到底有沒有必要去咖啡廳唸書？
一杯咖啡的價值 每到週末，我就會想著：『難得的假日，休息一下再來做事好了！』，然後就晚上了。是自制力不足， 還是目標不夠明確所以才導致這個結果呢？
原子習慣一書中提到，『改變習慣的四大法則之一：讓習慣淺而易見』，反之則是讓壞習慣視而不見。那這跟在家看書有什麼關係？
想想自己房間裡的環境，看到床就想睡一下、看到電動就想玩一下、走到客廳看到電視就想看一會兒&amp;hellip;諸如此類，當我們想要在這充滿誘惑的環境做一些不屬於這個環境的事情，想必會有一定的難度，而我們的時間往往就這樣被消磨掉了。一個週末、兩個週末&amp;hellip;這樣的時間累計起來，其實也是滿可觀的。
而我開始對『一杯咖啡的價值』開始有了不一樣的想法。他是單純菜單上的 60/100 元的『飲料』，還是他可以想成，你用這樣的價錢，控制了你一天的『時間』？
資產與負債 一杯咖啡，怎麼會講到資產與負債？我認為這兩件事的觀念有點相似。現在常聽到人問，『什麼是資產？你的房子是不是？你的車子是不是？』，而答案通常會是『房子那來出租，就會是資產；車子拿來載客人，也是資產。』
那我買一杯咖啡，到底是投資還是消費？
一杯咖啡換一天的時間 高爾基：『時間是最公平合理的，它從不多給誰一分。』 老天給我們最公平的東西就是——時間，每個人都有，無論是貧賤、富貴，每個人都是一樣的，而時間是公平的，我們每個人能擁有它，但因為使用它的方式不同，導致在『相同』的時間內，沒有相同的結果。
而現在，我用一杯咖啡，換到一個沒有誘惑的環境、換來一天的時間，這件事讓我不再認為『到咖啡廳唸書』是個浪費錢的事情，反而覺得是非常值得的『投資』。</description>
    </item>
    
    <item>
      <title>字典樹 - Trie</title>
      <link>https://ianlifelab.com/algorithms/tries/</link>
      <pubDate>Tue, 09 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/algorithms/tries/</guid>
      <description></description>
    </item>
    
    <item>
      <title>二分搜尋演算法 (Binary search algorithm) - 終極密碼</title>
      <link>https://ianlifelab.com/algorithms/binary-search/</link>
      <pubDate>Sun, 07 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/algorithms/binary-search/</guid>
      <description>&lt;p&gt;&lt;!-- raw HTML omitted --&gt;圖片來源&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>為了遇見40歲更好的自己</title>
      <link>https://ianlifelab.com/read/40-years-old/</link>
      <pubDate>Sun, 21 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/read/40-years-old/</guid>
      <description>讀後心得 40歲是夾在上一代及下一代中間的一個世代，為了讓自己過得更好，需要學會捨棄一些事物。但往往要捨棄時，又會有些捨不得。就像要整理自己的衣櫃時，拿出很多衣服可能一年內根本沒拿出來穿過，但卻捨不得丟掉，又把他放回衣櫃裡佔去了衣櫃的空間。而哪些東西是該捨棄，而為什麼要捨棄，捨棄之後可以達到什麼效果，這本書基本上都有提到。書中有5個大章節、43個小章節，我挑幾個感受比較深的項目拿來舉例。
1. 『勇於捨棄』，提升人生的品質 我還年輕，我全身都很健康；這個我以前就是這樣做，絕對沒問題。這些『自信』、『堅持』大家一定都有過。但隨著時間的推移，我們會變老，時代會進步。需要不段的定期檢討、不段的求新求變，才不會被社會淘汰。華特·迪士尼說過：『迪士尼永遠不會完工，維持現狀等於是一種退步。』
2. 習慣改變，行動自然改變 一開始有提到整理衣櫃。根據調查顯示，女性的衣櫃內有70%的衣服是沒再穿的，只有30%的衣服是平常有再穿的。作者建議把這70%的衣服丟掉，留下真正需要的30%。而依照人的習慣，還是會把這70%補滿。但補滿以後的衣櫃，裡面都是會穿出去的衣服。套用到人身上也一樣，應該適時的檢視並捨棄自己不需要的東西，補充新事物給自己。
3. 透過『選擇與集中』，提升工作的成果 在樹立目標的時候，我們往往會想要達成多件事情。例如：每個月要讀完一本書、英文要考到多益900分、要養成每天運動的習慣、要學習股票投資&amp;hellip;等等。但之後會發現每件事都有做，但都沒有達到目標。研究顯示，人類大腦無法同時判斷多組情報，因此三種左右是最適當的數量。所以我們可以把要執行的事情縮至三項，將其他事項暫時捨去，才可以專心的去完成每件事。此外，也要定期的檢視自己的執行項目是否有需要或是可更新成更好的方法，並定期的記錄下來。
4. 調整『時間分配』，改變成長速度 『我今天要看完一個線上課程，但上完班好累喔，休息一下再看好了！』，相信大家都有這個經驗，但休息一下之後，就準備洗澡睡覺了。如何避免這種情況發生呢？書裡建議我們，事先『算好』時間。也就是將你要做的是用時間去切分好，如下圖：
應先固定好時間，再決定做什麼事。但通常我們無法『完美的』執行我們的計劃，有時可能會有突發狀況發生，所以也必須捨棄『行程必須百分之百完成』的義務感，並不是沒做到就是失敗，而是要有些彈性。
5. 和『真正重要的人』建立人際關係 到新公司就減少與前公司聚餐的次數，因為『如果不跟現在公司的同事打好關係，就無法創造成果。』。
並不是到了新公司就要捨棄舊同事，而是現在是與新同事共事，要與他們一起創造成果。但如何與同事來往更加緊密？書中提到『讓溝通戲劇性改變之三種應可棄的東西』
為了得到旁人的信賴，請停止『責人』：在遇到問題時，應該先思考自己可以付出什麼，而非先找戰犯。 若想討人喜歡，請捨棄『想討人喜歡的念頭』：應該適時的表達意見，而不是一直考慮是否會被對方討厭。 想要聽見對方的真心話，請捨棄『先入為主的觀念』：產品好不好用，是客戶決定。我們應該思考『這件事由誰判定？』而非自己先覺得對方怎想。 『改變行為一定可以改變結果』，書中讓我們思考什麼該東西是現在應該捨去的。例如：過度的自信、自我堅持、達到目標途中不需要的東西&amp;hellip;等等。專心對待眼前最重要的事物，才有辦法完成目標。這本書雖然有些觀點個人是稍微不認同，不過整體來說是不錯的，可以看看！！
閱讀筆記 若想參考閱讀筆記，可以點 這裡 參考</description>
    </item>
    
    <item>
      <title>原子習慣 - 細微改變帶來巨大成就</title>
      <link>https://ianlifelab.com/read/atom-habits/</link>
      <pubDate>Sat, 23 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/read/atom-habits/</guid>
      <description>讀後心得 如果每天進步百分之一，持續一年你會進步37倍； 每天退步百分之一，一年後就會弱化到趨近於零，時間會放大成功與失敗之間的差距。 當我們想著要改變的時候，往往想著馬上就可以看到成果，但都忽略一些細微的改變。想想每年年初都訂立一些目標，我 TOEIC 要考 950 以上、我今年要變成巨巨&amp;hellip;等等。但到了年底發現，我今年跟去年好像一樣都沒變，怎麼會這樣？
決定成功與失敗的，並非目標，而是系統。
例如：Ａ跟Ｂ都想要有六塊腹肌，但一年後，Ａ成功的練出了腹肌，Ｂ卻跟原本的一樣。差異在哪？
Ａ一周至少上六天健身房，且有做飲食控管並記錄每天的身體數值、飲食及訓練項目。Ｂ一週也上六天健身房，但卻沒有控制飲食以及紀錄。兩個人的目標相同，但執行方式（系統）卻不一樣，所以造就了不同的結果。
可以發現，雖然定了目標，但系統執行的方向不對，所呈現的結果也不一樣。
我們往往把注意力過於放在目標上，忽略了如何執行這件事。而對於想要改變習慣，卻因為習慣過於難執行，又或是生活讓我們只能安於現狀，最後只能回歸原樣。
提示 &amp;lt;&amp;gt; 讓提示顯而易見 渴望 &amp;lt;&amp;gt; 讓習慣有吸引力 回應 &amp;lt;&amp;gt; 讓行動輕而易舉 獎賞 &amp;lt;&amp;gt; 讓獎賞令人滿足 這是書中提到養成習慣的四種方法，簡單用這四個法則來延續六塊肌例子：
讓提示顯而易見
為了養成健身的習慣，將健身手套放在書桌上，看到手套就知道該去健身房了。
讓習慣有吸引力
去健身房只是為了健身？No！當然是為了看健身妹子跟巨巨的肌肉拉，所以會為了這件事所以去健身房。
讓行動輕而易舉
選一間離家走路三分鐘的健身房，這樣就算下雨也只需要撐個傘就可以到了。
讓獎賞令人滿足
每天持續記錄自己的體態，看到改變而帶來的成就感。（或是因為去健身房脫單）
而壞習慣就反向而行，這樣就可以比較有效的建立自己的習慣。
看完這本書後，練習了一下覺得其實滿受用的。書中也有舉許多實例，讓法則比較淺顯易懂。滿值得入手的一本好書，不愧是暢銷前幾名。
閱讀筆記 因為是心得所以不想打太多筆記類的東西，若想看閱讀筆記，可以點 這裡 參考</description>
    </item>
    
    <item>
      <title>嘉明湖</title>
      <link>https://ianlifelab.com/photograph/20201117-jiaminglake/</link>
      <pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/photograph/20201117-jiaminglake/</guid>
      <description></description>
    </item>
    
    <item>
      <title>策略模式 | Strategy Pattern</title>
      <link>https://ianlifelab.com/design-pattern/strategy-pattern/</link>
      <pubDate>Tue, 06 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/design-pattern/strategy-pattern/</guid>
      <description>本系列文章同步分享於IT邦幫忙第12屆鐵人賽
Design Pattern 系列文章導讀 Design Pattern可以說是開發上大家都會遇到的一個課題， 這系列文會從Design Principles、各種design pattern到最後的Anti-Patterns &amp; Code Smells介紹下去，讓我們可以更了解各種pattern的使用時機與場合。 預計目標主題如下，若有哪部分不熟的章節可以直接點進去看 註：可以利用Online Java Compiler IDE 設計模式 - 入門篇 什麼是Design Pattern? Design Pattern的類型與原則 設計模式 - 原則篇 | Design Principles 單一職責原則 | Single Responsibility Principle 開閉原則 | Open/Closed Principle 里氏替換原則 | Liskov Substitution Principle 介面隔離原則 | Interface Segregation Principle 依賴反轉原則 | Dependency Inversion Principle 合成/聚合複用原則 | Composite/Aggregate Reuse Principle 迪米特法則 | Law of Demeter 設計模式 - 創建型模型篇 | Creational Patterns 單例模式 | Singleton Pattern 工廠模式 | Factory Pattern 抽象工廠模式 | Abstract Factory Pattern 生成器模式 | Builder Pattern 原型模式 | Prototype Pattern 設計模式 - 結構型模型篇 | Structural Patterns 適配器模式 | Adapter Pattern 橋接模式 | Bridge Pattern 组合模式 | Composite Pattern 裝飾者模式 | Decorator Pattern 外觀模式 | Facade Pattern 享元模式 | Flyweight Pattern 代理模式 | Proxy Pattern 設計模式 - 行為型模型篇 | Behavioural Patterns 責任鏈模式 | Chain of Responsibility Pattern 命令模式 | Command Pattern 迭代器模式 | Iterator Pattern 中介者模式 | Mediator Pattern 狀態模式 | State Pattern 備忘錄模式 | Memento Pattern 觀察者模式 | Observer Pattern Strategy Pattern Template Pattern Visitor Pattern Interpreter Pattern 設計模式 - 番外篇 Anti-Patterns Code Smells Design Pattern VS 演算法 定義 定義一系列演算法，並將其封裝起來，使他們可以相互替換，演算法的變換不影響使用。</description>
    </item>
    
    <item>
      <title>觀察者模式 | Observer Pattern</title>
      <link>https://ianlifelab.com/design-pattern/observer-pattern/</link>
      <pubDate>Mon, 05 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/design-pattern/observer-pattern/</guid>
      <description>本系列文章同步分享於IT邦幫忙第12屆鐵人賽
Design Pattern 系列文章導讀 Design Pattern可以說是開發上大家都會遇到的一個課題， 這系列文會從Design Principles、各種design pattern到最後的Anti-Patterns &amp; Code Smells介紹下去，讓我們可以更了解各種pattern的使用時機與場合。 預計目標主題如下，若有哪部分不熟的章節可以直接點進去看 註：可以利用Online Java Compiler IDE 設計模式 - 入門篇 什麼是Design Pattern? Design Pattern的類型與原則 設計模式 - 原則篇 | Design Principles 單一職責原則 | Single Responsibility Principle 開閉原則 | Open/Closed Principle 里氏替換原則 | Liskov Substitution Principle 介面隔離原則 | Interface Segregation Principle 依賴反轉原則 | Dependency Inversion Principle 合成/聚合複用原則 | Composite/Aggregate Reuse Principle 迪米特法則 | Law of Demeter 設計模式 - 創建型模型篇 | Creational Patterns 單例模式 | Singleton Pattern 工廠模式 | Factory Pattern 抽象工廠模式 | Abstract Factory Pattern 生成器模式 | Builder Pattern 原型模式 | Prototype Pattern 設計模式 - 結構型模型篇 | Structural Patterns 適配器模式 | Adapter Pattern 橋接模式 | Bridge Pattern 组合模式 | Composite Pattern 裝飾者模式 | Decorator Pattern 外觀模式 | Facade Pattern 享元模式 | Flyweight Pattern 代理模式 | Proxy Pattern 設計模式 - 行為型模型篇 | Behavioural Patterns 責任鏈模式 | Chain of Responsibility Pattern 命令模式 | Command Pattern 迭代器模式 | Iterator Pattern 中介者模式 | Mediator Pattern 狀態模式 | State Pattern 備忘錄模式 | Memento Pattern 觀察者模式 | Observer Pattern Strategy Pattern Template Pattern Visitor Pattern Interpreter Pattern 設計模式 - 番外篇 Anti-Patterns Code Smells Design Pattern VS 演算法 定義 多個物件之間存在著一對多的依賴關係，當一個物件發生改變時，所有跟他有關的物件都會被通知且更新。</description>
    </item>
    
    <item>
      <title>備忘錄模式 | Memento Pattern</title>
      <link>https://ianlifelab.com/design-pattern/memento-pattern/</link>
      <pubDate>Sun, 04 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/design-pattern/memento-pattern/</guid>
      <description>本系列文章同步分享於IT邦幫忙第12屆鐵人賽
Design Pattern 系列文章導讀 Design Pattern可以說是開發上大家都會遇到的一個課題， 這系列文會從Design Principles、各種design pattern到最後的Anti-Patterns &amp; Code Smells介紹下去，讓我們可以更了解各種pattern的使用時機與場合。 預計目標主題如下，若有哪部分不熟的章節可以直接點進去看 註：可以利用Online Java Compiler IDE 設計模式 - 入門篇 什麼是Design Pattern? Design Pattern的類型與原則 設計模式 - 原則篇 | Design Principles 單一職責原則 | Single Responsibility Principle 開閉原則 | Open/Closed Principle 里氏替換原則 | Liskov Substitution Principle 介面隔離原則 | Interface Segregation Principle 依賴反轉原則 | Dependency Inversion Principle 合成/聚合複用原則 | Composite/Aggregate Reuse Principle 迪米特法則 | Law of Demeter 設計模式 - 創建型模型篇 | Creational Patterns 單例模式 | Singleton Pattern 工廠模式 | Factory Pattern 抽象工廠模式 | Abstract Factory Pattern 生成器模式 | Builder Pattern 原型模式 | Prototype Pattern 設計模式 - 結構型模型篇 | Structural Patterns 適配器模式 | Adapter Pattern 橋接模式 | Bridge Pattern 组合模式 | Composite Pattern 裝飾者模式 | Decorator Pattern 外觀模式 | Facade Pattern 享元模式 | Flyweight Pattern 代理模式 | Proxy Pattern 設計模式 - 行為型模型篇 | Behavioural Patterns 責任鏈模式 | Chain of Responsibility Pattern 命令模式 | Command Pattern 迭代器模式 | Iterator Pattern 中介者模式 | Mediator Pattern 狀態模式 | State Pattern 備忘錄模式 | Memento Pattern 觀察者模式 | Observer Pattern Strategy Pattern Template Pattern Visitor Pattern Interpreter Pattern 設計模式 - 番外篇 Anti-Patterns Code Smells Design Pattern VS 演算法 定義 在不破壞封裝的前提下，儲存一個物件的某個狀態，以便於需要的時候將物件恢復到原先儲存的狀態。</description>
    </item>
    
    <item>
      <title>狀態模式 | State Pattern</title>
      <link>https://ianlifelab.com/design-pattern/state-pattern/</link>
      <pubDate>Sat, 03 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/design-pattern/state-pattern/</guid>
      <description>本系列文章同步分享於IT邦幫忙第12屆鐵人賽
Design Pattern 系列文章導讀 Design Pattern可以說是開發上大家都會遇到的一個課題， 這系列文會從Design Principles、各種design pattern到最後的Anti-Patterns &amp; Code Smells介紹下去，讓我們可以更了解各種pattern的使用時機與場合。 預計目標主題如下，若有哪部分不熟的章節可以直接點進去看 註：可以利用Online Java Compiler IDE 設計模式 - 入門篇 什麼是Design Pattern? Design Pattern的類型與原則 設計模式 - 原則篇 | Design Principles 單一職責原則 | Single Responsibility Principle 開閉原則 | Open/Closed Principle 里氏替換原則 | Liskov Substitution Principle 介面隔離原則 | Interface Segregation Principle 依賴反轉原則 | Dependency Inversion Principle 合成/聚合複用原則 | Composite/Aggregate Reuse Principle 迪米特法則 | Law of Demeter 設計模式 - 創建型模型篇 | Creational Patterns 單例模式 | Singleton Pattern 工廠模式 | Factory Pattern 抽象工廠模式 | Abstract Factory Pattern 生成器模式 | Builder Pattern 原型模式 | Prototype Pattern 設計模式 - 結構型模型篇 | Structural Patterns 適配器模式 | Adapter Pattern 橋接模式 | Bridge Pattern 组合模式 | Composite Pattern 裝飾者模式 | Decorator Pattern 外觀模式 | Facade Pattern 享元模式 | Flyweight Pattern 代理模式 | Proxy Pattern 設計模式 - 行為型模型篇 | Behavioural Patterns 責任鏈模式 | Chain of Responsibility Pattern 命令模式 | Command Pattern 迭代器模式 | Iterator Pattern 中介者模式 | Mediator Pattern 狀態模式 | State Pattern 備忘錄模式 | Memento Pattern 觀察者模式 | Observer Pattern Strategy Pattern Template Pattern Visitor Pattern Interpreter Pattern 設計模式 - 番外篇 Anti-Patterns Code Smells Design Pattern VS 演算法 定義 有狀態的物件，把複雜的邏輯判斷分配到不同的狀態物件中，允許狀態物件在其內部狀態發生改變時改變行為。</description>
    </item>
    
    <item>
      <title>中介者模式 | Mediator Pattern</title>
      <link>https://ianlifelab.com/design-pattern/mediator-pattern/</link>
      <pubDate>Fri, 02 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/design-pattern/mediator-pattern/</guid>
      <description>本系列文章同步分享於IT邦幫忙第12屆鐵人賽
Design Pattern 系列文章導讀 Design Pattern可以說是開發上大家都會遇到的一個課題， 這系列文會從Design Principles、各種design pattern到最後的Anti-Patterns &amp; Code Smells介紹下去，讓我們可以更了解各種pattern的使用時機與場合。 預計目標主題如下，若有哪部分不熟的章節可以直接點進去看 註：可以利用Online Java Compiler IDE 設計模式 - 入門篇 什麼是Design Pattern? Design Pattern的類型與原則 設計模式 - 原則篇 | Design Principles 單一職責原則 | Single Responsibility Principle 開閉原則 | Open/Closed Principle 里氏替換原則 | Liskov Substitution Principle 介面隔離原則 | Interface Segregation Principle 依賴反轉原則 | Dependency Inversion Principle 合成/聚合複用原則 | Composite/Aggregate Reuse Principle 迪米特法則 | Law of Demeter 設計模式 - 創建型模型篇 | Creational Patterns 單例模式 | Singleton Pattern 工廠模式 | Factory Pattern 抽象工廠模式 | Abstract Factory Pattern 生成器模式 | Builder Pattern 原型模式 | Prototype Pattern 設計模式 - 結構型模型篇 | Structural Patterns 適配器模式 | Adapter Pattern 橋接模式 | Bridge Pattern 组合模式 | Composite Pattern 裝飾者模式 | Decorator Pattern 外觀模式 | Facade Pattern 享元模式 | Flyweight Pattern 代理模式 | Proxy Pattern 設計模式 - 行為型模型篇 | Behavioural Patterns 責任鏈模式 | Chain of Responsibility Pattern 命令模式 | Command Pattern 迭代器模式 | Iterator Pattern 中介者模式 | Mediator Pattern 狀態模式 | State Pattern 備忘錄模式 | Memento Pattern 觀察者模式 | Observer Pattern Strategy Pattern Template Pattern Visitor Pattern Interpreter Pattern 設計模式 - 番外篇 Anti-Patterns Code Smells Design Pattern VS 演算法 定義 定義一個 Mediator 物件用來封裝一組物件的互動方式。Mediator 藉由避免物件間相互直接的引用，從而降低它們之間的耦合程度，並且可以讓我們獨立地改變這些物件間的互動方式。</description>
    </item>
    
    <item>
      <title>迭代器模式 | Iterator Pattern</title>
      <link>https://ianlifelab.com/design-pattern/iterator-pattern/</link>
      <pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/design-pattern/iterator-pattern/</guid>
      <description>本系列文章同步分享於IT邦幫忙第12屆鐵人賽
Design Pattern 系列文章導讀 Design Pattern可以說是開發上大家都會遇到的一個課題， 這系列文會從Design Principles、各種design pattern到最後的Anti-Patterns &amp; Code Smells介紹下去，讓我們可以更了解各種pattern的使用時機與場合。 預計目標主題如下，若有哪部分不熟的章節可以直接點進去看 註：可以利用Online Java Compiler IDE 設計模式 - 入門篇 什麼是Design Pattern? Design Pattern的類型與原則 設計模式 - 原則篇 | Design Principles 單一職責原則 | Single Responsibility Principle 開閉原則 | Open/Closed Principle 里氏替換原則 | Liskov Substitution Principle 介面隔離原則 | Interface Segregation Principle 依賴反轉原則 | Dependency Inversion Principle 合成/聚合複用原則 | Composite/Aggregate Reuse Principle 迪米特法則 | Law of Demeter 設計模式 - 創建型模型篇 | Creational Patterns 單例模式 | Singleton Pattern 工廠模式 | Factory Pattern 抽象工廠模式 | Abstract Factory Pattern 生成器模式 | Builder Pattern 原型模式 | Prototype Pattern 設計模式 - 結構型模型篇 | Structural Patterns 適配器模式 | Adapter Pattern 橋接模式 | Bridge Pattern 组合模式 | Composite Pattern 裝飾者模式 | Decorator Pattern 外觀模式 | Facade Pattern 享元模式 | Flyweight Pattern 代理模式 | Proxy Pattern 設計模式 - 行為型模型篇 | Behavioural Patterns 責任鏈模式 | Chain of Responsibility Pattern 命令模式 | Command Pattern 迭代器模式 | Iterator Pattern 中介者模式 | Mediator Pattern 狀態模式 | State Pattern 備忘錄模式 | Memento Pattern 觀察者模式 | Observer Pattern Strategy Pattern Template Pattern Visitor Pattern Interpreter Pattern 設計模式 - 番外篇 Anti-Patterns Code Smells Design Pattern VS 演算法 定義 提供一種方法可以順序性讀取一個集合物件中的各個元素，而又不會暴露該物件的內部表示。</description>
    </item>
    
    <item>
      <title>命令模式 | Command Pattern</title>
      <link>https://ianlifelab.com/design-pattern/command-pattern/</link>
      <pubDate>Wed, 30 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/design-pattern/command-pattern/</guid>
      <description>本系列文章同步分享於IT邦幫忙第12屆鐵人賽
Design Pattern 系列文章導讀 Design Pattern可以說是開發上大家都會遇到的一個課題， 這系列文會從Design Principles、各種design pattern到最後的Anti-Patterns &amp; Code Smells介紹下去，讓我們可以更了解各種pattern的使用時機與場合。 預計目標主題如下，若有哪部分不熟的章節可以直接點進去看 註：可以利用Online Java Compiler IDE 設計模式 - 入門篇 什麼是Design Pattern? Design Pattern的類型與原則 設計模式 - 原則篇 | Design Principles 單一職責原則 | Single Responsibility Principle 開閉原則 | Open/Closed Principle 里氏替換原則 | Liskov Substitution Principle 介面隔離原則 | Interface Segregation Principle 依賴反轉原則 | Dependency Inversion Principle 合成/聚合複用原則 | Composite/Aggregate Reuse Principle 迪米特法則 | Law of Demeter 設計模式 - 創建型模型篇 | Creational Patterns 單例模式 | Singleton Pattern 工廠模式 | Factory Pattern 抽象工廠模式 | Abstract Factory Pattern 生成器模式 | Builder Pattern 原型模式 | Prototype Pattern 設計模式 - 結構型模型篇 | Structural Patterns 適配器模式 | Adapter Pattern 橋接模式 | Bridge Pattern 组合模式 | Composite Pattern 裝飾者模式 | Decorator Pattern 外觀模式 | Facade Pattern 享元模式 | Flyweight Pattern 代理模式 | Proxy Pattern 設計模式 - 行為型模型篇 | Behavioural Patterns 責任鏈模式 | Chain of Responsibility Pattern 命令模式 | Command Pattern 迭代器模式 | Iterator Pattern 中介者模式 | Mediator Pattern 狀態模式 | State Pattern 備忘錄模式 | Memento Pattern 觀察者模式 | Observer Pattern Strategy Pattern Template Pattern Visitor Pattern Interpreter Pattern 設計模式 - 番外篇 Anti-Patterns Code Smells Design Pattern VS 演算法 定義 The Command Pattern encapsulates a request as an object, thereby letting you parameterize other objects with different requests, queue or log requests, and support undoable operations.</description>
    </item>
    
    <item>
      <title>責任鏈模式 | Chain of Responsibility Pattern</title>
      <link>https://ianlifelab.com/design-pattern/chain-of-responsibility/</link>
      <pubDate>Tue, 29 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/design-pattern/chain-of-responsibility/</guid>
      <description>本系列文章同步分享於IT邦幫忙第12屆鐵人賽
Design Pattern 系列文章導讀 Design Pattern可以說是開發上大家都會遇到的一個課題， 這系列文會從Design Principles、各種design pattern到最後的Anti-Patterns &amp; Code Smells介紹下去，讓我們可以更了解各種pattern的使用時機與場合。 預計目標主題如下，若有哪部分不熟的章節可以直接點進去看 註：可以利用Online Java Compiler IDE 設計模式 - 入門篇 什麼是Design Pattern? Design Pattern的類型與原則 設計模式 - 原則篇 | Design Principles 單一職責原則 | Single Responsibility Principle 開閉原則 | Open/Closed Principle 里氏替換原則 | Liskov Substitution Principle 介面隔離原則 | Interface Segregation Principle 依賴反轉原則 | Dependency Inversion Principle 合成/聚合複用原則 | Composite/Aggregate Reuse Principle 迪米特法則 | Law of Demeter 設計模式 - 創建型模型篇 | Creational Patterns 單例模式 | Singleton Pattern 工廠模式 | Factory Pattern 抽象工廠模式 | Abstract Factory Pattern 生成器模式 | Builder Pattern 原型模式 | Prototype Pattern 設計模式 - 結構型模型篇 | Structural Patterns 適配器模式 | Adapter Pattern 橋接模式 | Bridge Pattern 组合模式 | Composite Pattern 裝飾者模式 | Decorator Pattern 外觀模式 | Facade Pattern 享元模式 | Flyweight Pattern 代理模式 | Proxy Pattern 設計模式 - 行為型模型篇 | Behavioural Patterns 責任鏈模式 | Chain of Responsibility Pattern 命令模式 | Command Pattern 迭代器模式 | Iterator Pattern 中介者模式 | Mediator Pattern 狀態模式 | State Pattern 備忘錄模式 | Memento Pattern 觀察者模式 | Observer Pattern Strategy Pattern Template Pattern Visitor Pattern Interpreter Pattern 設計模式 - 番外篇 Anti-Patterns Code Smells Design Pattern VS 演算法 定義 將多個物件連成一條鏈，沿著這條鏈傳遞至每一個物件並處理請求。</description>
    </item>
    
    <item>
      <title>代理模式 | Proxy Pattern</title>
      <link>https://ianlifelab.com/design-pattern/proxy-pattern/</link>
      <pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/design-pattern/proxy-pattern/</guid>
      <description>本系列文章同步分享於IT邦幫忙第12屆鐵人賽
Design Pattern 系列文章導讀 Design Pattern可以說是開發上大家都會遇到的一個課題， 這系列文會從Design Principles、各種design pattern到最後的Anti-Patterns &amp; Code Smells介紹下去，讓我們可以更了解各種pattern的使用時機與場合。 預計目標主題如下，若有哪部分不熟的章節可以直接點進去看 註：可以利用Online Java Compiler IDE 設計模式 - 入門篇 什麼是Design Pattern? Design Pattern的類型與原則 設計模式 - 原則篇 | Design Principles 單一職責原則 | Single Responsibility Principle 開閉原則 | Open/Closed Principle 里氏替換原則 | Liskov Substitution Principle 介面隔離原則 | Interface Segregation Principle 依賴反轉原則 | Dependency Inversion Principle 合成/聚合複用原則 | Composite/Aggregate Reuse Principle 迪米特法則 | Law of Demeter 設計模式 - 創建型模型篇 | Creational Patterns 單例模式 | Singleton Pattern 工廠模式 | Factory Pattern 抽象工廠模式 | Abstract Factory Pattern 生成器模式 | Builder Pattern 原型模式 | Prototype Pattern 設計模式 - 結構型模型篇 | Structural Patterns 適配器模式 | Adapter Pattern 橋接模式 | Bridge Pattern 组合模式 | Composite Pattern 裝飾者模式 | Decorator Pattern 外觀模式 | Facade Pattern 享元模式 | Flyweight Pattern 代理模式 | Proxy Pattern 設計模式 - 行為型模型篇 | Behavioural Patterns 責任鏈模式 | Chain of Responsibility Pattern 命令模式 | Command Pattern 迭代器模式 | Iterator Pattern 中介者模式 | Mediator Pattern 狀態模式 | State Pattern 備忘錄模式 | Memento Pattern 觀察者模式 | Observer Pattern Strategy Pattern Template Pattern Visitor Pattern Interpreter Pattern 設計模式 - 番外篇 Anti-Patterns Code Smells Design Pattern VS 演算法 定義 爲其他物件提供一種代理以控制對這個物件的訪問。</description>
    </item>
    
    <item>
      <title>享元模式 | Flyweight Pattern</title>
      <link>https://ianlifelab.com/design-pattern/flyweight-pattern/</link>
      <pubDate>Sun, 27 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/design-pattern/flyweight-pattern/</guid>
      <description>本系列文章同步分享於IT邦幫忙第12屆鐵人賽
Design Pattern 系列文章導讀 Design Pattern可以說是開發上大家都會遇到的一個課題， 這系列文會從Design Principles、各種design pattern到最後的Anti-Patterns &amp; Code Smells介紹下去，讓我們可以更了解各種pattern的使用時機與場合。 預計目標主題如下，若有哪部分不熟的章節可以直接點進去看 註：可以利用Online Java Compiler IDE 設計模式 - 入門篇 什麼是Design Pattern? Design Pattern的類型與原則 設計模式 - 原則篇 | Design Principles 單一職責原則 | Single Responsibility Principle 開閉原則 | Open/Closed Principle 里氏替換原則 | Liskov Substitution Principle 介面隔離原則 | Interface Segregation Principle 依賴反轉原則 | Dependency Inversion Principle 合成/聚合複用原則 | Composite/Aggregate Reuse Principle 迪米特法則 | Law of Demeter 設計模式 - 創建型模型篇 | Creational Patterns 單例模式 | Singleton Pattern 工廠模式 | Factory Pattern 抽象工廠模式 | Abstract Factory Pattern 生成器模式 | Builder Pattern 原型模式 | Prototype Pattern 設計模式 - 結構型模型篇 | Structural Patterns 適配器模式 | Adapter Pattern 橋接模式 | Bridge Pattern 组合模式 | Composite Pattern 裝飾者模式 | Decorator Pattern 外觀模式 | Facade Pattern 享元模式 | Flyweight Pattern 代理模式 | Proxy Pattern 設計模式 - 行為型模型篇 | Behavioural Patterns 責任鏈模式 | Chain of Responsibility Pattern 命令模式 | Command Pattern 迭代器模式 | Iterator Pattern 中介者模式 | Mediator Pattern 狀態模式 | State Pattern 備忘錄模式 | Memento Pattern 觀察者模式 | Observer Pattern Strategy Pattern Template Pattern Visitor Pattern Interpreter Pattern 設計模式 - 番外篇 Anti-Patterns Code Smells Design Pattern VS 演算法 定義 運用共享技術有效地支持大量細粒度的物件。</description>
    </item>
    
    <item>
      <title>外觀模式 | Facade Pattern</title>
      <link>https://ianlifelab.com/design-pattern/facede-pattern/</link>
      <pubDate>Sat, 26 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/design-pattern/facede-pattern/</guid>
      <description>本系列文章同步分享於IT邦幫忙第12屆鐵人賽
Design Pattern 系列文章導讀 Design Pattern可以說是開發上大家都會遇到的一個課題， 這系列文會從Design Principles、各種design pattern到最後的Anti-Patterns &amp; Code Smells介紹下去，讓我們可以更了解各種pattern的使用時機與場合。 預計目標主題如下，若有哪部分不熟的章節可以直接點進去看 註：可以利用Online Java Compiler IDE 設計模式 - 入門篇 什麼是Design Pattern? Design Pattern的類型與原則 設計模式 - 原則篇 | Design Principles 單一職責原則 | Single Responsibility Principle 開閉原則 | Open/Closed Principle 里氏替換原則 | Liskov Substitution Principle 介面隔離原則 | Interface Segregation Principle 依賴反轉原則 | Dependency Inversion Principle 合成/聚合複用原則 | Composite/Aggregate Reuse Principle 迪米特法則 | Law of Demeter 設計模式 - 創建型模型篇 | Creational Patterns 單例模式 | Singleton Pattern 工廠模式 | Factory Pattern 抽象工廠模式 | Abstract Factory Pattern 生成器模式 | Builder Pattern 原型模式 | Prototype Pattern 設計模式 - 結構型模型篇 | Structural Patterns 適配器模式 | Adapter Pattern 橋接模式 | Bridge Pattern 组合模式 | Composite Pattern 裝飾者模式 | Decorator Pattern 外觀模式 | Facade Pattern 享元模式 | Flyweight Pattern 代理模式 | Proxy Pattern 設計模式 - 行為型模型篇 | Behavioural Patterns 責任鏈模式 | Chain of Responsibility Pattern 命令模式 | Command Pattern 迭代器模式 | Iterator Pattern 中介者模式 | Mediator Pattern 狀態模式 | State Pattern 備忘錄模式 | Memento Pattern 觀察者模式 | Observer Pattern Strategy Pattern Template Pattern Visitor Pattern Interpreter Pattern 設計模式 - 番外篇 Anti-Patterns Code Smells Design Pattern VS 演算法 定義 為子系統中的一組接口提供一個統一的高層接口，使得子系統更容易使用。</description>
    </item>
    
    <item>
      <title>裝飾者模式 | Decorator Pattern</title>
      <link>https://ianlifelab.com/design-pattern/decorator-pattern/</link>
      <pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/design-pattern/decorator-pattern/</guid>
      <description>本系列文章同步分享於IT邦幫忙第12屆鐵人賽
Design Pattern 系列文章導讀 Design Pattern可以說是開發上大家都會遇到的一個課題， 這系列文會從Design Principles、各種design pattern到最後的Anti-Patterns &amp; Code Smells介紹下去，讓我們可以更了解各種pattern的使用時機與場合。 預計目標主題如下，若有哪部分不熟的章節可以直接點進去看 註：可以利用Online Java Compiler IDE 設計模式 - 入門篇 什麼是Design Pattern? Design Pattern的類型與原則 設計模式 - 原則篇 | Design Principles 單一職責原則 | Single Responsibility Principle 開閉原則 | Open/Closed Principle 里氏替換原則 | Liskov Substitution Principle 介面隔離原則 | Interface Segregation Principle 依賴反轉原則 | Dependency Inversion Principle 合成/聚合複用原則 | Composite/Aggregate Reuse Principle 迪米特法則 | Law of Demeter 設計模式 - 創建型模型篇 | Creational Patterns 單例模式 | Singleton Pattern 工廠模式 | Factory Pattern 抽象工廠模式 | Abstract Factory Pattern 生成器模式 | Builder Pattern 原型模式 | Prototype Pattern 設計模式 - 結構型模型篇 | Structural Patterns 適配器模式 | Adapter Pattern 橋接模式 | Bridge Pattern 组合模式 | Composite Pattern 裝飾者模式 | Decorator Pattern 外觀模式 | Facade Pattern 享元模式 | Flyweight Pattern 代理模式 | Proxy Pattern 設計模式 - 行為型模型篇 | Behavioural Patterns 責任鏈模式 | Chain of Responsibility Pattern 命令模式 | Command Pattern 迭代器模式 | Iterator Pattern 中介者模式 | Mediator Pattern 狀態模式 | State Pattern 備忘錄模式 | Memento Pattern 觀察者模式 | Observer Pattern Strategy Pattern Template Pattern Visitor Pattern Interpreter Pattern 設計模式 - 番外篇 Anti-Patterns Code Smells Design Pattern VS 演算法 定義 裝飾模式動態將責任附加在物件上，若要擴展功能上，裝飾者提供比繼承更有彈性的替代方案。</description>
    </item>
    
    <item>
      <title>组合模式 | Composite Pattern</title>
      <link>https://ianlifelab.com/design-pattern/composite-pattern/</link>
      <pubDate>Thu, 24 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/design-pattern/composite-pattern/</guid>
      <description>本系列文章同步分享於IT邦幫忙第12屆鐵人賽
Design Pattern 系列文章導讀 Design Pattern可以說是開發上大家都會遇到的一個課題， 這系列文會從Design Principles、各種design pattern到最後的Anti-Patterns &amp; Code Smells介紹下去，讓我們可以更了解各種pattern的使用時機與場合。 預計目標主題如下，若有哪部分不熟的章節可以直接點進去看 註：可以利用Online Java Compiler IDE 設計模式 - 入門篇 什麼是Design Pattern? Design Pattern的類型與原則 設計模式 - 原則篇 | Design Principles 單一職責原則 | Single Responsibility Principle 開閉原則 | Open/Closed Principle 里氏替換原則 | Liskov Substitution Principle 介面隔離原則 | Interface Segregation Principle 依賴反轉原則 | Dependency Inversion Principle 合成/聚合複用原則 | Composite/Aggregate Reuse Principle 迪米特法則 | Law of Demeter 設計模式 - 創建型模型篇 | Creational Patterns 單例模式 | Singleton Pattern 工廠模式 | Factory Pattern 抽象工廠模式 | Abstract Factory Pattern 生成器模式 | Builder Pattern 原型模式 | Prototype Pattern 設計模式 - 結構型模型篇 | Structural Patterns 適配器模式 | Adapter Pattern 橋接模式 | Bridge Pattern 组合模式 | Composite Pattern 裝飾者模式 | Decorator Pattern 外觀模式 | Facade Pattern 享元模式 | Flyweight Pattern 代理模式 | Proxy Pattern 設計模式 - 行為型模型篇 | Behavioural Patterns 責任鏈模式 | Chain of Responsibility Pattern 命令模式 | Command Pattern 迭代器模式 | Iterator Pattern 中介者模式 | Mediator Pattern 狀態模式 | State Pattern 備忘錄模式 | Memento Pattern 觀察者模式 | Observer Pattern Strategy Pattern Template Pattern Visitor Pattern Interpreter Pattern 設計模式 - 番外篇 Anti-Patterns Code Smells Design Pattern VS 演算法 定義 物件以樹狀結構組合，做為表現出整體-部分的階層關係。</description>
    </item>
    
    <item>
      <title>橋接模式 | Bridge Pattern</title>
      <link>https://ianlifelab.com/design-pattern/bridge-pattern/</link>
      <pubDate>Wed, 23 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/design-pattern/bridge-pattern/</guid>
      <description>本系列文章同步分享於IT邦幫忙第12屆鐵人賽
Design Pattern 系列文章導讀 Design Pattern可以說是開發上大家都會遇到的一個課題， 這系列文會從Design Principles、各種design pattern到最後的Anti-Patterns &amp; Code Smells介紹下去，讓我們可以更了解各種pattern的使用時機與場合。 預計目標主題如下，若有哪部分不熟的章節可以直接點進去看 註：可以利用Online Java Compiler IDE 設計模式 - 入門篇 什麼是Design Pattern? Design Pattern的類型與原則 設計模式 - 原則篇 | Design Principles 單一職責原則 | Single Responsibility Principle 開閉原則 | Open/Closed Principle 里氏替換原則 | Liskov Substitution Principle 介面隔離原則 | Interface Segregation Principle 依賴反轉原則 | Dependency Inversion Principle 合成/聚合複用原則 | Composite/Aggregate Reuse Principle 迪米特法則 | Law of Demeter 設計模式 - 創建型模型篇 | Creational Patterns 單例模式 | Singleton Pattern 工廠模式 | Factory Pattern 抽象工廠模式 | Abstract Factory Pattern 生成器模式 | Builder Pattern 原型模式 | Prototype Pattern 設計模式 - 結構型模型篇 | Structural Patterns 適配器模式 | Adapter Pattern 橋接模式 | Bridge Pattern 组合模式 | Composite Pattern 裝飾者模式 | Decorator Pattern 外觀模式 | Facade Pattern 享元模式 | Flyweight Pattern 代理模式 | Proxy Pattern 設計模式 - 行為型模型篇 | Behavioural Patterns 責任鏈模式 | Chain of Responsibility Pattern 命令模式 | Command Pattern 迭代器模式 | Iterator Pattern 中介者模式 | Mediator Pattern 狀態模式 | State Pattern 備忘錄模式 | Memento Pattern 觀察者模式 | Observer Pattern Strategy Pattern Template Pattern Visitor Pattern Interpreter Pattern 設計模式 - 番外篇 Anti-Patterns Code Smells Design Pattern VS 演算法 定義 將抽象部分與實現部分分離，使它們都可以獨立的變化。</description>
    </item>
    
    <item>
      <title>適配器模式 | Adapter Pattern</title>
      <link>https://ianlifelab.com/design-pattern/adapter-pattern/</link>
      <pubDate>Tue, 22 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/design-pattern/adapter-pattern/</guid>
      <description>本系列文章同步分享於IT邦幫忙第12屆鐵人賽
Design Pattern 系列文章導讀 Design Pattern可以說是開發上大家都會遇到的一個課題， 這系列文會從Design Principles、各種design pattern到最後的Anti-Patterns &amp; Code Smells介紹下去，讓我們可以更了解各種pattern的使用時機與場合。 預計目標主題如下，若有哪部分不熟的章節可以直接點進去看 註：可以利用Online Java Compiler IDE 設計模式 - 入門篇 什麼是Design Pattern? Design Pattern的類型與原則 設計模式 - 原則篇 | Design Principles 單一職責原則 | Single Responsibility Principle 開閉原則 | Open/Closed Principle 里氏替換原則 | Liskov Substitution Principle 介面隔離原則 | Interface Segregation Principle 依賴反轉原則 | Dependency Inversion Principle 合成/聚合複用原則 | Composite/Aggregate Reuse Principle 迪米特法則 | Law of Demeter 設計模式 - 創建型模型篇 | Creational Patterns 單例模式 | Singleton Pattern 工廠模式 | Factory Pattern 抽象工廠模式 | Abstract Factory Pattern 生成器模式 | Builder Pattern 原型模式 | Prototype Pattern 設計模式 - 結構型模型篇 | Structural Patterns 適配器模式 | Adapter Pattern 橋接模式 | Bridge Pattern 组合模式 | Composite Pattern 裝飾者模式 | Decorator Pattern 外觀模式 | Facade Pattern 享元模式 | Flyweight Pattern 代理模式 | Proxy Pattern 設計模式 - 行為型模型篇 | Behavioural Patterns 責任鏈模式 | Chain of Responsibility Pattern 命令模式 | Command Pattern 迭代器模式 | Iterator Pattern 中介者模式 | Mediator Pattern 狀態模式 | State Pattern 備忘錄模式 | Memento Pattern 觀察者模式 | Observer Pattern Strategy Pattern Template Pattern Visitor Pattern Interpreter Pattern 設計模式 - 番外篇 Anti-Patterns Code Smells Design Pattern VS 演算法 定義 The Adapter Pattern converts the interface of a class into another interface the clients expect.</description>
    </item>
    
    <item>
      <title>原型模式 | Prototype Pattern</title>
      <link>https://ianlifelab.com/design-pattern/prototype-pattern/</link>
      <pubDate>Mon, 21 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/design-pattern/prototype-pattern/</guid>
      <description>本系列文章同步分享於IT邦幫忙第12屆鐵人賽
Design Pattern 系列文章導讀 Design Pattern可以說是開發上大家都會遇到的一個課題， 這系列文會從Design Principles、各種design pattern到最後的Anti-Patterns &amp; Code Smells介紹下去，讓我們可以更了解各種pattern的使用時機與場合。 預計目標主題如下，若有哪部分不熟的章節可以直接點進去看 註：可以利用Online Java Compiler IDE 設計模式 - 入門篇 什麼是Design Pattern? Design Pattern的類型與原則 設計模式 - 原則篇 | Design Principles 單一職責原則 | Single Responsibility Principle 開閉原則 | Open/Closed Principle 里氏替換原則 | Liskov Substitution Principle 介面隔離原則 | Interface Segregation Principle 依賴反轉原則 | Dependency Inversion Principle 合成/聚合複用原則 | Composite/Aggregate Reuse Principle 迪米特法則 | Law of Demeter 設計模式 - 創建型模型篇 | Creational Patterns 單例模式 | Singleton Pattern 工廠模式 | Factory Pattern 抽象工廠模式 | Abstract Factory Pattern 生成器模式 | Builder Pattern 原型模式 | Prototype Pattern 設計模式 - 結構型模型篇 | Structural Patterns 適配器模式 | Adapter Pattern 橋接模式 | Bridge Pattern 组合模式 | Composite Pattern 裝飾者模式 | Decorator Pattern 外觀模式 | Facade Pattern 享元模式 | Flyweight Pattern 代理模式 | Proxy Pattern 設計模式 - 行為型模型篇 | Behavioural Patterns 責任鏈模式 | Chain of Responsibility Pattern 命令模式 | Command Pattern 迭代器模式 | Iterator Pattern 中介者模式 | Mediator Pattern 狀態模式 | State Pattern 備忘錄模式 | Memento Pattern 觀察者模式 | Observer Pattern Strategy Pattern Template Pattern Visitor Pattern Interpreter Pattern 設計模式 - 番外篇 Anti-Patterns Code Smells Design Pattern VS 演算法 定義 用原型例項指定建立物件的種類，並且通過拷貝這些原型建立新的物件。</description>
    </item>
    
    <item>
      <title>生成器模式 | Builder Pattern</title>
      <link>https://ianlifelab.com/design-pattern/builder-pattern/</link>
      <pubDate>Sun, 20 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/design-pattern/builder-pattern/</guid>
      <description>本系列文章同步分享於IT邦幫忙第12屆鐵人賽
Design Pattern 系列文章導讀 Design Pattern可以說是開發上大家都會遇到的一個課題， 這系列文會從Design Principles、各種design pattern到最後的Anti-Patterns &amp; Code Smells介紹下去，讓我們可以更了解各種pattern的使用時機與場合。 預計目標主題如下，若有哪部分不熟的章節可以直接點進去看 註：可以利用Online Java Compiler IDE 設計模式 - 入門篇 什麼是Design Pattern? Design Pattern的類型與原則 設計模式 - 原則篇 | Design Principles 單一職責原則 | Single Responsibility Principle 開閉原則 | Open/Closed Principle 里氏替換原則 | Liskov Substitution Principle 介面隔離原則 | Interface Segregation Principle 依賴反轉原則 | Dependency Inversion Principle 合成/聚合複用原則 | Composite/Aggregate Reuse Principle 迪米特法則 | Law of Demeter 設計模式 - 創建型模型篇 | Creational Patterns 單例模式 | Singleton Pattern 工廠模式 | Factory Pattern 抽象工廠模式 | Abstract Factory Pattern 生成器模式 | Builder Pattern 原型模式 | Prototype Pattern 設計模式 - 結構型模型篇 | Structural Patterns 適配器模式 | Adapter Pattern 橋接模式 | Bridge Pattern 组合模式 | Composite Pattern 裝飾者模式 | Decorator Pattern 外觀模式 | Facade Pattern 享元模式 | Flyweight Pattern 代理模式 | Proxy Pattern 設計模式 - 行為型模型篇 | Behavioural Patterns 責任鏈模式 | Chain of Responsibility Pattern 命令模式 | Command Pattern 迭代器模式 | Iterator Pattern 中介者模式 | Mediator Pattern 狀態模式 | State Pattern 備忘錄模式 | Memento Pattern 觀察者模式 | Observer Pattern Strategy Pattern Template Pattern Visitor Pattern Interpreter Pattern 設計模式 - 番外篇 Anti-Patterns Code Smells Design Pattern VS 演算法 定義 把一個複雜物件的建構與樣貌分離，如此相同的建構過程可以產生不同樣貌的物件</description>
    </item>
    
    <item>
      <title>抽象工廠模式 | Abstract Factory Pattern</title>
      <link>https://ianlifelab.com/design-pattern/abstract-factory-pattern/</link>
      <pubDate>Sat, 19 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/design-pattern/abstract-factory-pattern/</guid>
      <description></description>
    </item>
    
    <item>
      <title>工廠模式 | Factory Pattern</title>
      <link>https://ianlifelab.com/design-pattern/factory-pattern/</link>
      <pubDate>Fri, 18 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/design-pattern/factory-pattern/</guid>
      <description></description>
    </item>
    
    <item>
      <title>單例模式 | Singleton Pattern</title>
      <link>https://ianlifelab.com/design-pattern/singleton-pattern/</link>
      <pubDate>Thu, 17 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/design-pattern/singleton-pattern/</guid>
      <description></description>
    </item>
    
    <item>
      <title>迪米特法則 | Law of Demeter</title>
      <link>https://ianlifelab.com/design-pattern/law-of-demeter/</link>
      <pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/design-pattern/law-of-demeter/</guid>
      <description>本系列文章同步分享於IT邦幫忙第12屆鐵人賽
Design Pattern 系列文章導讀 Design Pattern可以說是開發上大家都會遇到的一個課題， 這系列文會從Design Principles、各種design pattern到最後的Anti-Patterns &amp; Code Smells介紹下去，讓我們可以更了解各種pattern的使用時機與場合。 預計目標主題如下，若有哪部分不熟的章節可以直接點進去看 註：可以利用Online Java Compiler IDE 設計模式 - 入門篇 什麼是Design Pattern? Design Pattern的類型與原則 設計模式 - 原則篇 | Design Principles 單一職責原則 | Single Responsibility Principle 開閉原則 | Open/Closed Principle 里氏替換原則 | Liskov Substitution Principle 介面隔離原則 | Interface Segregation Principle 依賴反轉原則 | Dependency Inversion Principle 合成/聚合複用原則 | Composite/Aggregate Reuse Principle 迪米特法則 | Law of Demeter 設計模式 - 創建型模型篇 | Creational Patterns 單例模式 | Singleton Pattern 工廠模式 | Factory Pattern 抽象工廠模式 | Abstract Factory Pattern 生成器模式 | Builder Pattern 原型模式 | Prototype Pattern 設計模式 - 結構型模型篇 | Structural Patterns 適配器模式 | Adapter Pattern 橋接模式 | Bridge Pattern 组合模式 | Composite Pattern 裝飾者模式 | Decorator Pattern 外觀模式 | Facade Pattern 享元模式 | Flyweight Pattern 代理模式 | Proxy Pattern 設計模式 - 行為型模型篇 | Behavioural Patterns 責任鏈模式 | Chain of Responsibility Pattern 命令模式 | Command Pattern 迭代器模式 | Iterator Pattern 中介者模式 | Mediator Pattern 狀態模式 | State Pattern 備忘錄模式 | Memento Pattern 觀察者模式 | Observer Pattern Strategy Pattern Template Pattern Visitor Pattern Interpreter Pattern 設計模式 - 番外篇 Anti-Patterns Code Smells Design Pattern VS 演算法 定義 各單元對其他單元所知應當有限：只瞭解與目前單元最相關之單元</description>
    </item>
    
    <item>
      <title>合成/聚合複用原則 | Composite/Aggregate Reuse Principle</title>
      <link>https://ianlifelab.com/design-pattern/composite-aggregate-reuse-principle/</link>
      <pubDate>Tue, 15 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/design-pattern/composite-aggregate-reuse-principle/</guid>
      <description>本系列文章同步分享於IT邦幫忙第12屆鐵人賽
Design Pattern 系列文章導讀 Design Pattern可以說是開發上大家都會遇到的一個課題， 這系列文會從Design Principles、各種design pattern到最後的Anti-Patterns &amp; Code Smells介紹下去，讓我們可以更了解各種pattern的使用時機與場合。 預計目標主題如下，若有哪部分不熟的章節可以直接點進去看 註：可以利用Online Java Compiler IDE 設計模式 - 入門篇 什麼是Design Pattern? Design Pattern的類型與原則 設計模式 - 原則篇 | Design Principles 單一職責原則 | Single Responsibility Principle 開閉原則 | Open/Closed Principle 里氏替換原則 | Liskov Substitution Principle 介面隔離原則 | Interface Segregation Principle 依賴反轉原則 | Dependency Inversion Principle 合成/聚合複用原則 | Composite/Aggregate Reuse Principle 迪米特法則 | Law of Demeter 設計模式 - 創建型模型篇 | Creational Patterns 單例模式 | Singleton Pattern 工廠模式 | Factory Pattern 抽象工廠模式 | Abstract Factory Pattern 生成器模式 | Builder Pattern 原型模式 | Prototype Pattern 設計模式 - 結構型模型篇 | Structural Patterns 適配器模式 | Adapter Pattern 橋接模式 | Bridge Pattern 组合模式 | Composite Pattern 裝飾者模式 | Decorator Pattern 外觀模式 | Facade Pattern 享元模式 | Flyweight Pattern 代理模式 | Proxy Pattern 設計模式 - 行為型模型篇 | Behavioural Patterns 責任鏈模式 | Chain of Responsibility Pattern 命令模式 | Command Pattern 迭代器模式 | Iterator Pattern 中介者模式 | Mediator Pattern 狀態模式 | State Pattern 備忘錄模式 | Memento Pattern 觀察者模式 | Observer Pattern Strategy Pattern Template Pattern Visitor Pattern Interpreter Pattern 設計模式 - 番外篇 Anti-Patterns Code Smells Design Pattern VS 演算法 定義 盡量使用組合(contains-a)/聚合(has-a)方式來代替繼承(is-a)來達到重複使用的目的</description>
    </item>
    
    <item>
      <title>依賴反轉原則 | Dependency Inversion Principle</title>
      <link>https://ianlifelab.com/design-pattern/dependence-inversion-principle/</link>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/design-pattern/dependence-inversion-principle/</guid>
      <description>本系列文章同步分享於IT邦幫忙第12屆鐵人賽
Design Pattern 系列文章導讀 Design Pattern可以說是開發上大家都會遇到的一個課題， 這系列文會從Design Principles、各種design pattern到最後的Anti-Patterns &amp; Code Smells介紹下去，讓我們可以更了解各種pattern的使用時機與場合。 預計目標主題如下，若有哪部分不熟的章節可以直接點進去看 註：可以利用Online Java Compiler IDE 設計模式 - 入門篇 什麼是Design Pattern? Design Pattern的類型與原則 設計模式 - 原則篇 | Design Principles 單一職責原則 | Single Responsibility Principle 開閉原則 | Open/Closed Principle 里氏替換原則 | Liskov Substitution Principle 介面隔離原則 | Interface Segregation Principle 依賴反轉原則 | Dependency Inversion Principle 合成/聚合複用原則 | Composite/Aggregate Reuse Principle 迪米特法則 | Law of Demeter 設計模式 - 創建型模型篇 | Creational Patterns 單例模式 | Singleton Pattern 工廠模式 | Factory Pattern 抽象工廠模式 | Abstract Factory Pattern 生成器模式 | Builder Pattern 原型模式 | Prototype Pattern 設計模式 - 結構型模型篇 | Structural Patterns 適配器模式 | Adapter Pattern 橋接模式 | Bridge Pattern 组合模式 | Composite Pattern 裝飾者模式 | Decorator Pattern 外觀模式 | Facade Pattern 享元模式 | Flyweight Pattern 代理模式 | Proxy Pattern 設計模式 - 行為型模型篇 | Behavioural Patterns 責任鏈模式 | Chain of Responsibility Pattern 命令模式 | Command Pattern 迭代器模式 | Iterator Pattern 中介者模式 | Mediator Pattern 狀態模式 | State Pattern 備忘錄模式 | Memento Pattern 觀察者模式 | Observer Pattern Strategy Pattern Template Pattern Visitor Pattern Interpreter Pattern 設計模式 - 番外篇 Anti-Patterns Code Smells Design Pattern VS 演算法 定義 依賴反轉原則(DIP)的定義有兩點：</description>
    </item>
    
    <item>
      <title>介面隔離原則 | Interface Segregation Principle</title>
      <link>https://ianlifelab.com/design-pattern/interface-segregation-principle/</link>
      <pubDate>Sun, 13 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/design-pattern/interface-segregation-principle/</guid>
      <description>本系列文章同步分享於IT邦幫忙第12屆鐵人賽
Design Pattern 系列文章導讀 Design Pattern可以說是開發上大家都會遇到的一個課題， 這系列文會從Design Principles、各種design pattern到最後的Anti-Patterns &amp; Code Smells介紹下去，讓我們可以更了解各種pattern的使用時機與場合。 預計目標主題如下，若有哪部分不熟的章節可以直接點進去看 註：可以利用Online Java Compiler IDE 設計模式 - 入門篇 什麼是Design Pattern? Design Pattern的類型與原則 設計模式 - 原則篇 | Design Principles 單一職責原則 | Single Responsibility Principle 開閉原則 | Open/Closed Principle 里氏替換原則 | Liskov Substitution Principle 介面隔離原則 | Interface Segregation Principle 依賴反轉原則 | Dependency Inversion Principle 合成/聚合複用原則 | Composite/Aggregate Reuse Principle 迪米特法則 | Law of Demeter 設計模式 - 創建型模型篇 | Creational Patterns 單例模式 | Singleton Pattern 工廠模式 | Factory Pattern 抽象工廠模式 | Abstract Factory Pattern 生成器模式 | Builder Pattern 原型模式 | Prototype Pattern 設計模式 - 結構型模型篇 | Structural Patterns 適配器模式 | Adapter Pattern 橋接模式 | Bridge Pattern 组合模式 | Composite Pattern 裝飾者模式 | Decorator Pattern 外觀模式 | Facade Pattern 享元模式 | Flyweight Pattern 代理模式 | Proxy Pattern 設計模式 - 行為型模型篇 | Behavioural Patterns 責任鏈模式 | Chain of Responsibility Pattern 命令模式 | Command Pattern 迭代器模式 | Iterator Pattern 中介者模式 | Mediator Pattern 狀態模式 | State Pattern 備忘錄模式 | Memento Pattern 觀察者模式 | Observer Pattern Strategy Pattern Template Pattern Visitor Pattern Interpreter Pattern 設計模式 - 番外篇 Anti-Patterns Code Smells Design Pattern VS 演算法 定義 Clients should not be forced to depend on methods that they do not use.</description>
    </item>
    
    <item>
      <title>里氏替換原則 | Liskov Substitution Principle</title>
      <link>https://ianlifelab.com/design-pattern/liskov-substitution-principle/</link>
      <pubDate>Sat, 12 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/design-pattern/liskov-substitution-principle/</guid>
      <description>本系列文章同步分享於IT邦幫忙第12屆鐵人賽
Design Pattern 系列文章導讀 Design Pattern可以說是開發上大家都會遇到的一個課題， 這系列文會從Design Principles、各種design pattern到最後的Anti-Patterns &amp; Code Smells介紹下去，讓我們可以更了解各種pattern的使用時機與場合。 預計目標主題如下，若有哪部分不熟的章節可以直接點進去看 註：可以利用Online Java Compiler IDE 設計模式 - 入門篇 什麼是Design Pattern? Design Pattern的類型與原則 設計模式 - 原則篇 | Design Principles 單一職責原則 | Single Responsibility Principle 開閉原則 | Open/Closed Principle 里氏替換原則 | Liskov Substitution Principle 介面隔離原則 | Interface Segregation Principle 依賴反轉原則 | Dependency Inversion Principle 合成/聚合複用原則 | Composite/Aggregate Reuse Principle 迪米特法則 | Law of Demeter 設計模式 - 創建型模型篇 | Creational Patterns 單例模式 | Singleton Pattern 工廠模式 | Factory Pattern 抽象工廠模式 | Abstract Factory Pattern 生成器模式 | Builder Pattern 原型模式 | Prototype Pattern 設計模式 - 結構型模型篇 | Structural Patterns 適配器模式 | Adapter Pattern 橋接模式 | Bridge Pattern 组合模式 | Composite Pattern 裝飾者模式 | Decorator Pattern 外觀模式 | Facade Pattern 享元模式 | Flyweight Pattern 代理模式 | Proxy Pattern 設計模式 - 行為型模型篇 | Behavioural Patterns 責任鏈模式 | Chain of Responsibility Pattern 命令模式 | Command Pattern 迭代器模式 | Iterator Pattern 中介者模式 | Mediator Pattern 狀態模式 | State Pattern 備忘錄模式 | Memento Pattern 觀察者模式 | Observer Pattern Strategy Pattern Template Pattern Visitor Pattern Interpreter Pattern 設計模式 - 番外篇 Anti-Patterns Code Smells Design Pattern VS 演算法 定義 If for each object o1 of type S there is an object o2 of type T such that for all programs P defined in terms of T, the behavior of P is unchanged when o1 is substituted for o2 then S is a subtype of T.</description>
    </item>
    
    <item>
      <title>開閉原則 | Open/Closed Principle</title>
      <link>https://ianlifelab.com/design-pattern/open-closed-principle/</link>
      <pubDate>Fri, 11 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/design-pattern/open-closed-principle/</guid>
      <description>本系列文章同步分享於IT邦幫忙第12屆鐵人賽
Design Pattern 系列文章導讀 Design Pattern可以說是開發上大家都會遇到的一個課題， 這系列文會從Design Principles、各種design pattern到最後的Anti-Patterns &amp; Code Smells介紹下去，讓我們可以更了解各種pattern的使用時機與場合。 預計目標主題如下，若有哪部分不熟的章節可以直接點進去看 註：可以利用Online Java Compiler IDE 設計模式 - 入門篇 什麼是Design Pattern? Design Pattern的類型與原則 設計模式 - 原則篇 | Design Principles 單一職責原則 | Single Responsibility Principle 開閉原則 | Open/Closed Principle 里氏替換原則 | Liskov Substitution Principle 介面隔離原則 | Interface Segregation Principle 依賴反轉原則 | Dependency Inversion Principle 合成/聚合複用原則 | Composite/Aggregate Reuse Principle 迪米特法則 | Law of Demeter 設計模式 - 創建型模型篇 | Creational Patterns 單例模式 | Singleton Pattern 工廠模式 | Factory Pattern 抽象工廠模式 | Abstract Factory Pattern 生成器模式 | Builder Pattern 原型模式 | Prototype Pattern 設計模式 - 結構型模型篇 | Structural Patterns 適配器模式 | Adapter Pattern 橋接模式 | Bridge Pattern 组合模式 | Composite Pattern 裝飾者模式 | Decorator Pattern 外觀模式 | Facade Pattern 享元模式 | Flyweight Pattern 代理模式 | Proxy Pattern 設計模式 - 行為型模型篇 | Behavioural Patterns 責任鏈模式 | Chain of Responsibility Pattern 命令模式 | Command Pattern 迭代器模式 | Iterator Pattern 中介者模式 | Mediator Pattern 狀態模式 | State Pattern 備忘錄模式 | Memento Pattern 觀察者模式 | Observer Pattern Strategy Pattern Template Pattern Visitor Pattern Interpreter Pattern 設計模式 - 番外篇 Anti-Patterns Code Smells Design Pattern VS 演算法 定義 Software entities like classes, modules and functions should be open for extension but closed for modifications.</description>
    </item>
    
    <item>
      <title>單一職責原則 | Single Responsibility Principle</title>
      <link>https://ianlifelab.com/design-pattern/single-responsibility-principle/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/design-pattern/single-responsibility-principle/</guid>
      <description>本系列文章同步分享於IT邦幫忙第12屆鐵人賽
Design Pattern 系列文章導讀 Design Pattern可以說是開發上大家都會遇到的一個課題， 這系列文會從Design Principles、各種design pattern到最後的Anti-Patterns &amp; Code Smells介紹下去，讓我們可以更了解各種pattern的使用時機與場合。 預計目標主題如下，若有哪部分不熟的章節可以直接點進去看 註：可以利用Online Java Compiler IDE 設計模式 - 入門篇 什麼是Design Pattern? Design Pattern的類型與原則 設計模式 - 原則篇 | Design Principles 單一職責原則 | Single Responsibility Principle 開閉原則 | Open/Closed Principle 里氏替換原則 | Liskov Substitution Principle 介面隔離原則 | Interface Segregation Principle 依賴反轉原則 | Dependency Inversion Principle 合成/聚合複用原則 | Composite/Aggregate Reuse Principle 迪米特法則 | Law of Demeter 設計模式 - 創建型模型篇 | Creational Patterns 單例模式 | Singleton Pattern 工廠模式 | Factory Pattern 抽象工廠模式 | Abstract Factory Pattern 生成器模式 | Builder Pattern 原型模式 | Prototype Pattern 設計模式 - 結構型模型篇 | Structural Patterns 適配器模式 | Adapter Pattern 橋接模式 | Bridge Pattern 组合模式 | Composite Pattern 裝飾者模式 | Decorator Pattern 外觀模式 | Facade Pattern 享元模式 | Flyweight Pattern 代理模式 | Proxy Pattern 設計模式 - 行為型模型篇 | Behavioural Patterns 責任鏈模式 | Chain of Responsibility Pattern 命令模式 | Command Pattern 迭代器模式 | Iterator Pattern 中介者模式 | Mediator Pattern 狀態模式 | State Pattern 備忘錄模式 | Memento Pattern 觀察者模式 | Observer Pattern Strategy Pattern Template Pattern Visitor Pattern Interpreter Pattern 設計模式 - 番外篇 Anti-Patterns Code Smells Design Pattern VS 演算法 定義 There should never be more than one reason for a class to change.</description>
    </item>
    
    <item>
      <title>Design Pattern的類型與原則</title>
      <link>https://ianlifelab.com/design-pattern/design-patterns-and-principle/</link>
      <pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/design-pattern/design-patterns-and-principle/</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;!-- raw HTML omitted --&gt;本系列文章同步分享於IT邦幫忙第12屆鐵人賽&lt;!-- raw HTML omitted --&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    
    <item>
      <title>什麼是Design Pattern?</title>
      <link>https://ianlifelab.com/design-pattern/what_is_design_pattern/</link>
      <pubDate>Tue, 08 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/design-pattern/what_is_design_pattern/</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;!-- raw HTML omitted --&gt;本系列文章同步分享於IT邦幫忙第12屆鐵人賽&lt;!-- raw HTML omitted --&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;自從當上了工程師後，大多數時間都負責後端的程式開發，從最一開始設計api到現在sdk的經驗中，了解到一個好的程式架構及設計，不只可以讓後續維運成本降低，往後要擴充也會相對容易許多。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用Bootstrap &#43; Masonry &#43; magnific Popup架設個人相簿</title>
      <link>https://ianlifelab.com/build-blog/build_photograph_in_hugo/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/build-blog/build_photograph_in_hugo/</guid>
      <description>&lt;p&gt;剛開始架設網站時就決定要在網站內架一個相簿，這篇會分享如何用Bootstrap+Masonry+magnificPopup建構屬於你自己的相片牆&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>部署Hugo個人網頁至GitHub</title>
      <link>https://ianlifelab.com/build-blog/deploy_hugo_on_github/</link>
      <pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/build-blog/deploy_hugo_on_github/</guid>
      <description>&lt;p&gt;之前用Hugo架設個人網站，但架設完成後還是需要部署到一個平台，才有辦法瀏覽，
這篇就來分享如何將網頁部署到GitHub以及途中遇到的一些問題&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Photograph</title>
      <link>https://ianlifelab.com/photograph/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/photograph/</guid>
      <description></description>
    </item>
    
    <item>
      <title>使用Hugo建立個人網頁</title>
      <link>https://ianlifelab.com/build-blog/get_started_hugo/</link>
      <pubDate>Thu, 30 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/build-blog/get_started_hugo/</guid>
      <description>&lt;p&gt;一直有想要寫一些文章記錄生活，身為一個工程師，難免會有想要自己架設的靈魂（？，
最近發現hugo可以快速架站，除了有template以外也可以自己更改裡面的配置
，對於一個前端小菜鳥來說，算是一大福音ＸＤ，於是開始了這條漫漫長路～&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Posts Archive</title>
      <link>https://ianlifelab.com/archive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/archive/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Resume</title>
      <link>https://ianlifelab.com/resume/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ianlifelab.com/resume/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
